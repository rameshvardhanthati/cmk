import { ODataRequest } from '../request/odataRequest';
import { ODataMetadata } from './metadata';
import { MockDataEntitySet } from './entitySet';
import { StickyMockEntitySet } from './stickyEntitySet';
import { EntitySet, EntityType } from '@sap-ux/annotation-converter';
import { DataAccessInterface } from './common';
/**
 *
 */
export declare class DataAccess implements DataAccessInterface {
    protected readonly mockDataRootFolder: string;
    protected metadata: ODataMetadata;
    protected readonly strictKeyMode: boolean;
    protected readonly contextBasedIsolation: boolean;
    protected entitySets: Record<string, MockDataEntitySet>;
    protected stickyEntitySets: StickyMockEntitySet[];
    protected generateMockData: boolean;
    /**
     * @param root
     * @param metadata
     * @param strictKeyMode
     * @param contextBasedIsolation
     * @param generateMockData
     */
    constructor(root: string, metadata: ODataMetadata, strictKeyMode: boolean, contextBasedIsolation: boolean, generateMockData: boolean);
    reloadData(metadata: ODataMetadata): void;
    /**
     *
     */
    isV4(): boolean;
    /**
     * @param entityTypeName
     * @param generateMockData
     * @param containedEntityType
     * @param containedData
     */
    getMockEntitySet(entityTypeName: any, generateMockData?: boolean, containedEntityType?: EntityType, containedData?: any): Promise<MockDataEntitySet>;
    /**
     * @param odataRequest
     * @param actionData
     */
    performAction(odataRequest: ODataRequest, actionData?: object): Promise<any>;
    /**
     * @param data
     * @param navPropDetail
     * @param currentEntityType
     * @param currentKeys
     * @param forCreate
     */
    getNavigationPropertyKeys(data: any, navPropDetail: any, currentEntityType: EntityType, currentKeys: Record<string, string>, forCreate?: boolean): Record<string, string>;
    /**
     * @param currentEntitySet
     * @param entityType
     * @param expandNavProp
     * @param data
     * @param requestExpandObject
     * @param tenantId
     * @param previousEntitySet
     * @param visitedPaths
     */
    getExpandData(currentEntitySet: EntitySet, entityType: EntityType, expandNavProp: string, data: object, requestExpandObject: any, tenantId: string, previousEntitySet: EntitySet, visitedPaths: string[]): Promise<void>;
    getMetadata(): ODataMetadata;
    /**
     * @param odataRequest
     */
    getData(odataRequest: ODataRequest): Promise<any>;
    /**
     * @param odataRequest
     * @param patchData
     */
    updateData(odataRequest: ODataRequest, patchData: any): Promise<any>;
    /**
     * @param odataRequest
     * @param postData
     */
    createData(odataRequest: ODataRequest, postData: any): Promise<any>;
    /**
     * @param odataRequest
     */
    deleteData(odataRequest: ODataRequest): Promise<void>;
    /**
     * @param res
     * @param tenantId
     */
    resetStickySessionTimeout(res: any, tenantId: string): void;
}
