{"version":3,"file":"index.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;ACVa;AACb;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,mBAAO,CAAC,IAAqD;;;;;;;;;ACZ7D;AACb;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,oBAAoB,GAAG,yBAAyB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC,yBAAyB;AACzB,MAAM,wEAAwE;AAC9E,MAAM,sEAAsE;AAC5E,MAAM,oEAAoE;AAC1E,MAAM,wDAAwD;AAC9D,MAAM,gEAAgE;AACtE,MAAM,uEAAuE;AAC7E,MAAM,+DAA+D;AACrE,MAAM,yEAAyE;AAC/E,MAAM,6EAA6E;AACnF,MAAM,2EAA2E;AACjF,MAAM,mFAAmF;AACzF,MAAM,qFAAqF;AAC3F,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,iEAAiE;AACpJ;AACA,gGAAgG,qCAAqC;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,iEAAiE;AACpJ;AACA,gGAAgG,qCAAqC;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mCAAmqBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,+DAA+D,yCAAyC;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,6DAA6D;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iDAAiD,gCAAgC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,mCAAmC,qBAAqB,6CAA6C,6DAA6D,GAAG;AACrK;AACA;AACA,mCAAmC,qBAAqB,mEAAmE;AAC3H;AACA;AACA,mCAAmC,qBAAqB,yDAAyD;AACjH;AACA;AACA,+BAA+B;;;;;;;;;ACjhDlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe,mBAAO,CAAC,IAAU;AACjC,6CAA4C,EAAE,qCAAqC,8BAA8B,EAAC;AAClH,eAAe,mBAAO,CAAC,IAAU;AACjC,yCAAwC,EAAE,qCAAqC,0BAA0B,EAAC;;;;;;;;;ACL7F;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb,gBAAgB,mBAAO,CAAC,IAAS;AACjC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,aAAa;;;;;;;;;ACXA;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,iBAAiB,mBAAO,CAAC,IAAQ;AACjC,gBAAgB,mBAAO,CAAC,IAAS;AACjC,iBAAiB,mBAAO,CAAC,IAAwC;AACjE,wBAAwB,mBAAO,CAAC,IAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc,GAAG,gCAAgC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI,sCAAsC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc,GAAG,gBAAgB;AACxE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA,uCAAuC,cAAc,GAAG,gBAAgB;AACxE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6DAA6D,cAAc,GAAG,gBAAgB;AAC9F;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,GAAG,6BAA6B;AAC5E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kCAAkC,UAAU,GAAG,6BAA6B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,UAAU,GAAG,4BAA4B;AAC1E,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,kCAAkC,UAAU,GAAG,6BAA6B;AAC5E,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,mCAAmC,UAAU,GAAG,oBAAoB,GAAG,2BAA2B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,mCAAmC,UAAU,GAAG,oBAAoB,GAAG,2BAA2B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,kDAAkD;AAClD;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,sCAAsC,0DAA0D;AAChG;AACA,2BAA2B,UAAU,GAAG,wBAAwB,GAAG,iBAAiB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,UAAU,GAAG,uBAAuB;AAC/E;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,UAAU,GAAG,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,UAAU,GAAG,uBAAuB;AAC/E;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,yCAAyC;AACzD;AACA;AACA;AACA;AACA,2CAA2C,cAAc,GAAG,sBAAsB;AAClF;AACA;AACA;AACA;AACA,iEAAiE,2CAA2C;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,2BAA2B;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,2BAA2B;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6BAA6B;AACzC;AACA;AACA;AACA;AACA,qCAAqC,cAAc,GAAG,cAAc;AACpE;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gCAAgC;AAChF;AACA;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU,GAAG,2CAA2C;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB,GAAG,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS,GAAG,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,8BAA8B,QAAQ;AACtC;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB;;;;;;;;;AC32BJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B,GAAG,4BAA4B,GAAG,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB,oBAAoB,GAAG,MAAM;AACnD;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS,GAAG,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB,oBAAoB,GAAG,MAAM;AACnD;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS,GAAG,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;;ACpHb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B;;;;;;;;;AC5kBf;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK;;;;;;;;ACTpE,CAAC,kBAAkB;AACnB,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,WAAW;AAClC;AACA,0BAA0B,mBAAmB,aAAa;AAC1D,yBAAyB,yBAAyB;AAClD,yBAAyB;AACzB;;AAEA;AACA;AACA,aAAa,gCAAwB;AACrC,IAAI;AACJ;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,iBAAiB,uCAAuC;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnaAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA;AACA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,YAAY,OAAO,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA,CAAC,EAAE,MAA8B,GAAG,CAAa,CAAC;;;;;;;;AC5hDlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA,aAAa,mBAAO,CAAC,IAAU;AAC/B,eAAe,mBAAO,CAAC,IAAY;AACnC,aAAa,mBAAO,CAAC,IAAU;AAC/B,eAAe,mBAAO,CAAC,IAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA,aAAa,mBAAO,CAAC,IAAkB;AACvC,cAAc,iCAAiC;;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB,4BAA4B,UAAU;AACtC,kCAAkC,sBAAsB,sBAAsB;AAC9E;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA,2FAA2F;AAC3F,4KAA4K;AAC5K,mEAAmE;AACnE,gJAAgJ;AAChJ,mJAAmJ;AACnJ,0HAA0H;AAC1H,0HAA0H;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/TA,aAAa,mBAAO,CAAC,IAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;;;;;;;ACjBA,cAAc,iCAAiC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA,UAAU,mBAAO,CAAC,IAAK;AACvB,oCAAoC,OAAO,mBAAmB;AAC9D,aAAa,mBAAO,CAAC,IAAkB;AACvC,cAAc,iCAAiC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sBAAsB,sBAAsB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sources":["webpack://FEMockserver/webpack/universalModuleDefinition","webpack://FEMockserver/../../node_modules/@sap-ux/annotation-converter/dist/index.js","webpack://FEMockserver/../../node_modules/@sap-ux/annotation-converter/dist/sap/fe/core/converters/common/AnnotationConverter.js","webpack://FEMockserver/../../node_modules/@sap-ux/edmx-parser/dist/index.js","webpack://FEMockserver/../../node_modules/@sap-ux/edmx-parser/dist/merger.js","webpack://FEMockserver/../../node_modules/@sap-ux/edmx-parser/dist/parser.js","webpack://FEMockserver/../../node_modules/@sap-ux/edmx-parser/dist/utils.js","webpack://FEMockserver/../../node_modules/@sap-ux/edmx-parser/dist/v2annotations.js","webpack://FEMockserver/../../node_modules/@sap-ux/vocabularies-types/dist/Parser.js","webpack://FEMockserver/../../node_modules/sax/lib/sax.js","webpack://FEMockserver/../../node_modules/xml-js/lib/array-helper.js","webpack://FEMockserver/../../node_modules/xml-js/lib/index.js","webpack://FEMockserver/../../node_modules/xml-js/lib/js2xml.js","webpack://FEMockserver/../../node_modules/xml-js/lib/json2xml.js","webpack://FEMockserver/../../node_modules/xml-js/lib/options-helper.js","webpack://FEMockserver/../../node_modules/xml-js/lib/xml2js.js","webpack://FEMockserver/../../node_modules/xml-js/lib/xml2json.js","webpack://FEMockserver/./src/index.ts","webpack://FEMockserver/./src/middleware.ts","webpack://FEMockserver/./src/router/batch/content/appHttp.ts","webpack://FEMockserver/./src/router/batch/content/batch.ts","webpack://FEMockserver/./src/router/batch/content/batchContent.ts","webpack://FEMockserver/./src/router/batch/content/batchParser.ts","webpack://FEMockserver/./src/router/batch/http/simpleHttpRequest.ts","webpack://FEMockserver/./src/router/batch/http/simpleHttpResponse.ts","webpack://FEMockserver/./src/router/batch/index.ts","webpack://FEMockserver/./src/router/batch/keyGenerator.ts","webpack://FEMockserver/./src/router/catalog.ts","webpack://FEMockserver/./src/router/data/ContainedDataEntitySet.ts","webpack://FEMockserver/./src/router/data/common.ts","webpack://FEMockserver/./src/router/data/dataAccess.ts","webpack://FEMockserver/./src/router/data/draftEntitySet.ts","webpack://FEMockserver/./src/router/data/entitySet.ts","webpack://FEMockserver/./src/router/data/fileBasedMockData.ts","webpack://FEMockserver/./src/router/data/functionBasedMockData.ts","webpack://FEMockserver/./src/router/data/id.ts","webpack://FEMockserver/./src/router/data/metadata.ts","webpack://FEMockserver/./src/router/data/mockEntityContainer.ts","webpack://FEMockserver/./src/router/data/stickyEntitySet.ts","webpack://FEMockserver/./src/router/odata.ts","webpack://FEMockserver/./src/router/request/filterParser.ts","webpack://FEMockserver/./src/router/request/odataRequest.ts","webpack://FEMockserver/./src/router/request/odataV2Request.ts","webpack://FEMockserver/./src/router/request/odataV4Request.ts","webpack://FEMockserver/./src/router/utils/fileLoader.ts","webpack://FEMockserver/./src/router/utils/stringToCds.ts","webpack://FEMockserver/external commonjs \"@ui5/logger\"","webpack://FEMockserver/external commonjs \"balanced-match\"","webpack://FEMockserver/external commonjs \"body-parser\"","webpack://FEMockserver/external commonjs \"chevrotain\"","webpack://FEMockserver/external commonjs \"chokidar\"","webpack://FEMockserver/external commonjs \"lodash.clonedeep\"","webpack://FEMockserver/external commonjs \"nise\"","webpack://FEMockserver/external commonjs \"query-string\"","webpack://FEMockserver/external commonjs \"router\"","webpack://FEMockserver/external commonjs \"url\"","webpack://FEMockserver/external node-commonjs \"fs\"","webpack://FEMockserver/external node-commonjs \"http\"","webpack://FEMockserver/external node-commonjs \"path\"","webpack://FEMockserver/external node-commonjs \"querystring\"","webpack://FEMockserver/external node-commonjs \"stream\"","webpack://FEMockserver/external node-commonjs \"string_decoder\"","webpack://FEMockserver/external node-commonjs \"util\"","webpack://FEMockserver/webpack/bootstrap","webpack://FEMockserver/webpack/before-startup","webpack://FEMockserver/webpack/startup","webpack://FEMockserver/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FEMockserver\"] = factory();\n\telse\n\t\troot[\"FEMockserver\"] = factory();\n})(global, function() {\nreturn ","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./sap/fe/core/converters/common/AnnotationConverter\"), exports);\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.revertTermToGenericType = exports.convertTypes = exports.defaultReferences = void 0;\nvar Path = /** @class */ (function () {\n    function Path(pathExpression, targetName, annotationsTerm, annotationType, term) {\n        this.path = pathExpression.Path;\n        this.type = \"Path\";\n        this.$target = targetName;\n        (this.term = term), (this.annotationType = annotationType), (this.annotationsTerm = annotationsTerm);\n    }\n    return Path;\n}());\nvar TermToTypes;\n(function (TermToTypes) {\n    TermToTypes[\"Org.OData.Authorization.V1.SecuritySchemes\"] = \"Org.OData.Authorization.V1.SecurityScheme\";\n    TermToTypes[\"Org.OData.Authorization.V1.Authorizations\"] = \"Org.OData.Authorization.V1.Authorization\";\n    TermToTypes[\"Org.OData.Core.V1.Revisions\"] = \"Org.OData.Core.V1.RevisionType\";\n    TermToTypes[\"Org.OData.Core.V1.Links\"] = \"Org.OData.Core.V1.Link\";\n    TermToTypes[\"Org.OData.Core.V1.Example\"] = \"Org.OData.Core.V1.ExampleValue\";\n    TermToTypes[\"Org.OData.Core.V1.Messages\"] = \"Org.OData.Core.V1.MessageType\";\n    TermToTypes[\"Org.OData.Core.V1.ValueException\"] = \"Org.OData.Core.V1.ValueExceptionType\";\n    TermToTypes[\"Org.OData.Core.V1.ResourceException\"] = \"Org.OData.Core.V1.ResourceExceptionType\";\n    TermToTypes[\"Org.OData.Core.V1.DataModificationException\"] = \"Org.OData.Core.V1.DataModificationExceptionType\";\n    TermToTypes[\"Org.OData.Core.V1.IsLanguageDependent\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.DereferenceableIDs\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.ConventionalIDs\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.Permissions\"] = \"Org.OData.Core.V1.Permission\";\n    TermToTypes[\"Org.OData.Core.V1.DefaultNamespace\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.Immutable\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.Computed\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.ComputedDefaultValue\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.IsURL\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.IsMediaType\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.ContentDisposition\"] = \"Org.OData.Core.V1.ContentDispositionType\";\n    TermToTypes[\"Org.OData.Core.V1.OptimisticConcurrency\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"Org.OData.Core.V1.AdditionalProperties\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.AutoExpand\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.AutoExpandReferences\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.MayImplement\"] = \"Org.OData.Core.V1.QualifiedTypeName\";\n    TermToTypes[\"Org.OData.Core.V1.Ordered\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.PositionalInsert\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Core.V1.AlternateKeys\"] = \"Org.OData.Core.V1.AlternateKey\";\n    TermToTypes[\"Org.OData.Core.V1.OptionalParameter\"] = \"Org.OData.Core.V1.OptionalParameterType\";\n    TermToTypes[\"Org.OData.Core.V1.OperationAvailable\"] = \"Edm.Boolean\";\n    TermToTypes[\"Org.OData.Core.V1.SymbolicName\"] = \"Org.OData.Core.V1.SimpleIdentifier\";\n    TermToTypes[\"Org.OData.Capabilities.V1.ConformanceLevel\"] = \"Org.OData.Capabilities.V1.ConformanceLevelType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.AsynchronousRequestsSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.BatchContinueOnErrorSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.IsolationSupported\"] = \"Org.OData.Capabilities.V1.IsolationLevel\";\n    TermToTypes[\"Org.OData.Capabilities.V1.CrossJoinSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.CallbackSupported\"] = \"Org.OData.Capabilities.V1.CallbackType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.ChangeTracking\"] = \"Org.OData.Capabilities.V1.ChangeTrackingType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.CountRestrictions\"] = \"Org.OData.Capabilities.V1.CountRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.NavigationRestrictions\"] = \"Org.OData.Capabilities.V1.NavigationRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.IndexableByKey\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.TopSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.SkipSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.ComputeSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.SelectSupport\"] = \"Org.OData.Capabilities.V1.SelectSupportType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.BatchSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.BatchSupport\"] = \"Org.OData.Capabilities.V1.BatchSupportType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.FilterRestrictions\"] = \"Org.OData.Capabilities.V1.FilterRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.SortRestrictions\"] = \"Org.OData.Capabilities.V1.SortRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.ExpandRestrictions\"] = \"Org.OData.Capabilities.V1.ExpandRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.SearchRestrictions\"] = \"Org.OData.Capabilities.V1.SearchRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.KeyAsSegmentSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.QuerySegmentSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.InsertRestrictions\"] = \"Org.OData.Capabilities.V1.InsertRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.DeepInsertSupport\"] = \"Org.OData.Capabilities.V1.DeepInsertSupportType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.UpdateRestrictions\"] = \"Org.OData.Capabilities.V1.UpdateRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.DeepUpdateSupport\"] = \"Org.OData.Capabilities.V1.DeepUpdateSupportType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.DeleteRestrictions\"] = \"Org.OData.Capabilities.V1.DeleteRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.CollectionPropertyRestrictions\"] = \"Org.OData.Capabilities.V1.CollectionPropertyRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.OperationRestrictions\"] = \"Org.OData.Capabilities.V1.OperationRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.AnnotationValuesInQuerySupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Capabilities.V1.ModificationQueryOptions\"] = \"Org.OData.Capabilities.V1.ModificationQueryOptionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.ReadRestrictions\"] = \"Org.OData.Capabilities.V1.ReadRestrictionsType\";\n    TermToTypes[\"Org.OData.Capabilities.V1.CustomHeaders\"] = \"Org.OData.Capabilities.V1.CustomParameter\";\n    TermToTypes[\"Org.OData.Capabilities.V1.CustomQueryOptions\"] = \"Org.OData.Capabilities.V1.CustomParameter\";\n    TermToTypes[\"Org.OData.Capabilities.V1.MediaLocationUpdateSupported\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Aggregation.V1.ApplySupported\"] = \"Org.OData.Aggregation.V1.ApplySupportedType\";\n    TermToTypes[\"Org.OData.Aggregation.V1.Groupable\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Aggregation.V1.Aggregatable\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Aggregation.V1.ContextDefiningProperties\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"Org.OData.Aggregation.V1.LeveledHierarchy\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"Org.OData.Aggregation.V1.RecursiveHierarchy\"] = \"Org.OData.Aggregation.V1.RecursiveHierarchyType\";\n    TermToTypes[\"Org.OData.Aggregation.V1.AvailableOnAggregates\"] = \"Org.OData.Aggregation.V1.AvailableOnAggregatesType\";\n    TermToTypes[\"Org.OData.Validation.V1.Minimum\"] = \"Edm.PrimitiveType\";\n    TermToTypes[\"Org.OData.Validation.V1.Maximum\"] = \"Edm.PrimitiveType\";\n    TermToTypes[\"Org.OData.Validation.V1.Exclusive\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"Org.OData.Validation.V1.AllowedValues\"] = \"Org.OData.Validation.V1.AllowedValue\";\n    TermToTypes[\"Org.OData.Validation.V1.MultipleOf\"] = \"Edm.Decimal\";\n    TermToTypes[\"Org.OData.Validation.V1.Constraint\"] = \"Org.OData.Validation.V1.ConstraintType\";\n    TermToTypes[\"Org.OData.Validation.V1.ItemsOf\"] = \"Org.OData.Validation.V1.ItemsOfType\";\n    TermToTypes[\"Org.OData.Validation.V1.OpenPropertyTypeConstraint\"] = \"Org.OData.Core.V1.QualifiedTypeName\";\n    TermToTypes[\"Org.OData.Validation.V1.DerivedTypeConstraint\"] = \"Org.OData.Core.V1.QualifiedTypeName\";\n    TermToTypes[\"Org.OData.Validation.V1.AllowedTerms\"] = \"Org.OData.Core.V1.QualifiedTermName\";\n    TermToTypes[\"Org.OData.Validation.V1.ApplicableTerms\"] = \"Org.OData.Core.V1.QualifiedTermName\";\n    TermToTypes[\"Org.OData.Validation.V1.MaxItems\"] = \"Edm.Int64\";\n    TermToTypes[\"Org.OData.Validation.V1.MinItems\"] = \"Edm.Int64\";\n    TermToTypes[\"Org.OData.Measures.V1.Scale\"] = \"Edm.Byte\";\n    TermToTypes[\"Org.OData.Measures.V1.DurationGranularity\"] = \"Org.OData.Measures.V1.DurationGranularityType\";\n    TermToTypes[\"com.sap.vocabularies.Analytics.v1.Dimension\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Analytics.v1.Measure\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Analytics.v1.AccumulativeMeasure\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Analytics.v1.RolledUpPropertyCount\"] = \"Edm.Int16\";\n    TermToTypes[\"com.sap.vocabularies.Analytics.v1.PlanningAction\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Analytics.v1.AggregatedProperties\"] = \"com.sap.vocabularies.Analytics.v1.AggregatedPropertyType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ServiceVersion\"] = \"Edm.Int32\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ServiceSchemaVersion\"] = \"Edm.Int32\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.TextFor\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsLanguageIdentifier\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.TextFormat\"] = \"com.sap.vocabularies.Common.v1.TextFormatType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsDigitSequence\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsUpperCase\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCurrency\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsUnit\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.UnitSpecificScale\"] = \"Edm.PrimitiveType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.UnitSpecificPrecision\"] = \"Edm.PrimitiveType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.SecondaryKey\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.MinOccurs\"] = \"Edm.Int64\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.MaxOccurs\"] = \"Edm.Int64\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.AssociationEntity\"] = \"Edm.NavigationPropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.DerivedNavigation\"] = \"Edm.NavigationPropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.Masked\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.MaskedAlways\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.SemanticObjectMapping\"] = \"com.sap.vocabularies.Common.v1.SemanticObjectMappingType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsInstanceAnnotation\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.FilterExpressionRestrictions\"] = \"com.sap.vocabularies.Common.v1.FilterExpressionRestrictionType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.FieldControl\"] = \"com.sap.vocabularies.Common.v1.FieldControlType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.Application\"] = \"com.sap.vocabularies.Common.v1.ApplicationType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.Timestamp\"] = \"Edm.DateTimeOffset\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ErrorResolution\"] = \"com.sap.vocabularies.Common.v1.ErrorResolutionType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.Messages\"] = \"Edm.ComplexType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.numericSeverity\"] = \"com.sap.vocabularies.Common.v1.NumericMessageSeverityType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.MaximumNumericMessageSeverity\"] = \"com.sap.vocabularies.Common.v1.NumericMessageSeverityType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsActionCritical\"] = \"Edm.Boolean\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.Attributes\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.RelatedRecursiveHierarchy\"] = \"Edm.AnnotationPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.Interval\"] = \"com.sap.vocabularies.Common.v1.IntervalType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ResultContext\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.WeakReferentialConstraint\"] = \"com.sap.vocabularies.Common.v1.WeakReferentialConstraintType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsNaturalPerson\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ValueList\"] = \"com.sap.vocabularies.Common.v1.ValueListType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers\"] = \"com.sap.vocabularies.Common.v1.SimpleIdentifier\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ValueListWithFixedValues\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ValueListMapping\"] = \"com.sap.vocabularies.Common.v1.ValueListMappingType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarYear\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarHalfyear\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarQuarter\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarMonth\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarWeek\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsDayOfCalendarMonth\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsDayOfCalendarYear\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarYearHalfyear\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarYearQuarter\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarYearMonth\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarYearWeek\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsCalendarDate\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalYear\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalPeriod\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalYearPeriod\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalQuarter\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalYearQuarter\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalWeek\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalYearWeek\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsDayOfFiscalYear\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.IsFiscalYearVariant\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.MutuallyExclusiveTerm\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.DraftRoot\"] = \"com.sap.vocabularies.Common.v1.DraftRootType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.DraftNode\"] = \"com.sap.vocabularies.Common.v1.DraftNodeType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.DraftActivationVia\"] = \"com.sap.vocabularies.Common.v1.SimpleIdentifier\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.EditableFieldFor\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.SemanticKey\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.SideEffects\"] = \"com.sap.vocabularies.Common.v1.SideEffectsType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.DefaultValuesFunction\"] = \"com.sap.vocabularies.Common.v1.QualifiedName\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.FilterDefaultValue\"] = \"Edm.PrimitiveType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.FilterDefaultValueHigh\"] = \"Edm.PrimitiveType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.SortOrder\"] = \"com.sap.vocabularies.Common.v1.SortOrderType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.RecursiveHierarchy\"] = \"com.sap.vocabularies.Common.v1.RecursiveHierarchyType\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.CreatedAt\"] = \"Edm.DateTimeOffset\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.CreatedBy\"] = \"com.sap.vocabularies.Common.v1.UserID\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ChangedAt\"] = \"Edm.DateTimeOffset\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ChangedBy\"] = \"com.sap.vocabularies.Common.v1.UserID\";\n    TermToTypes[\"com.sap.vocabularies.Common.v1.ApplyMultiUnitBehaviorForSortingAndFiltering\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.CodeList.v1.CurrencyCodes\"] = \"com.sap.vocabularies.CodeList.v1.CodeListSource\";\n    TermToTypes[\"com.sap.vocabularies.CodeList.v1.UnitsOfMeasure\"] = \"com.sap.vocabularies.CodeList.v1.CodeListSource\";\n    TermToTypes[\"com.sap.vocabularies.CodeList.v1.StandardCode\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.CodeList.v1.ExternalCode\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.CodeList.v1.IsConfigurationDeprecationCode\"] = \"Edm.Boolean\";\n    TermToTypes[\"com.sap.vocabularies.Communication.v1.Contact\"] = \"com.sap.vocabularies.Communication.v1.ContactType\";\n    TermToTypes[\"com.sap.vocabularies.Communication.v1.Address\"] = \"com.sap.vocabularies.Communication.v1.AddressType\";\n    TermToTypes[\"com.sap.vocabularies.Communication.v1.IsEmailAddress\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Communication.v1.IsPhoneNumber\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Communication.v1.Event\"] = \"com.sap.vocabularies.Communication.v1.EventData\";\n    TermToTypes[\"com.sap.vocabularies.Communication.v1.Task\"] = \"com.sap.vocabularies.Communication.v1.TaskData\";\n    TermToTypes[\"com.sap.vocabularies.Communication.v1.Message\"] = \"com.sap.vocabularies.Communication.v1.MessageData\";\n    TermToTypes[\"com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchy\"] = \"com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchyType\";\n    TermToTypes[\"com.sap.vocabularies.PersonalData.v1.EntitySemantics\"] = \"com.sap.vocabularies.PersonalData.v1.EntitySemanticsType\";\n    TermToTypes[\"com.sap.vocabularies.PersonalData.v1.FieldSemantics\"] = \"com.sap.vocabularies.PersonalData.v1.FieldSemanticsType\";\n    TermToTypes[\"com.sap.vocabularies.PersonalData.v1.IsPotentiallyPersonal\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.PersonalData.v1.IsPotentiallySensitive\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.Session.v1.StickySessionSupported\"] = \"com.sap.vocabularies.Session.v1.StickySessionSupportedType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.HeaderInfo\"] = \"com.sap.vocabularies.UI.v1.HeaderInfoType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Identification\"] = \"com.sap.vocabularies.UI.v1.DataFieldAbstract\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Badge\"] = \"com.sap.vocabularies.UI.v1.BadgeType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.LineItem\"] = \"com.sap.vocabularies.UI.v1.DataFieldAbstract\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.StatusInfo\"] = \"com.sap.vocabularies.UI.v1.DataFieldAbstract\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.FieldGroup\"] = \"com.sap.vocabularies.UI.v1.FieldGroupType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.ConnectedFields\"] = \"com.sap.vocabularies.UI.v1.ConnectedFieldsType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.GeoLocations\"] = \"com.sap.vocabularies.UI.v1.GeoLocationType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.GeoLocation\"] = \"com.sap.vocabularies.UI.v1.GeoLocationType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Contacts\"] = \"Edm.AnnotationPath\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.MediaResource\"] = \"com.sap.vocabularies.UI.v1.MediaResourceType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.DataPoint\"] = \"com.sap.vocabularies.UI.v1.DataPointType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.KPI\"] = \"com.sap.vocabularies.UI.v1.KPIType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Chart\"] = \"com.sap.vocabularies.UI.v1.ChartDefinitionType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.ValueCriticality\"] = \"com.sap.vocabularies.UI.v1.ValueCriticalityType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.CriticalityLabels\"] = \"com.sap.vocabularies.UI.v1.CriticalityLabelType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.SelectionFields\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Facets\"] = \"com.sap.vocabularies.UI.v1.Facet\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.HeaderFacets\"] = \"com.sap.vocabularies.UI.v1.Facet\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.QuickViewFacets\"] = \"com.sap.vocabularies.UI.v1.Facet\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.QuickCreateFacets\"] = \"com.sap.vocabularies.UI.v1.Facet\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.FilterFacets\"] = \"com.sap.vocabularies.UI.v1.ReferenceFacet\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.SelectionPresentationVariant\"] = \"com.sap.vocabularies.UI.v1.SelectionPresentationVariantType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.PresentationVariant\"] = \"com.sap.vocabularies.UI.v1.PresentationVariantType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.SelectionVariant\"] = \"com.sap.vocabularies.UI.v1.SelectionVariantType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.ThingPerspective\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.IsSummary\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.PartOfPreview\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Map\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Gallery\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.IsImageURL\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.IsImage\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.MultiLineText\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.TextArrangement\"] = \"com.sap.vocabularies.UI.v1.TextArrangementType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Importance\"] = \"com.sap.vocabularies.UI.v1.ImportanceType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Hidden\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.CreateHidden\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.UpdateHidden\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.DeleteHidden\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.HiddenFilter\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.DataFieldDefault\"] = \"com.sap.vocabularies.UI.v1.DataFieldAbstract\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Criticality\"] = \"com.sap.vocabularies.UI.v1.CriticalityType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.CriticalityCalculation\"] = \"com.sap.vocabularies.UI.v1.CriticalityCalculationType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.Emphasized\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.OrderBy\"] = \"Edm.PropertyPath\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.ParameterDefaultValue\"] = \"Edm.PrimitiveType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.RecommendationState\"] = \"com.sap.vocabularies.UI.v1.RecommendationStateType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.RecommendationList\"] = \"com.sap.vocabularies.UI.v1.RecommendationListType\";\n    TermToTypes[\"com.sap.vocabularies.UI.v1.ExcludeFromNavigationContext\"] = \"Org.OData.Core.V1.Tag\";\n    TermToTypes[\"com.sap.vocabularies.HTML5.v1.CssDefaults\"] = \"com.sap.vocabularies.HTML5.v1.CssDefaultsType\";\n})(TermToTypes || (TermToTypes = {}));\nexports.defaultReferences = [\n    { alias: \"Capabilities\", namespace: \"Org.OData.Capabilities.V1\", uri: \"\" },\n    { alias: \"Aggregation\", namespace: \"Org.OData.Aggregation.V1\", uri: \"\" },\n    { alias: \"Validation\", namespace: \"Org.OData.Validation.V1\", uri: \"\" },\n    { namespace: \"Org.OData.Core.V1\", alias: \"Core\", uri: \"\" },\n    { namespace: \"Org.OData.Measures.V1\", alias: \"Measures\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.Common.v1\", alias: \"Common\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.UI.v1\", alias: \"UI\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.Session.v1\", alias: \"Session\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.Analytics.v1\", alias: \"Analytics\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.CodeList.v1\", alias: \"CodeList\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.PersonalData.v1\", alias: \"PersonalData\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.Communication.v1\", alias: \"Communication\", uri: \"\" },\n    { namespace: \"com.sap.vocabularies.HTML5.v1\", alias: \"HTML5\", uri: \"\" }\n];\nfunction alias(references, unaliasedValue) {\n    if (!references.reverseReferenceMap) {\n        references.reverseReferenceMap = references.reduce(function (map, reference) {\n            map[reference.namespace] = reference;\n            return map;\n        }, {});\n    }\n    if (!unaliasedValue) {\n        return unaliasedValue;\n    }\n    var lastDotIndex = unaliasedValue.lastIndexOf(\".\");\n    var namespace = unaliasedValue.substr(0, lastDotIndex);\n    var value = unaliasedValue.substr(lastDotIndex + 1);\n    var reference = references.reverseReferenceMap[namespace];\n    if (reference) {\n        return reference.alias + \".\" + value;\n    }\n    else {\n        // Try to see if it's an annotation Path like to_SalesOrder/@UI.LineItem\n        if (unaliasedValue.indexOf(\"@\") !== -1) {\n            var _a = unaliasedValue.split(\"@\"), preAlias = _a[0], postAlias = _a.slice(1);\n            return preAlias + \"@\" + alias(references, postAlias.join(\"@\"));\n        }\n        else {\n            return unaliasedValue;\n        }\n    }\n}\nfunction unalias(references, aliasedValue) {\n    if (!references.referenceMap) {\n        references.referenceMap = references.reduce(function (map, reference) {\n            map[reference.alias] = reference;\n            return map;\n        }, {});\n    }\n    if (!aliasedValue) {\n        return aliasedValue;\n    }\n    var _a = aliasedValue.split(\".\"), alias = _a[0], value = _a.slice(1);\n    var reference = references.referenceMap[alias];\n    if (reference) {\n        return reference.namespace + \".\" + value.join(\".\");\n    }\n    else {\n        // Try to see if it's an annotation Path like to_SalesOrder/@UI.LineItem\n        if (aliasedValue.indexOf(\"@\") !== -1) {\n            var _b = aliasedValue.split(\"@\"), preAlias = _b[0], postAlias = _b.slice(1);\n            return preAlias + \"@\" + unalias(references, postAlias.join(\"@\"));\n        }\n        else {\n            return aliasedValue;\n        }\n    }\n}\nfunction buildObjectMap(parserOutput) {\n    var objectMap = {};\n    if (parserOutput.schema.entityContainer && parserOutput.schema.entityContainer.fullyQualifiedName) {\n        objectMap[parserOutput.schema.entityContainer.fullyQualifiedName] = parserOutput.schema.entityContainer;\n    }\n    parserOutput.schema.entitySets.forEach(function (entitySet) {\n        objectMap[entitySet.fullyQualifiedName] = entitySet;\n    });\n    parserOutput.schema.actions.forEach(function (action) {\n        objectMap[action.fullyQualifiedName] = action;\n        if (action.isBound) {\n            var unBoundActionName = action.fullyQualifiedName.split(\"(\")[0];\n            if (!objectMap[unBoundActionName]) {\n                objectMap[unBoundActionName] = {\n                    _type: \"UnboundGenericAction\",\n                    actions: []\n                };\n            }\n            objectMap[unBoundActionName].actions.push(action);\n        }\n        action.parameters.forEach(function (parameter) {\n            objectMap[parameter.fullyQualifiedName] = parameter;\n        });\n    });\n    parserOutput.schema.complexTypes.forEach(function (complexType) {\n        objectMap[complexType.fullyQualifiedName] = complexType;\n        complexType.properties.forEach(function (property) {\n            objectMap[property.fullyQualifiedName] = property;\n        });\n    });\n    parserOutput.schema.entityTypes.forEach(function (entityType) {\n        objectMap[entityType.fullyQualifiedName] = entityType;\n        entityType.entityProperties.forEach(function (property) {\n            objectMap[property.fullyQualifiedName] = property;\n            if (property.type.indexOf(\"Edm\") === -1) {\n                // Handle complex types\n                var complexTypeDefinition = objectMap[property.type];\n                if (complexTypeDefinition && complexTypeDefinition.properties) {\n                    complexTypeDefinition.properties.forEach(function (complexTypeProp) {\n                        var complexTypePropTarget = Object.assign(complexTypeProp, {\n                            _type: \"Property\",\n                            fullyQualifiedName: property.fullyQualifiedName + \"/\" + complexTypeProp.name\n                        });\n                        objectMap[complexTypePropTarget.fullyQualifiedName] = complexTypePropTarget;\n                    });\n                }\n            }\n        });\n        entityType.navigationProperties.forEach(function (navProperty) {\n            objectMap[navProperty.fullyQualifiedName] = navProperty;\n        });\n    });\n    Object.keys(parserOutput.schema.annotations).forEach(function (annotationSource) {\n        parserOutput.schema.annotations[annotationSource].forEach(function (annotationList) {\n            var currentTargetName = unalias(parserOutput.references, annotationList.target);\n            annotationList.annotations.forEach(function (annotation) {\n                var annotationFQN = currentTargetName + \"@\" + unalias(parserOutput.references, annotation.term);\n                if (annotation.qualifier) {\n                    annotationFQN += \"#\" + annotation.qualifier;\n                }\n                if (typeof annotation !== \"object\") {\n                    debugger;\n                }\n                objectMap[annotationFQN] = annotation;\n                annotation.fullyQualifiedName = annotationFQN;\n            });\n        });\n    });\n    return objectMap;\n}\nfunction combinePath(currentTarget, path) {\n    if (path.startsWith(\"@\")) {\n        return currentTarget + unalias(exports.defaultReferences, path);\n    }\n    else {\n        return currentTarget + \"/\" + path;\n    }\n}\nfunction addAnnotationErrorMessage(path, oErrorMsg) {\n    if (!ALL_ANNOTATION_ERRORS[path]) {\n        ALL_ANNOTATION_ERRORS[path] = [oErrorMsg];\n    }\n    else {\n        ALL_ANNOTATION_ERRORS[path].push(oErrorMsg);\n    }\n}\nfunction resolveTarget(objectMap, currentTarget, path, pathOnly, includeVisitedObjects, annotationType, annotationsTerm) {\n    if (pathOnly === void 0) { pathOnly = false; }\n    if (includeVisitedObjects === void 0) { includeVisitedObjects = false; }\n    if (!path) {\n        return undefined;\n    }\n    //const propertyPath = path;\n    var aVisitedObjects = [];\n    if (currentTarget && currentTarget._type === \"Property\") {\n        currentTarget = objectMap[currentTarget.fullyQualifiedName.split(\"/\")[0]];\n    }\n    path = combinePath(currentTarget.fullyQualifiedName, path);\n    var pathSplit = path.split(\"/\");\n    var targetPathSplit = [];\n    pathSplit.forEach(function (pathPart) {\n        // Separate out the annotation\n        if (pathPart.indexOf(\"@\") !== -1) {\n            var _a = pathPart.split(\"@\"), path_1 = _a[0], annotationPath = _a[1];\n            targetPathSplit.push(path_1);\n            targetPathSplit.push(\"@\" + annotationPath);\n        }\n        else {\n            targetPathSplit.push(pathPart);\n        }\n    });\n    var currentPath = path;\n    var currentContext = currentTarget;\n    var target = targetPathSplit.reduce(function (currentValue, pathPart) {\n        if (pathPart === \"$Type\" && currentValue._type === \"EntityType\") {\n            return currentValue;\n        }\n        if (pathPart.length === 0) {\n            // Empty Path after an entitySet means entityType\n            if (currentValue && currentValue._type === \"EntitySet\" && currentValue.entityType) {\n                if (includeVisitedObjects) {\n                    aVisitedObjects.push(currentValue);\n                }\n                currentValue = currentValue.entityType;\n            }\n            if (currentValue && currentValue._type === \"NavigationProperty\" && currentValue.targetType) {\n                if (includeVisitedObjects) {\n                    aVisitedObjects.push(currentValue);\n                }\n                currentValue = currentValue.targetType;\n            }\n            return currentValue;\n        }\n        if (includeVisitedObjects && currentValue !== null && currentValue !== undefined) {\n            aVisitedObjects.push(currentValue);\n        }\n        if (!currentValue) {\n            currentPath = pathPart;\n        }\n        else if (currentValue._type === \"EntitySet\" && pathPart === \"$Type\") {\n            currentValue = currentValue.targetType;\n            return currentValue;\n        }\n        else if (currentValue._type === \"EntitySet\" && currentValue.entityType) {\n            currentPath = combinePath(currentValue.entityTypeName, pathPart);\n        }\n        else if (currentValue._type === \"NavigationProperty\" && currentValue.targetTypeName) {\n            currentPath = combinePath(currentValue.targetTypeName, pathPart);\n        }\n        else if (currentValue._type === \"NavigationProperty\" && currentValue.targetType) {\n            currentPath = combinePath(currentValue.targetType.fullyQualifiedName, pathPart);\n        }\n        else if (currentValue._type === \"Property\") {\n            // ComplexType or Property\n            if (currentValue.targetType) {\n                currentPath = combinePath(currentValue.targetType.fullyQualifiedName, pathPart);\n            }\n            else {\n                currentPath = combinePath(currentValue.fullyQualifiedName, pathPart);\n            }\n        }\n        else if (currentValue._type === \"Action\" && currentValue.isBound) {\n            currentPath = combinePath(currentValue.fullyQualifiedName, pathPart);\n            if (!objectMap[currentPath]) {\n                currentPath = combinePath(currentValue.sourceType, pathPart);\n            }\n        }\n        else if (currentValue._type === \"ActionParameter\" && currentValue.isEntitySet) {\n            currentPath = combinePath(currentValue.type, pathPart);\n        }\n        else if (currentValue._type === \"ActionParameter\" && !currentValue.isEntitySet) {\n            currentPath = combinePath(currentTarget.fullyQualifiedName.substr(0, currentTarget.fullyQualifiedName.lastIndexOf(\"/\")), pathPart);\n            if (!objectMap[currentPath]) {\n                var lastIdx = currentTarget.fullyQualifiedName.lastIndexOf(\"/\");\n                if (lastIdx === -1) {\n                    lastIdx = currentTarget.fullyQualifiedName.length;\n                }\n                currentPath = combinePath(objectMap[currentTarget.fullyQualifiedName.substr(0, lastIdx)].sourceType, pathPart);\n            }\n        }\n        else {\n            currentPath = combinePath(currentValue.fullyQualifiedName, pathPart);\n            if (pathPart !== \"name\" && currentValue[pathPart] !== undefined) {\n                return currentValue[pathPart];\n            }\n            else if (pathPart === \"$AnnotationPath\" && currentValue.$target) {\n                var currentContext_1 = objectMap[currentValue.fullyQualifiedName.split(\"@\")[0]];\n                var subTarget = resolveTarget(objectMap, currentContext_1, currentValue.value, false, true);\n                subTarget.visitedObjects.forEach(function (visitedSubObject) {\n                    if (aVisitedObjects.indexOf(visitedSubObject) === -1) {\n                        aVisitedObjects.push(visitedSubObject);\n                    }\n                });\n                return subTarget.target;\n            }\n            else if (pathPart === \"$Path\" && currentValue.$target) {\n                currentContext = aVisitedObjects\n                    .concat()\n                    .reverse()\n                    .find(function (obj) {\n                    return obj._type === \"EntityType\" ||\n                        obj._type === \"EntitySet\" ||\n                        obj._type === \"NavigationProperty\";\n                });\n                if (currentContext) {\n                    var subTarget = resolveTarget(objectMap, currentContext, currentValue.path, false, true);\n                    subTarget.visitedObjects.forEach(function (visitedSubObject) {\n                        if (aVisitedObjects.indexOf(visitedSubObject) === -1) {\n                            aVisitedObjects.push(visitedSubObject);\n                        }\n                    });\n                    return subTarget.target;\n                }\n                return currentValue.$target;\n            }\n            else if (pathPart.startsWith(\"$Path\") && currentValue.$target) {\n                var intermediateTarget = currentValue.$target;\n                currentPath = combinePath(intermediateTarget.fullyQualifiedName, pathPart.substr(5));\n            }\n            else if (currentValue.hasOwnProperty(\"$Type\") && !objectMap[currentPath]) {\n                // This is now an annotation value\n                var entityType = objectMap[currentValue.fullyQualifiedName.split(\"@\")[0]];\n                if (entityType) {\n                    currentPath = combinePath(entityType.fullyQualifiedName, pathPart);\n                }\n            }\n        }\n        return objectMap[currentPath];\n    }, null);\n    if (!target) {\n        if (annotationsTerm && annotationType) {\n            var oErrorMsg = {\n                message: \"Unable to resolve the path expression: \" +\n                    \"\\n\" +\n                    path +\n                    \"\\n\" +\n                    \"\\n\" +\n                    \"Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \\n\\n\" +\n                    \"<Annotation Term = \" +\n                    annotationsTerm +\n                    \">\" +\n                    \"\\n\" +\n                    \"<Record Type = \" +\n                    annotationType +\n                    \">\" +\n                    \"\\n\" +\n                    \"<AnnotationPath = \" +\n                    path +\n                    \">\"\n            };\n            addAnnotationErrorMessage(path, oErrorMsg);\n        }\n        else {\n            var oErrorMsg = {\n                message: \"Unable to resolve the path expression: \" +\n                    path +\n                    \"\\n\" +\n                    \"\\n\" +\n                    \"Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \\n\\n\" +\n                    \"<Annotation Term = \" +\n                    pathSplit[0] +\n                    \">\" +\n                    \"\\n\" +\n                    \"<PropertyValue  Path= \" +\n                    pathSplit[1] +\n                    \">\"\n            };\n            addAnnotationErrorMessage(path, oErrorMsg);\n        }\n        // console.log(\"Missing target \" + path);\n    }\n    if (pathOnly) {\n        return currentPath;\n    }\n    if (includeVisitedObjects) {\n        return {\n            visitedObjects: aVisitedObjects,\n            target: target\n        };\n    }\n    return target;\n}\nfunction isAnnotationPath(pathStr) {\n    return pathStr.indexOf(\"@\") !== -1;\n}\nfunction parseValue(propertyValue, valueFQN, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType, annotationsTerm) {\n    if (propertyValue === undefined) {\n        return undefined;\n    }\n    switch (propertyValue.type) {\n        case \"String\":\n            return propertyValue.String;\n        case \"Int\":\n            return propertyValue.Int;\n        case \"Bool\":\n            return propertyValue.Bool;\n        case \"Decimal\":\n            return propertyValue.Decimal;\n        case \"Date\":\n            return propertyValue.Date;\n        case \"EnumMember\":\n            return alias(parserOutput.references, propertyValue.EnumMember);\n        case \"PropertyPath\":\n            return {\n                type: \"PropertyPath\",\n                value: propertyValue.PropertyPath,\n                fullyQualifiedName: valueFQN,\n                $target: resolveTarget(objectMap, currentTarget, propertyValue.PropertyPath, false, false, annotationType, annotationsTerm)\n            };\n        case \"NavigationPropertyPath\":\n            return {\n                type: \"NavigationPropertyPath\",\n                value: propertyValue.NavigationPropertyPath,\n                fullyQualifiedName: valueFQN,\n                $target: resolveTarget(objectMap, currentTarget, propertyValue.NavigationPropertyPath, false, false, annotationType, annotationsTerm)\n            };\n        case \"AnnotationPath\":\n            var annotationTarget = resolveTarget(objectMap, currentTarget, unalias(parserOutput.references, propertyValue.AnnotationPath), true, false, annotationType, annotationsTerm);\n            var annotationPath = {\n                type: \"AnnotationPath\",\n                value: propertyValue.AnnotationPath,\n                fullyQualifiedName: valueFQN,\n                $target: annotationTarget,\n                annotationType: annotationType,\n                annotationsTerm: annotationsTerm,\n                term: \"\",\n                path: \"\"\n            };\n            toResolve.push({ inline: false, toResolve: annotationPath });\n            return annotationPath;\n        case \"Path\":\n            var $target = resolveTarget(objectMap, currentTarget, propertyValue.Path, true, false, annotationType, annotationsTerm);\n            var path = new Path(propertyValue, $target, annotationsTerm, annotationType, \"\");\n            toResolve.push({\n                inline: isAnnotationPath(propertyValue.Path),\n                toResolve: path\n            });\n            return path;\n        case \"Record\":\n            return parseRecord(propertyValue.Record, valueFQN, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType, annotationsTerm);\n        case \"Collection\":\n            return parseCollection(propertyValue.Collection, valueFQN, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType, annotationsTerm);\n        case \"Apply\":\n        case \"Not\":\n        case \"Eq\":\n        case \"Ne\":\n        case \"Gt\":\n        case \"Ge\":\n        case \"Lt\":\n        case \"Le\":\n        case \"If\":\n        case \"And\":\n        case \"Or\":\n            return propertyValue;\n    }\n}\nfunction inferTypeFromTerm(annotationsTerm, parserOutput, annotationTarget) {\n    var targetType = TermToTypes[annotationsTerm];\n    var oErrorMsg = {\n        isError: false,\n        message: \"The type of the record used within the term \" + annotationsTerm + \" was not defined and was inferred as \" + targetType + \".\\nHint: If possible, try to maintain the Type property for each Record.\\n<Annotations Target=\\\"\" + annotationTarget + \"\\\">\\n\\t<Annotation Term=\\\"\" + annotationsTerm + \"\\\">\\n\\t\\t<Record>...</Record>\\n\\t</Annotation>\\n</Annotations>\"\n    };\n    addAnnotationErrorMessage(annotationTarget + \"/\" + annotationsTerm, oErrorMsg);\n    return targetType;\n}\nfunction parseRecord(recordDefinition, currentFQN, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType, annotationsTerm) {\n    var targetType;\n    if (!recordDefinition.type && annotationsTerm) {\n        targetType = inferTypeFromTerm(annotationsTerm, parserOutput, currentTarget.fullyQualifiedName);\n    }\n    else {\n        targetType = unalias(parserOutput.references, recordDefinition.type);\n    }\n    var annotationTerm = {\n        $Type: targetType,\n        fullyQualifiedName: currentFQN\n    };\n    var annotationContent = {};\n    if (recordDefinition.annotations && Array.isArray(recordDefinition.annotations)) {\n        var subAnnotationList = {\n            target: currentFQN,\n            annotations: recordDefinition.annotations,\n            __source: annotationSource\n        };\n        unresolvedAnnotations.push(subAnnotationList);\n    }\n    if (recordDefinition.propertyValues) {\n        recordDefinition.propertyValues.forEach(function (propertyValue) {\n            annotationContent[propertyValue.name] = parseValue(propertyValue.value, currentFQN + \"/\" + propertyValue.name, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType, annotationsTerm);\n            if (propertyValue.annotations && Array.isArray(propertyValue.annotations)) {\n                var subAnnotationList = {\n                    target: currentFQN + \"/\" + propertyValue.name,\n                    annotations: propertyValue.annotations,\n                    __source: annotationSource\n                };\n                unresolvedAnnotations.push(subAnnotationList);\n            }\n            if (annotationContent.hasOwnProperty(\"Action\") &&\n                (annotationTerm.$Type === \"com.sap.vocabularies.UI.v1.DataFieldForAction\" ||\n                    annotationTerm.$Type === \"com.sap.vocabularies.UI.v1.DataFieldWithAction\")) {\n                annotationContent.ActionTarget =\n                    (currentTarget.actions && currentTarget.actions[annotationContent.Action]) ||\n                        objectMap[annotationContent.Action];\n                if (!annotationContent.ActionTarget) {\n                    // Add to diagnostics debugger;\n                    ANNOTATION_ERRORS.push({\n                        message: \"Unable to resolve the action \" +\n                            annotationContent.Action +\n                            \" defined for \" +\n                            annotationTerm.fullyQualifiedName\n                    });\n                }\n            }\n        });\n    }\n    return Object.assign(annotationTerm, annotationContent);\n}\nfunction getOrInferCollectionType(collectionDefinition) {\n    var type = collectionDefinition.type;\n    if (type === undefined && collectionDefinition.length > 0) {\n        var firstColItem = collectionDefinition[0];\n        if (firstColItem.hasOwnProperty(\"PropertyPath\")) {\n            type = \"PropertyPath\";\n        }\n        else if (firstColItem.hasOwnProperty(\"Path\")) {\n            type = \"Path\";\n        }\n        else if (firstColItem.hasOwnProperty(\"AnnotationPath\")) {\n            type = \"AnnotationPath\";\n        }\n        else if (firstColItem.hasOwnProperty(\"NavigationPropertyPath\")) {\n            type = \"NavigationPropertyPath\";\n        }\n        else if (typeof firstColItem === \"object\" &&\n            (firstColItem.hasOwnProperty(\"type\") || firstColItem.hasOwnProperty(\"propertyValues\"))) {\n            type = \"Record\";\n        }\n        else if (typeof firstColItem === \"string\") {\n            type = \"String\";\n        }\n    }\n    else if (type === undefined) {\n        type = \"EmptyCollection\";\n    }\n    return type;\n}\nfunction parseCollection(collectionDefinition, parentFQN, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType, annotationsTerm) {\n    var collectionDefinitionType = getOrInferCollectionType(collectionDefinition);\n    switch (collectionDefinitionType) {\n        case \"PropertyPath\":\n            return collectionDefinition.map(function (propertyPath, propertyIdx) {\n                return {\n                    type: \"PropertyPath\",\n                    value: propertyPath.PropertyPath,\n                    fullyQualifiedName: parentFQN + \"/\" + propertyIdx,\n                    $target: resolveTarget(objectMap, currentTarget, propertyPath.PropertyPath, false, false, annotationType, annotationsTerm)\n                };\n            });\n        case \"Path\":\n            return collectionDefinition.map(function (pathValue) {\n                var $target = resolveTarget(objectMap, currentTarget, pathValue.Path, true, false, annotationType, annotationsTerm);\n                var path = new Path(pathValue, $target, annotationsTerm, annotationType, \"\");\n                toResolve.push({\n                    inline: isAnnotationPath(pathValue.Path),\n                    toResolve: path\n                });\n                return path;\n            });\n        case \"AnnotationPath\":\n            return collectionDefinition.map(function (annotationPath, annotationIdx) {\n                var annotationTarget = resolveTarget(objectMap, currentTarget, annotationPath.AnnotationPath, true, false, annotationType, annotationsTerm);\n                var annotationCollectionElement = {\n                    type: \"AnnotationPath\",\n                    value: annotationPath.AnnotationPath,\n                    fullyQualifiedName: parentFQN + \"/\" + annotationIdx,\n                    $target: annotationTarget,\n                    annotationType: annotationType,\n                    annotationsTerm: annotationsTerm,\n                    term: \"\",\n                    path: \"\"\n                };\n                toResolve.push({\n                    inline: false,\n                    toResolve: annotationCollectionElement\n                });\n                return annotationCollectionElement;\n            });\n        case \"NavigationPropertyPath\":\n            return collectionDefinition.map(function (navPropertyPath, navPropIdx) {\n                return {\n                    type: \"NavigationPropertyPath\",\n                    value: navPropertyPath.NavigationPropertyPath,\n                    fullyQualifiedName: parentFQN + \"/\" + navPropIdx,\n                    $target: resolveTarget(objectMap, currentTarget, navPropertyPath.NavigationPropertyPath, false, false, annotationType, annotationsTerm)\n                };\n            });\n        case \"Record\":\n            return collectionDefinition.map(function (recordDefinition, recordIdx) {\n                return parseRecord(recordDefinition, parentFQN + \"/\" + recordIdx, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType, annotationsTerm);\n            });\n        case \"Apply\":\n        case \"If\":\n        case \"Eq\":\n        case \"Ne\":\n        case \"Lt\":\n        case \"Gt\":\n        case \"Le\":\n        case \"Ge\":\n        case \"Not\":\n        case \"And\":\n        case \"Or\":\n            return collectionDefinition.map(function (ifValue) {\n                return ifValue;\n            });\n        case \"String\":\n            return collectionDefinition.map(function (stringValue) {\n                if (typeof stringValue === \"string\") {\n                    return stringValue;\n                }\n                else if (stringValue === undefined) {\n                    return stringValue;\n                }\n                else {\n                    return stringValue.String;\n                }\n            });\n        default:\n            if (collectionDefinition.length === 0) {\n                return [];\n            }\n            throw new Error(\"Unsupported case\");\n    }\n}\nfunction convertAnnotation(annotation, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations) {\n    if (annotation.record) {\n        var annotationType_1 = annotation.record.type\n            ? unalias(parserOutput.references, annotation.record.type)\n            : inferTypeFromTerm(annotation.term, parserOutput, currentTarget.fullyQualifiedName);\n        var annotationTerm_1 = {\n            $Type: annotationType_1,\n            fullyQualifiedName: annotation.fullyQualifiedName,\n            qualifier: annotation.qualifier\n        };\n        var annotationContent_1 = {};\n        annotation.record.propertyValues.forEach(function (propertyValue) {\n            annotationContent_1[propertyValue.name] = parseValue(propertyValue.value, annotation.fullyQualifiedName + \"/\" + propertyValue.name, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, annotationType_1, annotation.term);\n            if (annotationContent_1.hasOwnProperty(\"Action\") &&\n                (!annotation.record ||\n                    annotationTerm_1.$Type === \"com.sap.vocabularies.UI.v1.DataFieldForAction\" ||\n                    annotationTerm_1.$Type === \"com.sap.vocabularies.UI.v1.DataFieldWithAction\")) {\n                annotationContent_1.ActionTarget =\n                    (currentTarget.actions && currentTarget.actions[annotationContent_1.Action]) ||\n                        objectMap[annotationContent_1.Action];\n                if (!annotationContent_1.ActionTarget) {\n                    ANNOTATION_ERRORS.push({\n                        message: \"Unable to resolve the action \" +\n                            annotationContent_1.Action +\n                            \" defined for \" +\n                            annotation.fullyQualifiedName\n                    });\n                    // Add to diagnostics\n                    // debugger;\n                }\n            }\n        });\n        return Object.assign(annotationTerm_1, annotationContent_1);\n    }\n    else if (annotation.collection === undefined) {\n        if (annotation.value) {\n            return parseValue(annotation.value, annotation.fullyQualifiedName, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, \"\", annotation.term);\n        }\n        else {\n            return true;\n        }\n    }\n    else if (annotation.collection) {\n        var collection = parseCollection(annotation.collection, annotation.fullyQualifiedName, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations, \"\", annotation.term);\n        collection.fullyQualifiedName = annotation.fullyQualifiedName;\n        return collection;\n    }\n    else {\n        throw new Error(\"Unsupported case\");\n    }\n}\nfunction createResolvePathFn(entityType, objectMap) {\n    return function (relativePath, includeVisitedObjects) {\n        var annotationTerm = \"\";\n        var annotationType = \"\";\n        return resolveTarget(objectMap, entityType, relativePath, false, includeVisitedObjects, annotationType, annotationTerm);\n    };\n}\nfunction resolveNavigationProperties(entityTypes, associations, objectMap) {\n    entityTypes.forEach(function (entityType) {\n        entityType.navigationProperties = entityType.navigationProperties.map(function (navProp) {\n            var outNavProp = {\n                _type: \"NavigationProperty\",\n                name: navProp.name,\n                fullyQualifiedName: navProp.fullyQualifiedName,\n                partner: navProp.hasOwnProperty(\"partner\") ? navProp.partner : undefined,\n                // targetTypeName: FullyQualifiedName;\n                // targetType: EntityType;\n                isCollection: navProp.hasOwnProperty(\"isCollection\") ? navProp.isCollection : false,\n                containsTarget: navProp.hasOwnProperty(\"containsTarget\")\n                    ? navProp.containsTarget\n                    : false,\n                referentialConstraint: navProp.referentialConstraint\n                    ? navProp.referentialConstraint\n                    : [],\n                annotations: {}\n            };\n            if (navProp.targetTypeName) {\n                outNavProp.targetType = objectMap[navProp.targetTypeName];\n            }\n            else if (navProp.relationship) {\n                var targetAssociation = associations.find(function (association) { return association.fullyQualifiedName === navProp.relationship; });\n                if (targetAssociation) {\n                    var associationEnd = targetAssociation.associationEnd.find(function (end) { return end.role === navProp.toRole; });\n                    if (associationEnd) {\n                        outNavProp.targetType = objectMap[associationEnd.type];\n                        outNavProp.isCollection = associationEnd.multiplicity === \"*\";\n                    }\n                }\n            }\n            if (outNavProp.targetType) {\n                outNavProp.targetTypeName = outNavProp.targetType.fullyQualifiedName;\n            }\n            var outNavPropReq = outNavProp;\n            objectMap[outNavPropReq.fullyQualifiedName] = outNavPropReq;\n            return outNavPropReq;\n        });\n        entityType.resolvePath = createResolvePathFn(entityType, objectMap);\n    });\n}\nfunction linkActionsToEntityType(namespace, actions, objectMap) {\n    actions.forEach(function (action) {\n        if (!action.annotations) {\n            action.annotations = {};\n        }\n        if (action.isBound) {\n            var sourceEntityType = objectMap[action.sourceType];\n            action.sourceEntityType = sourceEntityType;\n            if (sourceEntityType) {\n                if (!sourceEntityType.actions) {\n                    sourceEntityType.actions = {};\n                }\n                sourceEntityType.actions[action.name] = action;\n                sourceEntityType.actions[namespace + \".\" + action.name] = action;\n            }\n            action.returnEntityType = objectMap[action.returnType];\n        }\n    });\n}\nfunction linkEntityTypeToEntitySet(entitySets, objectMap, references) {\n    entitySets.forEach(function (entitySet) {\n        entitySet.entityType = objectMap[entitySet.entityTypeName];\n        if (!entitySet.entityType) {\n            entitySet.entityType = objectMap[unalias(references, entitySet.entityTypeName)];\n        }\n        if (!entitySet.annotations) {\n            entitySet.annotations = {};\n        }\n        if (!entitySet.entityType.annotations) {\n            entitySet.entityType.annotations = {};\n        }\n        entitySet.entityType.keys.forEach(function (keyProp) {\n            keyProp.isKey = true;\n        });\n    });\n}\nfunction linkEntityTypeToSingleton(singletons, objectMap, references) {\n    if (singletons === void 0) { singletons = []; }\n    singletons.forEach(function (singleton) {\n        singleton.type = objectMap[singleton.typeName];\n        if (!singleton.type) {\n            singleton.type = objectMap[unalias(references, singleton.typeName)];\n        }\n        if (!singleton.annotations) {\n            singleton.annotations = {};\n        }\n        if (!singleton.type.annotations) {\n            singleton.type.annotations = {};\n        }\n        singleton.type.keys.forEach(function (keyProp) {\n            keyProp.isKey = true;\n        });\n    });\n}\nfunction linkPropertiesToComplexTypes(entityTypes, objectMap) {\n    function link(property) {\n        if (!property.annotations) {\n            property.annotations = {};\n        }\n        if (property.type.indexOf(\"Edm\") === -1) {\n            var complexType = void 0;\n            if (property.type.startsWith(\"Collection\")) {\n                var complexTypeName = property.type.substr(11, property.type.length - 12);\n                complexType = objectMap[complexTypeName];\n            }\n            else {\n                complexType = objectMap[property.type];\n            }\n            if (complexType) {\n                property.targetType = complexType;\n                if (complexType.properties) {\n                    complexType.properties.forEach(link);\n                }\n            }\n        }\n    }\n    entityTypes.forEach(function (entityType) {\n        entityType.entityProperties.forEach(link);\n    });\n}\nfunction prepareComplexTypes(complexTypes, associations, objectMap) {\n    complexTypes.forEach(function (complexType) {\n        complexType.annotations = {};\n        complexType.properties.forEach(function (property) {\n            if (!property.annotations) {\n                property.annotations = {};\n            }\n        });\n        complexType.navigationProperties = complexType.navigationProperties.map(function (navProp) {\n            if (!navProp.annotations) {\n                navProp.annotations = {};\n            }\n            var outNavProp = {\n                _type: \"NavigationProperty\",\n                name: navProp.name,\n                fullyQualifiedName: navProp.fullyQualifiedName,\n                partner: navProp.hasOwnProperty(\"partner\") ? navProp.partner : undefined,\n                // targetTypeName: FullyQualifiedName;\n                // targetType: EntityType;\n                isCollection: navProp.hasOwnProperty(\"isCollection\") ? navProp.isCollection : false,\n                containsTarget: navProp.hasOwnProperty(\"containsTarget\")\n                    ? navProp.containsTarget\n                    : false,\n                referentialConstraint: navProp.referentialConstraint\n                    ? navProp.referentialConstraint\n                    : []\n            };\n            if (navProp.targetTypeName) {\n                outNavProp.targetType = objectMap[navProp.targetTypeName];\n            }\n            else if (navProp.relationship) {\n                var targetAssociation = associations.find(function (association) { return association.fullyQualifiedName === navProp.relationship; });\n                if (targetAssociation) {\n                    var associationEnd = targetAssociation.associationEnd.find(function (end) { return end.role === navProp.toRole; });\n                    if (associationEnd) {\n                        outNavProp.targetType = objectMap[associationEnd.type];\n                        outNavProp.isCollection = associationEnd.multiplicity === \"*\";\n                    }\n                }\n            }\n            if (outNavProp.targetType) {\n                outNavProp.targetTypeName = outNavProp.targetType.fullyQualifiedName;\n            }\n            var outNavPropReq = outNavProp;\n            objectMap[outNavPropReq.fullyQualifiedName] = outNavPropReq;\n            return outNavPropReq;\n        });\n    });\n}\nfunction splitTerm(references, termValue) {\n    var aliasedTerm = alias(references, termValue);\n    var lastDot = aliasedTerm.lastIndexOf(\".\");\n    var termAlias = aliasedTerm.substr(0, lastDot);\n    var term = aliasedTerm.substr(lastDot + 1);\n    return [termAlias, term];\n}\n/**\n * Resolve a specific path\n * @param sPath\n */\nfunction createGlobalResolve(convertedOutput, objectMap) {\n    return function resolvePath(sPath) {\n        var aPathSplit = sPath.split(\"/\");\n        if (aPathSplit.shift() !== \"\") {\n            throw new Error(\"Cannot deal with relative path\");\n        }\n        var entitySetName = aPathSplit.shift();\n        var entitySet = convertedOutput.entitySets.find(function (et) { return et.name === entitySetName; });\n        if (!entitySet) {\n            return {\n                target: convertedOutput.entityContainer,\n                objectPath: [convertedOutput.entityContainer]\n            };\n        }\n        if (aPathSplit.length === 0) {\n            return {\n                target: entitySet,\n                objectPath: [convertedOutput.entityContainer, entitySet]\n            };\n        }\n        else {\n            var targetResolution = resolveTarget(objectMap, entitySet, \"/\" + aPathSplit.join(\"/\"), false, true);\n            if (targetResolution.target) {\n                targetResolution.visitedObjects.push(targetResolution.target);\n            }\n            return {\n                target: targetResolution.target,\n                objectPath: targetResolution.visitedObjects\n            };\n        }\n    };\n}\nvar ANNOTATION_ERRORS = [];\nvar ALL_ANNOTATION_ERRORS = {};\nfunction convertTypes(parserOutput) {\n    ANNOTATION_ERRORS = [];\n    var objectMap = buildObjectMap(parserOutput);\n    resolveNavigationProperties(parserOutput.schema.entityTypes, parserOutput.schema.associations, objectMap);\n    if (!parserOutput.schema.entityContainer.annotations) {\n        parserOutput.schema.entityContainer.annotations = {};\n    }\n    linkActionsToEntityType(parserOutput.schema.namespace, parserOutput.schema.actions, objectMap);\n    linkEntityTypeToEntitySet(parserOutput.schema.entitySets, objectMap, parserOutput.references);\n    linkEntityTypeToSingleton(parserOutput.schema.singletons, objectMap, parserOutput.references);\n    linkPropertiesToComplexTypes(parserOutput.schema.entityTypes, objectMap);\n    prepareComplexTypes(parserOutput.schema.complexTypes, parserOutput.schema.associations, objectMap);\n    var toResolve = [];\n    var unresolvedAnnotations = [];\n    Object.keys(parserOutput.schema.annotations).forEach(function (annotationSource) {\n        parserOutput.schema.annotations[annotationSource].forEach(function (annotationList) {\n            var currentTargetName = unalias(parserOutput.references, annotationList.target);\n            var objectMapElement = objectMap[currentTargetName];\n            if (!objectMapElement) {\n                if (currentTargetName && currentTargetName.indexOf(\"@\") !== -1) {\n                    annotationList.__source = annotationSource;\n                    unresolvedAnnotations.push(annotationList);\n                }\n            }\n            else if (typeof objectMapElement === \"object\") {\n                var allTargets = [objectMapElement];\n                var bOverrideExisting_1 = true;\n                if (objectMapElement._type === \"UnboundGenericAction\") {\n                    allTargets = objectMapElement.actions;\n                    bOverrideExisting_1 = false;\n                }\n                allTargets.forEach(function (currentTarget) {\n                    if (currentTargetName !== currentTarget.fullyQualifiedName) {\n                        currentTargetName = currentTarget.fullyQualifiedName;\n                    }\n                    if (!currentTarget.annotations) {\n                        currentTarget.annotations = {};\n                    }\n                    annotationList.annotations.forEach(function (annotation) {\n                        var _a, _b;\n                        var _c = splitTerm(exports.defaultReferences, annotation.term), vocAlias = _c[0], vocTerm = _c[1];\n                        if (!currentTarget.annotations[vocAlias]) {\n                            currentTarget.annotations[vocAlias] = {};\n                        }\n                        if (!currentTarget.annotations._annotations) {\n                            currentTarget.annotations._annotations = {};\n                        }\n                        var vocTermWithQualifier = \"\" + vocTerm + (annotation.qualifier ? \"#\" + annotation.qualifier : \"\");\n                        if (!bOverrideExisting_1 &&\n                            ((_b = (_a = currentTarget.annotations) === null || _a === void 0 ? void 0 : _a[vocAlias]) === null || _b === void 0 ? void 0 : _b[vocTermWithQualifier]) !== undefined) {\n                            return;\n                        }\n                        currentTarget.annotations[vocAlias][vocTermWithQualifier] = convertAnnotation(annotation, parserOutput, currentTarget, objectMap, toResolve, annotationSource, unresolvedAnnotations);\n                        switch (typeof currentTarget.annotations[vocAlias][vocTermWithQualifier]) {\n                            case \"string\":\n                                currentTarget.annotations[vocAlias][vocTermWithQualifier] = new String(currentTarget.annotations[vocAlias][vocTermWithQualifier]);\n                                break;\n                            case \"boolean\":\n                                currentTarget.annotations[vocAlias][vocTermWithQualifier] = new Boolean(currentTarget.annotations[vocAlias][vocTermWithQualifier]);\n                                break;\n                        }\n                        if (currentTarget.annotations[vocAlias][vocTermWithQualifier] !== null &&\n                            typeof currentTarget.annotations[vocAlias][vocTermWithQualifier] === \"object\") {\n                            currentTarget.annotations[vocAlias][vocTermWithQualifier].term = unalias(exports.defaultReferences, vocAlias + \".\" + vocTerm);\n                            currentTarget.annotations[vocAlias][vocTermWithQualifier].qualifier = annotation.qualifier;\n                            currentTarget.annotations[vocAlias][vocTermWithQualifier].__source = annotationSource;\n                        }\n                        var annotationTarget = currentTargetName + \"@\" + unalias(exports.defaultReferences, vocAlias + \".\" + vocTermWithQualifier);\n                        if (annotation.annotations && Array.isArray(annotation.annotations)) {\n                            var subAnnotationList = {\n                                target: annotationTarget,\n                                annotations: annotation.annotations,\n                                __source: annotationSource\n                            };\n                            unresolvedAnnotations.push(subAnnotationList);\n                        }\n                        else if (annotation.annotations &&\n                            !currentTarget.annotations[vocAlias][vocTermWithQualifier].annotations) {\n                            currentTarget.annotations[vocAlias][vocTermWithQualifier].annotations =\n                                annotation.annotations;\n                        }\n                        currentTarget.annotations._annotations[vocAlias + \".\" + vocTermWithQualifier] =\n                            currentTarget.annotations[vocAlias][vocTermWithQualifier];\n                        objectMap[annotationTarget] = currentTarget.annotations[vocAlias][vocTermWithQualifier];\n                    });\n                });\n            }\n        });\n    });\n    var extraUnresolvedAnnotations = [];\n    unresolvedAnnotations.forEach(function (annotationList) {\n        var currentTargetName = unalias(parserOutput.references, annotationList.target);\n        var _a = currentTargetName.split(\"@\"), baseObj = _a[0], annotationPart = _a[1];\n        var targetSplit = annotationPart.split(\"/\");\n        baseObj = baseObj + \"@\" + targetSplit[0];\n        var currentTarget = targetSplit.slice(1).reduce(function (currentObj, path) {\n            if (!currentObj) {\n                return null;\n            }\n            return currentObj[path];\n        }, objectMap[baseObj]);\n        if (!currentTarget) {\n            ANNOTATION_ERRORS.push({\n                message: \"The following annotation target was not found on the service \" + currentTargetName\n            });\n            // console.log(\"Missing target again \" + currentTargetName);\n        }\n        else if (typeof currentTarget === \"object\") {\n            if (!currentTarget.annotations) {\n                currentTarget.annotations = {};\n            }\n            annotationList.annotations.forEach(function (annotation) {\n                var _a = splitTerm(exports.defaultReferences, annotation.term), vocAlias = _a[0], vocTerm = _a[1];\n                if (!currentTarget.annotations[vocAlias]) {\n                    currentTarget.annotations[vocAlias] = {};\n                }\n                if (!currentTarget.annotations._annotations) {\n                    currentTarget.annotations._annotations = {};\n                }\n                var vocTermWithQualifier = \"\" + vocTerm + (annotation.qualifier ? \"#\" + annotation.qualifier : \"\");\n                currentTarget.annotations[vocAlias][vocTermWithQualifier] = convertAnnotation(annotation, parserOutput, currentTarget, objectMap, toResolve, annotationList.__source, extraUnresolvedAnnotations);\n                if (currentTarget.annotations[vocAlias][vocTermWithQualifier] !== null &&\n                    typeof currentTarget.annotations[vocAlias][vocTermWithQualifier] === \"object\") {\n                    currentTarget.annotations[vocAlias][vocTermWithQualifier].term = unalias(exports.defaultReferences, vocAlias + \".\" + vocTerm);\n                    currentTarget.annotations[vocAlias][vocTermWithQualifier].qualifier = annotation.qualifier;\n                    currentTarget.annotations[vocAlias][vocTermWithQualifier].__source = annotationList.__source;\n                }\n                currentTarget.annotations._annotations[vocAlias + \".\" + vocTermWithQualifier] =\n                    currentTarget.annotations[vocAlias][vocTermWithQualifier];\n                objectMap[currentTargetName + \"@\" + unalias(exports.defaultReferences, vocAlias + \".\" + vocTermWithQualifier)] =\n                    currentTarget.annotations[vocAlias][vocTermWithQualifier];\n            });\n        }\n    });\n    toResolve.forEach(function (resolveable) {\n        var toResolve = resolveable.toResolve;\n        var targetStr = toResolve.$target;\n        var resolvedTarget = objectMap[targetStr];\n        var annotationsTerm = toResolve.annotationsTerm, annotationType = toResolve.annotationType;\n        delete toResolve.annotationType;\n        delete toResolve.annotationsTerm;\n        if (resolveable.inline && !(resolvedTarget instanceof String)) {\n            // inline the resolved target\n            var keys = void 0;\n            for (keys in toResolve)\n                delete toResolve[keys];\n            Object.assign(toResolve, resolvedTarget);\n        }\n        else {\n            // assign the resolved target\n            toResolve.$target = resolvedTarget;\n        }\n        if (!resolvedTarget) {\n            toResolve.targetString = targetStr;\n            if (annotationsTerm && annotationType) {\n                var oErrorMsg = {\n                    message: \"Unable to resolve the path expression: \" +\n                        targetStr +\n                        \"\\n\" +\n                        \"\\n\" +\n                        \"Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \\n\\n\" +\n                        \"<Annotation Term = \" +\n                        annotationsTerm +\n                        \">\" +\n                        \"\\n\" +\n                        \"<Record Type = \" +\n                        annotationType +\n                        \">\" +\n                        \"\\n\" +\n                        \"<AnnotationPath = \" +\n                        targetStr +\n                        \">\"\n                };\n                addAnnotationErrorMessage(targetStr, oErrorMsg);\n            }\n            else {\n                var property_1 = toResolve.term;\n                var path = toResolve.path;\n                var termInfo = targetStr ? targetStr.split(\"/\")[0] : targetStr;\n                var oErrorMsg = {\n                    message: \"Unable to resolve the path expression: \" +\n                        targetStr +\n                        \"\\n\" +\n                        \"\\n\" +\n                        \"Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \\n\\n\" +\n                        \"<Annotation Term = \" +\n                        termInfo +\n                        \">\" +\n                        \"\\n\" +\n                        \"<PropertyValue Property = \" +\n                        property_1 +\n                        \"        Path= \" +\n                        path +\n                        \">\"\n                };\n                addAnnotationErrorMessage(targetStr, oErrorMsg);\n            }\n        }\n    });\n    for (var property in ALL_ANNOTATION_ERRORS) {\n        ANNOTATION_ERRORS.push(ALL_ANNOTATION_ERRORS[property][0]);\n    }\n    parserOutput.entitySets = parserOutput.schema.entitySets;\n    var convertedOutput = {\n        version: parserOutput.version,\n        annotations: parserOutput.schema.annotations,\n        namespace: parserOutput.schema.namespace,\n        entityContainer: parserOutput.schema.entityContainer,\n        actions: parserOutput.schema.actions,\n        entitySets: parserOutput.schema.entitySets,\n        singletons: parserOutput.schema.singletons,\n        entityTypes: parserOutput.schema.entityTypes,\n        complexTypes: parserOutput.schema.complexTypes,\n        references: exports.defaultReferences,\n        diagnostics: ANNOTATION_ERRORS.concat()\n    };\n    convertedOutput.resolvePath = createGlobalResolve(convertedOutput, objectMap);\n    return convertedOutput;\n}\nexports.convertTypes = convertTypes;\nfunction revertValueToGenericType(references, value) {\n    var result;\n    if (typeof value === \"string\") {\n        var valueMatches_1 = value.match(/(\\w+)\\.\\w+\\/.*/);\n        if (valueMatches_1 && references.find(function (ref) { return ref.alias === valueMatches_1[1]; })) {\n            result = {\n                type: \"EnumMember\",\n                EnumMember: value\n            };\n        }\n        else {\n            result = {\n                type: \"String\",\n                String: value\n            };\n        }\n    }\n    else if (Array.isArray(value)) {\n        result = {\n            type: \"Collection\",\n            Collection: value.map(function (anno) { return revertCollectionItemToGenericType(references, anno); })\n        };\n    }\n    else if (typeof value === \"boolean\") {\n        result = {\n            type: \"Bool\",\n            Bool: value\n        };\n    }\n    else if (typeof value === \"number\") {\n        if (value.toString() === value.toFixed()) {\n            result = {\n                type: \"Int\",\n                Int: value\n            };\n        }\n        else {\n            result = {\n                type: \"Decimal\",\n                Decimal: value\n            };\n        }\n    }\n    else if (typeof value === \"object\" && value.isDecimal && value.isDecimal()) {\n        result = {\n            type: \"Decimal\",\n            Decimal: value.valueOf()\n        };\n    }\n    else if (value.type === \"Path\") {\n        result = {\n            type: \"Path\",\n            Path: value.path\n        };\n    }\n    else if (value.type === \"AnnotationPath\") {\n        result = {\n            type: \"AnnotationPath\",\n            AnnotationPath: value.value\n        };\n    }\n    else if (value.type === \"PropertyPath\") {\n        result = {\n            type: \"PropertyPath\",\n            PropertyPath: value.value\n        };\n    }\n    else if (value.type === \"NavigationPropertyPath\") {\n        result = {\n            type: \"NavigationPropertyPath\",\n            NavigationPropertyPath: value.value\n        };\n    }\n    else if (Object.prototype.hasOwnProperty.call(value, \"$Type\")) {\n        result = {\n            type: \"Record\",\n            Record: revertCollectionItemToGenericType(references, value)\n        };\n    }\n    return result;\n}\nfunction revertCollectionItemToGenericType(references, collectionItem) {\n    if (typeof collectionItem === \"string\") {\n        return collectionItem;\n    }\n    else if (typeof collectionItem === \"object\") {\n        if (collectionItem.hasOwnProperty(\"$Type\")) {\n            // Annotation Record\n            var outItem_1 = {\n                type: collectionItem.$Type,\n                propertyValues: []\n            };\n            // Could validate keys and type based on $Type\n            Object.keys(collectionItem).forEach(function (collectionKey) {\n                if (collectionKey !== \"$Type\" &&\n                    collectionKey !== \"term\" &&\n                    collectionKey !== \"__source\" &&\n                    collectionKey !== \"qualifier\" &&\n                    collectionKey !== \"ActionTarget\" &&\n                    collectionKey !== \"fullyQualifiedName\" &&\n                    collectionKey !== \"annotations\") {\n                    var value = collectionItem[collectionKey];\n                    outItem_1.propertyValues.push({\n                        name: collectionKey,\n                        value: revertValueToGenericType(references, value)\n                    });\n                }\n                else if (collectionKey === \"annotations\") {\n                    var annotations_1 = collectionItem[collectionKey];\n                    outItem_1.annotations = [];\n                    Object.keys(annotations_1)\n                        .filter(function (key) { return key !== \"_annotations\"; })\n                        .forEach(function (key) {\n                        Object.keys(annotations_1[key]).forEach(function (term) {\n                            var _a;\n                            var parsedAnnotation = revertTermToGenericType(references, annotations_1[key][term]);\n                            if (!parsedAnnotation.term) {\n                                var unaliasedTerm = unalias(references, key + \".\" + term);\n                                if (unaliasedTerm) {\n                                    var qualifiedSplit = unaliasedTerm.split(\"#\");\n                                    parsedAnnotation.term = qualifiedSplit[0];\n                                    if (qualifiedSplit.length > 1) {\n                                        parsedAnnotation.qualifier = qualifiedSplit[1];\n                                    }\n                                }\n                            }\n                            (_a = outItem_1.annotations) === null || _a === void 0 ? void 0 : _a.push(parsedAnnotation);\n                        });\n                    });\n                }\n            });\n            return outItem_1;\n        }\n        else if (collectionItem.type === \"PropertyPath\") {\n            return {\n                type: \"PropertyPath\",\n                PropertyPath: collectionItem.value\n            };\n        }\n        else if (collectionItem.type === \"AnnotationPath\") {\n            return {\n                type: \"AnnotationPath\",\n                AnnotationPath: collectionItem.value\n            };\n        }\n        else if (collectionItem.type === \"NavigationPropertyPath\") {\n            return {\n                type: \"NavigationPropertyPath\",\n                NavigationPropertyPath: collectionItem.value\n            };\n        }\n    }\n}\nfunction revertTermToGenericType(references, annotation) {\n    var baseAnnotation = {\n        term: annotation.term,\n        qualifier: annotation.qualifier\n    };\n    if (Array.isArray(annotation)) {\n        // Collection\n        if (annotation.hasOwnProperty(\"annotations\")) {\n            baseAnnotation.annotations = [];\n            var currentAnnotations_1 = annotation.annotations;\n            Object.keys(currentAnnotations_1)\n                .filter(function (key) { return key !== \"_annotations\"; })\n                .forEach(function (key) {\n                Object.keys(currentAnnotations_1[key]).forEach(function (term) {\n                    var _a;\n                    var parsedAnnotation = revertTermToGenericType(references, currentAnnotations_1[key][term]);\n                    if (!parsedAnnotation.term) {\n                        var unaliasedTerm = unalias(references, key + \".\" + term);\n                        if (unaliasedTerm) {\n                            var qualifiedSplit = unaliasedTerm.split(\"#\");\n                            parsedAnnotation.term = qualifiedSplit[0];\n                            if (qualifiedSplit.length > 1) {\n                                parsedAnnotation.qualifier = qualifiedSplit[1];\n                            }\n                        }\n                    }\n                    (_a = baseAnnotation.annotations) === null || _a === void 0 ? void 0 : _a.push(parsedAnnotation);\n                });\n            });\n        }\n        return __assign(__assign({}, baseAnnotation), { collection: annotation.map(function (anno) { return revertCollectionItemToGenericType(references, anno); }) });\n    }\n    else if (annotation.hasOwnProperty(\"$Type\")) {\n        return __assign(__assign({}, baseAnnotation), { record: revertCollectionItemToGenericType(references, annotation) });\n    }\n    else {\n        return __assign(__assign({}, baseAnnotation), { value: revertValueToGenericType(references, annotation) });\n    }\n}\nexports.revertTermToGenericType = revertTermToGenericType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar parser_1 = require(\"./parser\");\nObject.defineProperty(exports, \"parseEDMX\", { enumerable: true, get: function () { return parser_1.parseEDMX; } });\nvar merger_1 = require(\"./merger\");\nObject.defineProperty(exports, \"merge\", { enumerable: true, get: function () { return merger_1.merge; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = void 0;\nconst utils_1 = require(\"./utils\");\nfunction merge(parserOutputs) {\n    const outParserOutput = new utils_1.MergedParserOutput(parserOutputs[0]);\n    parserOutputs.forEach((parserOutput) => {\n        outParserOutput.addParserOutput(parserOutput);\n    });\n    return outParserOutput;\n}\nexports.merge = merge;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseEDMX = void 0;\nconst xml_js_1 = require(\"xml-js\");\nconst utils_1 = require(\"./utils\");\nconst Parser_1 = require(\"@sap-ux/vocabularies-types/dist/Parser\");\nconst v2annotations_1 = require(\"./v2annotations\");\nconst collectionRegexp = /Collection\\(([^)]+)\\)/;\n// Type guards\nfunction isV4NavProperty(navPropertyAttributes) {\n    return (navPropertyAttributes.Type !== null &&\n        navPropertyAttributes.Type !== undefined);\n}\n// Parser Methods\n/**\n * Retrieves the name of the keys for that entity type\n * @param propertyRefs {EDMX.PropertyRef} property reference\n */\nfunction getEntityTypeKeys(propertyRefs) {\n    return propertyRefs.map(propertyRef => propertyRef._attributes.Name);\n}\n/**\n * Parse the EDMX.Property to retrieve the property\n * @param entityProperties\n * @param entityKeys\n * @param entityTypeFQN\n */\nfunction parseProperties(entityProperties, entityKeys, entityTypeFQN, annotationLists) {\n    return entityProperties.reduce((outObject, entityProperty) => {\n        const edmProperty = {\n            _type: \"Property\",\n            name: entityProperty._attributes.Name,\n            fullyQualifiedName: `${entityTypeFQN}/${entityProperty._attributes.Name}`,\n            type: entityProperty._attributes.Type\n        };\n        if (entityProperty._attributes.MaxLength) {\n            edmProperty.maxLength = parseInt(entityProperty._attributes.MaxLength);\n        }\n        if (entityProperty._attributes.Precision) {\n            edmProperty.precision = parseInt(entityProperty._attributes.Precision);\n        }\n        if (entityProperty._attributes.Scale) {\n            edmProperty.scale = parseInt(entityProperty._attributes.Scale);\n        }\n        if (entityProperty._attributes.Nullable) {\n            edmProperty.nullable = entityProperty._attributes.Nullable !== \"false\";\n        }\n        if (entityProperty._attributes.DefaultValue) {\n            switch (edmProperty.type) {\n                case \"Edm.Int16\":\n                case \"Edm.Byte\":\n                case \"Edm.Int32\":\n                case \"Edm.Int64\":\n                    edmProperty.defaultValue = parseInt(entityProperty._attributes.DefaultValue);\n                    break;\n                case \"Edm.Decimal\":\n                    edmProperty.defaultValue = parseFloat(entityProperty._attributes.DefaultValue);\n                    break;\n                case \"Edm.Boolean\":\n                    edmProperty.defaultValue = entityProperty._attributes.DefaultValue === \"true\";\n                    break;\n                default:\n                    edmProperty.defaultValue = entityProperty._attributes.DefaultValue;\n                    break;\n            }\n        }\n        outObject.entityProperties.push(edmProperty);\n        if (entityKeys.indexOf(edmProperty.name) !== -1) {\n            outObject.entityKeys.push(edmProperty);\n        }\n        const v2Annotations = v2annotations_1.convertV2Annotations(entityProperty._attributes, \"Property\", entityProperty._attributes.Name);\n        if (v2Annotations.length > 0) {\n            annotationLists.push(createAnnotationList(edmProperty.fullyQualifiedName, v2Annotations));\n        }\n        return outObject;\n    }, { entityProperties: [], entityKeys: [] });\n}\nfunction parseReferentialConstraint(referentialConstraints, sourceTypeName, targetTypeName) {\n    return referentialConstraints.reduce((outArray, refCon) => {\n        outArray.push({\n            sourceTypeName: sourceTypeName,\n            sourceProperty: refCon._attributes.Property,\n            targetTypeName: targetTypeName,\n            targetProperty: refCon._attributes.ReferencedProperty\n        });\n        return outArray;\n    }, []);\n}\nfunction parseV2ReferentialConstraint(referentialConstraints, associationEnds) {\n    return referentialConstraints.reduce((outArray, refCon) => {\n        let sourceEnd = associationEnds.find(assEnd => assEnd.role === refCon.Principal._attributes.Role);\n        let targetEnd = associationEnds.find(assEnd => assEnd.role === refCon.Dependent._attributes.Role);\n        if (sourceEnd && targetEnd) {\n            let sourceProperties = utils_1.ensureArray(refCon.Principal.PropertyRef);\n            let targetProperties = utils_1.ensureArray(refCon.Dependent.PropertyRef);\n            if (sourceEnd.multiplicity !== \"1\") {\n                targetEnd = sourceEnd;\n                sourceEnd = associationEnds.find(assEnd => assEnd.role === refCon.Dependent._attributes.Role);\n                targetProperties = sourceProperties;\n                sourceProperties = utils_1.ensureArray(refCon.Dependent.PropertyRef);\n            }\n            sourceProperties.forEach((sourceProperty, propertyIndex) => {\n                outArray.push({\n                    // @ts-ignore\n                    sourceTypeName: sourceEnd.type,\n                    sourceProperty: sourceProperty._attributes.Name,\n                    // @ts-ignore\n                    targetTypeName: targetEnd.type,\n                    targetProperty: targetProperties[propertyIndex]._attributes.Name\n                });\n            });\n        }\n        return outArray;\n    }, []);\n}\nfunction parseNavigationProperties(navigationProperties, currentEntityType, entityTypeFQN, annotationLists) {\n    return navigationProperties.reduce((outArray, navigationProperty) => {\n        // V4\n        const attributes = navigationProperty._attributes;\n        if (isV4NavProperty(attributes)) {\n            const matches = attributes.Type.match(collectionRegexp);\n            const isCollection = matches !== null;\n            const typeName = matches ? matches[1] : attributes.Type;\n            outArray.push({\n                _type: \"NavigationProperty\",\n                name: attributes.Name,\n                fullyQualifiedName: `${entityTypeFQN}/${attributes.Name}`,\n                partner: attributes.Partner,\n                containsTarget: attributes.ContainsTarget === \"true\",\n                isCollection,\n                targetTypeName: typeName,\n                referentialConstraint: parseReferentialConstraint(utils_1.ensureArray(navigationProperty.ReferentialConstraint), currentEntityType._attributes.Name, typeName)\n            });\n        }\n        else {\n            // V2\n            const { Relationship, ToRole, FromRole } = attributes;\n            outArray.push({\n                _type: \"NavigationProperty\",\n                name: attributes.Name,\n                fullyQualifiedName: `${entityTypeFQN}/${attributes.Name}`,\n                relationship: Relationship,\n                toRole: ToRole,\n                fromRole: FromRole\n            });\n            const v2Annotations = v2annotations_1.convertV2Annotations(attributes, \"Property\", attributes.Name);\n            if (v2Annotations.length > 0) {\n                annotationLists.push(createAnnotationList(`${entityTypeFQN}/${attributes.Name}`, v2Annotations));\n            }\n        }\n        return outArray;\n    }, []);\n}\n/**\n * Parse the multiplicty string and return the corresponding enum\n * @param multiplicity the multiplicity string\n * @returns the enum value\n */\nfunction getMultiplicityFromString(multiplicity) {\n    switch (multiplicity) {\n        case \"1\":\n            return Parser_1.Multiplicity.One;\n        case \"0..1\":\n            return Parser_1.Multiplicity.ZeroOrOne;\n        case \"*\":\n            return Parser_1.Multiplicity.Many;\n    }\n    return Parser_1.Multiplicity.Unknown;\n}\nfunction parseAssociationSets(associations, namespace) {\n    return associations.map(association => {\n        const associationFQN = `${namespace}.${association._attributes.Name}`;\n        const associationEnd = utils_1.ensureArray(association.End).map((endValue) => {\n            return {\n                entitySet: endValue._attributes.EntitySet,\n                role: endValue._attributes.Role\n            };\n        });\n        return {\n            fullyQualifiedName: associationFQN,\n            name: association._attributes.Name,\n            association: association._attributes.Association,\n            associationEnd: associationEnd\n        };\n    });\n}\nfunction parseAssociations(associations, namespace) {\n    return associations.map(association => {\n        const associationFQN = `${namespace}.${association._attributes.Name}`;\n        const associationEnd = utils_1.ensureArray(association.End).map((endValue) => {\n            return {\n                type: endValue._attributes.Type,\n                role: endValue._attributes.Role,\n                multiplicity: getMultiplicityFromString(endValue._attributes.Multiplicity)\n            };\n        });\n        return {\n            fullyQualifiedName: associationFQN,\n            name: association._attributes.Name,\n            associationEnd: associationEnd,\n            referentialConstraints: parseV2ReferentialConstraint(utils_1.ensureArray(association.ReferentialConstraint), associationEnd)\n        };\n    });\n}\nfunction parseEntityTypes(entityTypes, annotations, namespace) {\n    return entityTypes.reduce((outArray, entityType) => {\n        const entityKeyNames = entityType.Key ? getEntityTypeKeys(utils_1.ensureArray(entityType.Key.PropertyRef)) : [];\n        const entityTypeFQN = `${namespace}.${entityType._attributes.Name}`;\n        const { entityProperties, entityKeys } = parseProperties(utils_1.ensureArray(entityType.Property), entityKeyNames, entityTypeFQN, annotations);\n        const navigationProperties = parseNavigationProperties(utils_1.ensureArray(entityType.NavigationProperty), entityType, entityTypeFQN, annotations);\n        outArray.push({\n            _type: \"EntityType\",\n            name: entityType._attributes.Name,\n            fullyQualifiedName: entityTypeFQN,\n            keys: entityKeys,\n            entityProperties,\n            navigationProperties: navigationProperties\n        });\n        return outArray;\n    }, []);\n}\nfunction parseComplexTypes(complexTypes, annotationLists, namespace) {\n    return complexTypes.reduce((outArray, complexType) => {\n        const complexTypeFQN = `${namespace}.${complexType._attributes.Name}`;\n        const { entityProperties, entityKeys } = parseProperties(utils_1.ensureArray(complexType.Property), [], complexTypeFQN, annotationLists);\n        const navigationProperties = parseNavigationProperties(utils_1.ensureArray(complexType.NavigationProperty), complexType, complexTypeFQN, annotationLists);\n        outArray.push({\n            _type: \"ComplexType\",\n            name: complexType._attributes.Name,\n            fullyQualifiedName: complexTypeFQN,\n            properties: entityProperties,\n            navigationProperties\n        });\n        return outArray;\n    }, []);\n}\nfunction parseEntitySets(entitySets, namespace, entityContainerName, annotationLists) {\n    const outEntitySets = entitySets.map(entitySet => {\n        const outEntitySet = {\n            _type: \"EntitySet\",\n            name: entitySet._attributes.Name,\n            entityTypeName: entitySet._attributes.EntityType,\n            navigationPropertyBinding: {},\n            fullyQualifiedName: `${namespace}.${entityContainerName}/${entitySet._attributes.Name}`\n        };\n        const v2Annotations = v2annotations_1.convertV2Annotations(entitySet._attributes, \"EntitySet\", entitySet._attributes.Name);\n        if (v2Annotations.length > 0) {\n            annotationLists.push(createAnnotationList(outEntitySet.fullyQualifiedName, v2Annotations));\n        }\n        return outEntitySet;\n    });\n    entitySets.forEach(entitySet => {\n        const currentOutEntitySet = outEntitySets.find(outEntitySet => outEntitySet.name === entitySet._attributes.Name);\n        if (currentOutEntitySet) {\n            utils_1.ensureArray(entitySet.NavigationPropertyBinding).forEach(navPropertyBinding => {\n                const currentTargetEntitySet = outEntitySets.find(outEntitySet => outEntitySet.name === navPropertyBinding._attributes.Target);\n                if (currentTargetEntitySet) {\n                    currentOutEntitySet.navigationPropertyBinding[navPropertyBinding._attributes.Path] = currentTargetEntitySet;\n                }\n            });\n        }\n    });\n    return outEntitySets;\n}\nfunction parseSingletons(singletons, namespace, entityContainerName, annotationLists) {\n    const outSingletons = singletons.map(singleton => {\n        const outSingleton = {\n            _type: \"Singleton\",\n            name: singleton._attributes.Name,\n            typeName: singleton._attributes.Type,\n            nullable: singleton._attributes.Nullable !== \"false\",\n            navigationPropertyBinding: {},\n            fullyQualifiedName: `${namespace}.${entityContainerName}/${singleton._attributes.Name}`\n        };\n        const v2Annotations = v2annotations_1.convertV2Annotations(singleton._attributes, \"Singleton\", singleton._attributes.Name);\n        if (v2Annotations.length > 0) {\n            annotationLists.push(createAnnotationList(outSingleton.fullyQualifiedName, v2Annotations));\n        }\n        return outSingleton;\n    });\n    singletons.forEach(singleton => {\n        const currentOutSingleton = outSingletons.find(outSingleton => outSingleton.name === singleton._attributes.Name);\n        if (currentOutSingleton) {\n            utils_1.ensureArray(singleton.NavigationPropertyBinding).forEach(navPropertyBinding => {\n                const currentTargetSingleton = outSingletons.find(outSingleton => outSingleton.name === navPropertyBinding._attributes.Target);\n                if (currentTargetSingleton) {\n                    currentOutSingleton.navigationPropertyBinding[navPropertyBinding._attributes.Path] = currentTargetSingleton;\n                }\n            });\n        }\n    });\n    return outSingletons;\n}\nfunction parseActions(actions, namespace, isFunction = false) {\n    return actions.map(action => {\n        let actionEntityType = `${utils_1.ensureArray(action.Parameter)\n            .filter(param => param._attributes.Name === action._attributes.EntitySetPath)\n            .map(param => param._attributes.Type)}`;\n        const isBound = action._attributes.IsBound === \"true\";\n        let actionFQN = `${action._attributes.Name}()`;\n        if (isBound) {\n            if (!actionEntityType) {\n                actionEntityType = `${utils_1.ensureArray(action.Parameter)[0]._attributes.Type}`;\n            }\n            actionFQN = `${namespace}.${action._attributes.Name}(${actionEntityType})`;\n        }\n        return {\n            _type: \"Action\",\n            name: action._attributes.Name,\n            isBound: isBound,\n            sourceType: actionEntityType,\n            fullyQualifiedName: actionFQN,\n            isFunction: isFunction,\n            parameters: utils_1.ensureArray(action.Parameter).map(param => {\n                return {\n                    _type: \"ActionParameter\",\n                    fullyQualifiedName: `${actionFQN}/${param._attributes.Name}`,\n                    type: param._attributes.Type,\n                    isEntitySet: param._attributes.Name === action._attributes.EntitySetPath\n                };\n            }),\n            returnType: action.ReturnType ? action.ReturnType._attributes.Type : \"\"\n        };\n    });\n}\nfunction parseFunctionImport(actions, entitySets, namespace) {\n    return actions.map(action => {\n        const targetEntitySet = entitySets.find(et => et.name === action._attributes.EntitySet);\n        let actionFQN = `${namespace}/${action._attributes.Name}()`;\n        return {\n            _type: \"Action\",\n            name: action._attributes.Name,\n            isBound: false,\n            sourceType: targetEntitySet ? targetEntitySet.entityTypeName : \"\",\n            fullyQualifiedName: actionFQN,\n            isFunction: false,\n            parameters: utils_1.ensureArray(action.Parameter).map(param => {\n                return {\n                    _type: \"ActionParameter\",\n                    fullyQualifiedName: `${actionFQN}/${param._attributes.Name}`,\n                    type: param._attributes.Type,\n                    isEntitySet: false\n                };\n            }),\n            returnType: action._attributes.ReturnType ? action._attributes.ReturnType : \"\"\n        };\n    });\n}\nfunction parsePropertyValues(propertyValues, currentTarget, annotationsLists) {\n    return propertyValues.map(propertyValue => {\n        const { Annotation, _attributes, ...properties } = propertyValue;\n        const outPropertyValue = {};\n        if (_attributes) {\n            const attributeKey = Object.keys(_attributes).find(keyName => keyName !== \"Property\");\n            outPropertyValue.name = _attributes.Property;\n            let currentPropertyTarget = `${currentTarget}/${outPropertyValue.name}`;\n            if (properties && Object.keys(properties).length > 0) {\n                outPropertyValue.value = parseExpression(properties, currentPropertyTarget, annotationsLists);\n            }\n            else if (attributeKey) {\n                outPropertyValue.value = parseInlineExpression({ [attributeKey]: _attributes[attributeKey] }, currentPropertyTarget, annotationsLists);\n            }\n            if (propertyValue.Annotation) {\n                const propertyAnnotations = parseAnnotations(utils_1.ensureArray(propertyValue.Annotation), currentPropertyTarget, annotationsLists);\n                if (propertyAnnotations && propertyAnnotations.length > 0) {\n                    annotationsLists.push(createAnnotationList(currentPropertyTarget, propertyAnnotations));\n                }\n            }\n        }\n        return outPropertyValue;\n    });\n}\nfunction parseRecord(record, currentTarget, annotationsLists) {\n    const recordAnnotations = parseAnnotations(utils_1.ensureArray(record.Annotation), currentTarget, annotationsLists);\n    if (recordAnnotations && recordAnnotations.length > 0) {\n        annotationsLists.push(createAnnotationList(currentTarget, recordAnnotations));\n    }\n    return {\n        type: record._attributes ? unalias(record._attributes.Type) : undefined,\n        propertyValues: parsePropertyValues(utils_1.ensureArray(record.PropertyValue), currentTarget, annotationsLists)\n    };\n}\n/**\n * Type Guard for the type of the current collection\n * @param collection\n * @param propertyNameToCheck\n */\nfunction isCollectionOfType(collection, propertyNameToCheck) {\n    return collection[propertyNameToCheck] != null;\n}\nfunction parseModelPath(propertyPath, modelPathType) {\n    switch (modelPathType) {\n        case \"NavigationPropertyPath\":\n            return { type: \"NavigationPropertyPath\", NavigationPropertyPath: propertyPath._text };\n        case \"PropertyPath\":\n            return { type: \"PropertyPath\", PropertyPath: propertyPath._text };\n        case \"AnnotationPath\":\n            return { type: \"AnnotationPath\", AnnotationPath: propertyPath._text };\n        case \"Path\":\n            return { type: \"Path\", Path: propertyPath._text };\n    }\n}\nfunction parseCollection(collection, currentTarget, annotationsLists) {\n    if (isCollectionOfType(collection, \"Record\")) {\n        const recordArray = utils_1.ensureArray(collection.Record).map((record, recordIndex) => parseRecord(record, currentTarget + \"/\" + recordIndex, annotationsLists));\n        recordArray.type = \"Record\";\n        return recordArray;\n    }\n    else if (isCollectionOfType(collection, \"PropertyPath\")) {\n        const propertyPathArray = utils_1.ensureArray(collection.PropertyPath).map(propertyPath => parseModelPath(propertyPath, \"PropertyPath\"));\n        propertyPathArray.type = \"PropertyPath\";\n        return propertyPathArray;\n    }\n    else if (isCollectionOfType(collection, \"NavigationPropertyPath\")) {\n        const navPropertyPathArray = utils_1.ensureArray(collection.NavigationPropertyPath).map(navPropertyPath => parseModelPath(navPropertyPath, \"NavigationPropertyPath\"));\n        navPropertyPathArray.type = \"NavigationPropertyPath\";\n        return navPropertyPathArray;\n    }\n    else if (isCollectionOfType(collection, \"String\")) {\n        const stringArray = utils_1.ensureArray(collection.String).map(stringValue => stringValue._text);\n        stringArray.type = \"String\";\n        return stringArray;\n    }\n    else if (isCollectionOfType(collection, \"AnnotationPath\")) {\n        const annotationPathArray = utils_1.ensureArray(collection.AnnotationPath).map(annotationPath => parseModelPath(annotationPath, \"AnnotationPath\"));\n        annotationPathArray.type = \"AnnotationPath\";\n        return annotationPathArray;\n    }\n    else if (isCollectionOfType(collection, \"Path\")) {\n        const pathArray = utils_1.ensureArray(collection.Path).map(pathDefinition => parseModelPath(pathDefinition, \"Path\"));\n        pathArray.type = \"Path\";\n        return pathArray;\n    }\n    else if (isCollectionOfType(collection, \"If\")) {\n        const stringArray = utils_1.ensureArray(collection.If).map(stringValue => stringValue._text);\n        stringArray.type = \"String\";\n        return stringArray;\n    }\n    else if (Object.keys(collection).length === 0) {\n        return [];\n    }\n    else {\n        // TODO Full Coverage\n        console.error(`Cannot parse ${JSON.stringify(collection)}, collection type is not supported`);\n    }\n    return [];\n}\nfunction parseApply(applyExpression) {\n    return applyExpression;\n}\n/**\n * Type Guard for the type of the current expression\n * @param annotation\n * @param propertyNameToCheck\n */\nfunction isExpressionOfType(annotation, propertyNameToCheck) {\n    return annotation[propertyNameToCheck] != null;\n}\nfunction parseInlineExpression(expression, currentTarget, annotationsLists) {\n    const expressionKeys = Object.keys(expression);\n    if (expressionKeys.length > 1) {\n        throw new Error(`Too many expressions defined on a single object ${JSON.stringify(expression)}`);\n    }\n    const expressionKey = expressionKeys[0];\n    switch (expressionKey) {\n        case \"String\":\n            return {\n                type: \"String\",\n                String: expression[expressionKey]\n            };\n        case \"Bool\":\n            return {\n                type: \"Bool\",\n                Bool: expression.Bool === \"true\"\n            };\n        case \"Decimal\":\n            return {\n                type: \"Decimal\",\n                Decimal: parseFloat(expression.Decimal)\n            };\n        case \"Date\":\n            return {\n                type: \"Date\",\n                Date: expression.Date\n            };\n        case \"Int\":\n            return {\n                type: \"Int\",\n                Int: parseInt(expression.Int)\n            };\n        case \"Path\":\n            return {\n                type: \"Path\",\n                Path: expression.Path\n            };\n        case \"PropertyPath\":\n            return {\n                type: \"PropertyPath\",\n                PropertyPath: expression.PropertyPath\n            };\n        case \"AnnotationPath\":\n            return {\n                type: \"AnnotationPath\",\n                AnnotationPath: expression.AnnotationPath\n            };\n        case \"NavigationPropertyPath\":\n            return {\n                type: \"NavigationPropertyPath\",\n                NavigationPropertyPath: expression.NavigationPropertyPath\n            };\n        case \"EnumMember\":\n            return {\n                type: \"EnumMember\",\n                EnumMember: expression[expressionKey]\n            };\n        case \"Collection\":\n            return {\n                type: \"Collection\",\n                Collection: parseCollection(expression.Collection, currentTarget, annotationsLists)\n            };\n        case \"Record\":\n            return {\n                type: \"Record\",\n                Record: parseRecord(expression.Record, currentTarget, annotationsLists)\n            };\n        case \"Apply\":\n            return {\n                type: \"Apply\",\n                Apply: parseApply(expression.Apply)\n            };\n        default:\n            console.error(\"Unsupported inline expression type \" + expressionKey);\n            return {\n                type: \"Unknown\"\n            };\n    }\n}\nfunction parseExpression(expression, currentTarget, annotationsLists) {\n    const expressionKeys = Object.keys(expression);\n    if (expressionKeys.length > 1) {\n        throw new Error(`Too many expressions defined on a single object ${JSON.stringify(expression)}`);\n    }\n    const expressionKey = expressionKeys[0];\n    switch (expressionKey) {\n        case \"String\":\n            return {\n                type: \"String\",\n                String: expression[expressionKey]._text\n            };\n        case \"Bool\":\n            return {\n                type: \"Bool\",\n                Bool: expression.Bool._text === \"true\"\n            };\n        case \"Int\":\n            return {\n                type: \"Int\",\n                Int: parseInt(expression.Int._text)\n            };\n        case \"Decimal\":\n            return {\n                type: \"Decimal\",\n                Decimal: parseFloat(expression.Decimal._text)\n            };\n        case \"Path\":\n            return {\n                type: \"Path\",\n                Path: expression.Path._text\n            };\n        case \"PropertyPath\":\n            return {\n                type: \"PropertyPath\",\n                PropertyPath: expression.PropertyPath._text\n            };\n        case \"NavigationPropertyPath\":\n            return {\n                type: \"NavigationPropertyPath\",\n                NavigationPropertyPath: expression.NavigationPropertyPath._text\n            };\n        case \"AnnotationPath\":\n            return {\n                type: \"AnnotationPath\",\n                AnnotationPath: expression.AnnotationPath._text\n            };\n        case \"EnumMember\":\n            return {\n                type: \"EnumMember\",\n                EnumMember: expression[expressionKey]._text\n            };\n        case \"Collection\":\n            return {\n                type: \"Collection\",\n                Collection: parseCollection(expression.Collection, currentTarget, annotationsLists)\n            };\n        case \"Record\":\n            return {\n                type: \"Record\",\n                Record: parseRecord(expression.Record, currentTarget, annotationsLists)\n            };\n        case \"Apply\":\n            return {\n                type: \"Apply\",\n                Apply: parseApply(expression.Apply)\n            };\n        default:\n            console.error(\"Unsupported expression type \" + expressionKey);\n            return {\n                type: \"Unknown\"\n            };\n    }\n}\nfunction parseAnnotation(annotation, currentTarget, annotationsLists) {\n    const { Term, Qualifier, ...others } = annotation._attributes;\n    let outAnnotation = {\n        term: unalias(Term),\n        qualifier: Qualifier\n    };\n    let currentAnnotationTarget = `${currentTarget}@${unalias(Term)}`;\n    if (Qualifier !== \"\" && Qualifier !== undefined) {\n        currentAnnotationTarget += `#${Qualifier}`;\n    }\n    if (others && Object.keys(others).length > 0) {\n        outAnnotation.value = parseInlineExpression(others, currentAnnotationTarget, annotationsLists);\n    }\n    if (annotation.Annotation) {\n        const annotationAnnotations = parseAnnotations(utils_1.ensureArray(annotation.Annotation), currentAnnotationTarget, annotationsLists);\n        if (annotationAnnotations && annotationAnnotations.length > 0) {\n            annotationsLists.push(createAnnotationList(currentAnnotationTarget, annotationAnnotations));\n        }\n    }\n    const keys = Object.keys(annotation).filter(keyValue => keyValue !== \"_attributes\" && keyValue !== \"Annotation\");\n    let isCollection = false;\n    if (isExpressionOfType(annotation, \"Record\")) {\n        outAnnotation.record = parseRecord(annotation.Record, currentAnnotationTarget, annotationsLists);\n    }\n    else if (isExpressionOfType(annotation, \"Collection\")) {\n        outAnnotation.collection = parseCollection(annotation.Collection, currentAnnotationTarget, annotationsLists);\n    }\n    else if (keys.length === 1) {\n        outAnnotation.value = parseExpression({ [keys[0]]: annotation[keys[0]] }, currentAnnotationTarget, annotationsLists);\n    }\n    else if (keys.length > 1) {\n        // TODO Full Coverage\n        console.error(`Cannot parse ${JSON.stringify(annotation)}, expression type is not supported`);\n    }\n    return outAnnotation;\n}\nfunction parseAnnotations(annotations, currentTarget, annotationsLists) {\n    return annotations.map(annotation => parseAnnotation(annotation, currentTarget, annotationsLists));\n}\nfunction createAnnotationList(target, annotations) {\n    return {\n        target: target,\n        annotations: annotations\n    };\n}\nfunction parseAnnotationLists(annotationLists, annotationsLists) {\n    annotationLists\n        .filter(annotationList => annotationList._attributes !== undefined)\n        .forEach(annotationList => {\n        annotationsLists.push(createAnnotationList(annotationList._attributes.Target, parseAnnotations(utils_1.ensureArray(annotationList.Annotation), annotationList._attributes.Target, annotationsLists)));\n    });\n}\nfunction parseSchema(edmSchema, identification) {\n    const namespace = edmSchema._attributes.Namespace;\n    const annotations = [];\n    const entityTypes = parseEntityTypes(utils_1.ensureArray(edmSchema.EntityType), annotations, namespace);\n    const complexTypes = parseComplexTypes(utils_1.ensureArray(edmSchema.ComplexType), annotations, namespace);\n    let entitySets = [];\n    let singletons = [];\n    let associationSets = [];\n    let entityContainer = {};\n    let actions = [];\n    if (edmSchema.EntityContainer) {\n        entitySets = parseEntitySets(utils_1.ensureArray(edmSchema.EntityContainer.EntitySet), namespace, edmSchema.EntityContainer._attributes.Name, annotations);\n        singletons = parseSingletons(utils_1.ensureArray(edmSchema.EntityContainer.Singleton), namespace, edmSchema.EntityContainer._attributes.Name, annotations);\n        associationSets = parseAssociationSets(utils_1.ensureArray(edmSchema.EntityContainer.AssociationSet), namespace);\n        entityContainer = {\n            name: edmSchema.EntityContainer._attributes.Name,\n            fullyQualifiedName: `${namespace}.${edmSchema.EntityContainer._attributes.Name}`\n        };\n        actions = actions.concat(parseFunctionImport(utils_1.ensureArray(edmSchema.EntityContainer.FunctionImport), entitySets, entityContainer.fullyQualifiedName));\n    }\n    actions = actions.concat(parseActions(utils_1.ensureArray(edmSchema.Action), namespace));\n    actions = actions.concat(parseActions(utils_1.ensureArray(edmSchema.Function), namespace, true));\n    // const actionImports = parseActionImports(ensureArray(edmSchema.EntityContainer.ActionImport), namespace);\n    const associations = parseAssociations(utils_1.ensureArray(edmSchema.Association), namespace);\n    if (associationSets.length > 0)\n        // V2 case\n        entitySets.forEach(entitySet => {\n            const entityType = entityTypes.find(entityType => entityType.fullyQualifiedName === entitySet.entityTypeName);\n            entityType === null || entityType === void 0 ? void 0 : entityType.navigationProperties.forEach((navProp) => {\n                const v2NavProp = navProp;\n                const associationSet = associationSets.find(assoc => assoc.association === v2NavProp.relationship);\n                if (associationSet) {\n                    const associationEndEntitySets = associationSet.associationEnd.map((associationEnd) => {\n                        return entitySets.find(entitySet => entitySet.name === associationEnd.entitySet);\n                    });\n                    const targetEntitySet = associationEndEntitySets.find((associationEntitySet) => (associationEntitySet === null || associationEntitySet === void 0 ? void 0 : associationEntitySet.fullyQualifiedName) !== entitySet.fullyQualifiedName);\n                    if (targetEntitySet) {\n                        entitySet.navigationPropertyBinding[navProp.name] = targetEntitySet;\n                    }\n                }\n            });\n        });\n    if (associations.length > 0) {\n        entityTypes.forEach(entityType => {\n            entityType.navigationProperties.forEach((navProp) => {\n                const v2NavProp = navProp;\n                const association = associations.find(assoc => assoc.fullyQualifiedName === v2NavProp.relationship);\n                if (association && association.referentialConstraints) {\n                    v2NavProp.referentialConstraint = association.referentialConstraints;\n                }\n            });\n        });\n    }\n    parseAnnotationLists(utils_1.ensureArray(edmSchema.Annotations), annotations);\n    var annotationMap = {};\n    annotationMap[identification] = annotations;\n    return {\n        associations,\n        associationSets,\n        annotations: annotationMap,\n        entityContainer,\n        namespace: namespace,\n        entitySets,\n        singletons,\n        complexTypes,\n        actions,\n        entityTypes\n    };\n}\nfunction parseReferences(references, schemas) {\n    const outReferences = references.reduce((referencesArray, reference) => {\n        const includes = utils_1.ensureArray(reference[\"edmx:Include\"]);\n        includes.forEach((include) => {\n            referencesArray.push({\n                uri: reference._attributes.Uri,\n                alias: include._attributes.Alias,\n                namespace: include._attributes.Namespace\n            });\n        });\n        return referencesArray;\n    }, []);\n    schemas.forEach(schema => {\n        if (schema && schema._attributes.Alias) {\n            outReferences.push({\n                uri: \"\",\n                alias: schema._attributes.Alias,\n                namespace: schema._attributes.Namespace\n            });\n        }\n    });\n    return outReferences;\n}\nlet referenceMap = {};\nfunction unalias(aliasedValue) {\n    if (!aliasedValue) {\n        return aliasedValue;\n    }\n    const [alias, value] = aliasedValue.split(\".\");\n    const reference = referenceMap[alias];\n    if (reference) {\n        return `${reference.namespace}.${value}`;\n    }\n    else {\n        // Try to see if it's an annotation Path like to_SalesOrder/@UI.LineItem\n        if (aliasedValue.indexOf(\"@\") !== -1) {\n            const [preAlias, postAlias] = aliasedValue.split(\"@\");\n            return `${preAlias}@${unalias(postAlias)}`;\n        }\n        else {\n            return aliasedValue;\n        }\n    }\n}\nfunction mergeSchemas(schemas) {\n    if (schemas.length === 1) {\n        return schemas[0];\n    }\n    const associations = schemas.reduce((associations, schema) => {\n        return associations.concat(schema.associations);\n    }, []);\n    const associationSets = schemas.reduce((associationSets, schema) => {\n        return associationSets.concat(schema.associationSets);\n    }, []);\n    const entitySets = schemas.reduce((entitySets, schema) => {\n        return entitySets.concat(schema.entitySets);\n    }, []);\n    const singletons = schemas.reduce((singletons, schema) => {\n        return singletons.concat(schema.singletons);\n    }, []);\n    const entityTypes = schemas.reduce((entityTypes, schema) => {\n        return entityTypes.concat(schema.entityTypes);\n    }, []);\n    const actions = schemas.reduce((actions, schema) => {\n        return actions.concat(schema.actions);\n    }, []);\n    const complexTypes = schemas.reduce((complexTypes, schema) => {\n        return complexTypes.concat(schema.complexTypes);\n    }, []);\n    let annotationMap = {};\n    schemas.forEach(schema => {\n        annotationMap = Object.assign(annotationMap, schema.annotations);\n    });\n    let entityContainer;\n    let namespace;\n    schemas.forEach(schema => {\n        if (schema.entityContainer && Object.keys(schema.entityContainer).length > 0) {\n            entityContainer = schema.entityContainer;\n            namespace = schema.namespace;\n        }\n    });\n    if (associationSets.length > 0)\n        // V2 case\n        entitySets.forEach(entitySet => {\n            const entityType = entityTypes.find(entityType => entityType.fullyQualifiedName === entitySet.entityTypeName);\n            entityType === null || entityType === void 0 ? void 0 : entityType.navigationProperties.forEach((navProp) => {\n                const v2NavProp = navProp;\n                const associationSet = associationSets.find(assoc => assoc.association === v2NavProp.relationship);\n                if (associationSet) {\n                    const associationEndEntitySets = associationSet.associationEnd.map((associationEnd) => {\n                        return entitySets.find(entitySet => entitySet.name === associationEnd.entitySet);\n                    });\n                    const targetEntitySet = associationEndEntitySets.find((associationEntitySet) => (associationEntitySet === null || associationEntitySet === void 0 ? void 0 : associationEntitySet.fullyQualifiedName) !== entitySet.fullyQualifiedName);\n                    if (targetEntitySet) {\n                        entitySet.navigationPropertyBinding[navProp.name] = targetEntitySet;\n                    }\n                }\n            });\n        });\n    if (associations.length > 0) {\n        entityTypes.forEach(entityType => {\n            entityType.navigationProperties.forEach((navProp) => {\n                const v2NavProp = navProp;\n                const association = associations.find(assoc => assoc.fullyQualifiedName === v2NavProp.relationship);\n                if (association && association.referentialConstraints) {\n                    v2NavProp.referentialConstraint = association.referentialConstraints;\n                }\n            });\n        });\n    }\n    const outSchema = {\n        associations,\n        associationSets,\n        annotations: annotationMap,\n        entityContainer,\n        namespace: namespace,\n        entitySets,\n        singletons,\n        complexTypes,\n        actions,\n        entityTypes\n    };\n    return outSchema;\n}\n/**\n * Parse an edmx file and return a parsed Service Definition\n * @param xml {string} the original XML string\n * @param fileIdentification {string} a way to identify this file\n */\nfunction parseEDMX(xml, fileIdentification = \"serviceFile\") {\n    const jsonObj = xml_js_1.xml2js(xml, { compact: true });\n    const schemas = utils_1.ensureArray(jsonObj[\"edmx:Edmx\"][\"edmx:DataServices\"].Schema);\n    const references = parseReferences(utils_1.ensureArray(jsonObj[\"edmx:Edmx\"][\"edmx:Reference\"]), schemas);\n    referenceMap = references.reduce((map, reference) => {\n        map[reference.alias] = reference;\n        return map;\n    }, {});\n    const parsedSchemas = schemas.map(schema => {\n        return parseSchema(schema, fileIdentification);\n    });\n    const edmxDocument = new utils_1.ParserOutputInstance(fileIdentification, jsonObj[\"edmx:Edmx\"]._attributes.Version, mergeSchemas(parsedSchemas), references);\n    return edmxDocument;\n}\nexports.parseEDMX = parseEDMX;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergedParserOutput = exports.ParserOutputInstance = exports.ensureArray = void 0;\nfunction ensureArray(sourceObject) {\n    if (sourceObject === undefined || sourceObject === null) {\n        return [];\n    }\n    if (Array.isArray(sourceObject)) {\n        return sourceObject;\n    }\n    else {\n        return [sourceObject];\n    }\n}\nexports.ensureArray = ensureArray;\nclass ParserOutputInstance {\n    constructor(fileIdentification, version, schema, references) {\n        this.identification = fileIdentification;\n        this.references = references;\n        this.version = version;\n        this.schema = schema;\n    }\n    unalias(aliasedValue) {\n        if (!aliasedValue) {\n            return aliasedValue;\n        }\n        const [alias, value] = aliasedValue.split(\".\");\n        const reference = this.references.find(reference => {\n            return reference.alias === alias;\n        });\n        if (reference) {\n            return `${reference.namespace}.${value}`;\n        }\n        else {\n            // Try to see if it's an annotation Path like to_SalesOrder/@UI.LineItem\n            if (aliasedValue.indexOf(\"@\") !== -1) {\n                const [preAlias, postAlias] = aliasedValue.split(\"@\");\n                return `${preAlias}@${this.unalias(postAlias)}`;\n            }\n            else {\n                return aliasedValue;\n            }\n        }\n    }\n}\nexports.ParserOutputInstance = ParserOutputInstance;\nclass MergedParserOutput {\n    constructor(initialParserOutput) {\n        this._references = [];\n        this._parserOutput = [];\n        this._annotations = {};\n        this._associations = [];\n        this._associationSets = [];\n        this._entitySets = [];\n        this._singletons = [];\n        this._actions = [];\n        this._entityContainer = {};\n        this._entityTypes = [];\n        this._complexTypes = [];\n        this.identification = \"mergedParserInstance\";\n        this.version = initialParserOutput.version;\n        this._namespace = initialParserOutput.schema.namespace;\n    }\n    get references() {\n        return this._references;\n    }\n    get schema() {\n        return {\n            associations: this._associations,\n            associationSets: this._associationSets,\n            annotations: this._annotations,\n            entityContainer: this._entityContainer,\n            namespace: this._namespace,\n            entitySets: this._entitySets,\n            singletons: this._singletons,\n            complexTypes: this._complexTypes,\n            actions: this._actions,\n            entityTypes: this._entityTypes\n        };\n    }\n    addParserOutput(parserOutput) {\n        this._parserOutput.push(parserOutput);\n        this._references = this._references.concat(parserOutput.references);\n        this._associations = this._associations.concat(parserOutput.schema.associations);\n        this._associationSets = this._associationSets.concat(parserOutput.schema.associationSets);\n        this._annotations = Object.assign(this._annotations, parserOutput.schema.annotations);\n        this._entitySets = this._entitySets.concat(parserOutput.schema.entitySets);\n        this._singletons = this._singletons.concat(parserOutput.schema.singletons);\n        this._actions = this._actions.concat(parserOutput.schema.actions);\n        this._entityTypes = this._entityTypes.concat(parserOutput.schema.entityTypes);\n        this._complexTypes = this._complexTypes.concat(parserOutput.schema.complexTypes);\n        this._entityContainer = Object.assign(this._entityContainer, parserOutput.schema.entityContainer);\n    }\n    unalias(aliasedValue) {\n        if (!aliasedValue) {\n            return aliasedValue;\n        }\n        const [alias, value] = aliasedValue.split(\".\");\n        const reference = this.references.find(reference => {\n            return reference.alias === alias;\n        });\n        if (reference) {\n            return `${reference.namespace}.${value}`;\n        }\n        else {\n            // Try to see if it's an annotation Path like to_SalesOrder/@UI.LineItem\n            if (aliasedValue.indexOf(\"@\") !== -1) {\n                const [preAlias, postAlias] = aliasedValue.split(\"@\");\n                return `${preAlias}@${this.unalias(postAlias)}`;\n            }\n            else {\n                return aliasedValue;\n            }\n        }\n    }\n}\nexports.MergedParserOutput = MergedParserOutput;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertV2Annotations = void 0;\nfunction convertV2Annotations(attributes, objectType, objectName) {\n    const annotations = [];\n    if (attributes[\"sap:schema-version\"]) {\n        annotations.push({\n            term: \"Org.OData.Core.V1.SchemaVersion\" /* SchemaVersion */,\n            value: {\n                type: \"String\",\n                String: attributes[\"sap:schema-version\"]\n            }\n        });\n    }\n    if (attributes[\"sap:creatable\"] && objectType === \"EntitySet\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.InsertRestrictions\" /* InsertRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"Insertable\",\n                        value: {\n                            type: \"Bool\",\n                            Bool: attributes[\"sap:creatable\"] === \"true\"\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:creatable\"] && objectType === \"NavigationProperty\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.NavigationRestrictions\" /* NavigationRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"RestrictedProperties\",\n                        value: {\n                            type: \"Record\",\n                            Record: {\n                                propertyValues: [\n                                    {\n                                        name: \"InsertRestrictrions\",\n                                        value: {\n                                            type: \"Record\",\n                                            Record: {\n                                                propertyValues: [\n                                                    {\n                                                        name: \"Insertable\",\n                                                        value: {\n                                                            type: \"Bool\",\n                                                            Bool: attributes[\"sap:creatable\"] === \"true\"\n                                                        }\n                                                    }\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:creatable-path\"] && objectType === \"NavigationProperty\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.NavigationRestrictions\" /* NavigationRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"RestrictedProperties\",\n                        value: {\n                            type: \"Record\",\n                            Record: {\n                                propertyValues: [\n                                    {\n                                        name: \"InsertRestrictrions\",\n                                        value: {\n                                            type: \"Record\",\n                                            Record: {\n                                                propertyValues: [\n                                                    {\n                                                        name: \"Insertable\",\n                                                        value: {\n                                                            type: \"Path\",\n                                                            Path: attributes[\"sap:creatable-path\"]\n                                                        }\n                                                    }\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:updatable\"] && objectType === \"EntitySet\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.UpdateRestrictions\" /* UpdateRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"Updatable\",\n                        value: {\n                            type: \"Bool\",\n                            Bool: attributes[\"sap:updatable\"] === \"true\"\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:updatable-path\"] && objectType === \"EntitySet\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.UpdateRestrictions\" /* UpdateRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"Updatable\",\n                        value: {\n                            type: \"Path\",\n                            Path: attributes[\"sap:updatable-path\"]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:deletable\"] && objectType === \"EntitySet\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.DeleteRestrictions\" /* DeleteRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"Deletable\",\n                        value: {\n                            type: \"Bool\",\n                            Bool: attributes[\"sap:updatable\"] === \"true\"\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:deletable-path\"] && objectType === \"EntitySet\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.DeleteRestrictions\" /* DeleteRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"Deletable\",\n                        value: {\n                            type: \"Path\",\n                            Path: attributes[\"sap:deletable-path\"]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:creatable\"] === \"true\" &&\n        attributes[\"sap:updatable\"] === \"false\" &&\n        objectType === \"Property\") {\n        annotations.push({\n            term: \"Org.OData.Core.V1.Immutable\" /* Immutable */,\n            value: {\n                type: \"Bool\",\n                Bool: true\n            }\n        });\n    }\n    if (attributes[\"sap:creatable\"] === \"false\" &&\n        attributes[\"sap:updatable\"] === \"false\" &&\n        objectType === \"Property\") {\n        annotations.push({\n            term: \"Org.OData.Core.V1.Computed\" /* Computed */,\n            value: {\n                type: \"Bool\",\n                Bool: true\n            }\n        });\n    }\n    if (attributes[\"sap:updatable-path\"] && objectType === \"Property\") {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.FieldControl\" /* FieldControl */,\n            value: {\n                type: \"Path\",\n                Path: attributes[\"sap:updatable-path\"]\n            }\n        });\n    }\n    if (attributes[\"sap:searchable\"]) {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.SearchRestrictions\" /* SearchRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"Searachable\",\n                        value: {\n                            type: \"Bool\",\n                            Bool: attributes[\"sap:searchable\"] === \"true\"\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:pageable\"]) {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.TopSupported\" /* TopSupported */,\n            value: {\n                type: \"Bool\",\n                Bool: attributes[\"sap:pageable\"] === \"true\"\n            }\n        });\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.SkipSupported\" /* SkipSupported */,\n            value: {\n                type: \"Bool\",\n                Bool: attributes[\"sap:pageable\"] === \"true\"\n            }\n        });\n    }\n    if (attributes[\"sap:topable\"]) {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.TopSupported\" /* TopSupported */,\n            value: {\n                type: \"Bool\",\n                Bool: attributes[\"sap:topable\"] === \"true\"\n            }\n        });\n    }\n    if (attributes[\"sap:requires-filter\"]) {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.FilterRestrictions\" /* FilterRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"RequiresFilter\",\n                        value: {\n                            type: \"Bool\",\n                            Bool: attributes[\"sap:requires-filter\"] === \"true\"\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:required-in-filter\"]) {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.FilterRestrictions\" /* FilterRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"RequiredProperties\",\n                        value: {\n                            type: \"Collection\",\n                            Collection: [\n                                {\n                                    type: \"PropertyPath\",\n                                    PropertyPath: objectName\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:filterable\"] === \"false\" && objectType === \"Property\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.FilterRestrictions\" /* FilterRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"NonFilterableProperties\",\n                        value: {\n                            type: \"Collection\",\n                            Collection: [\n                                {\n                                    type: \"PropertyPath\",\n                                    PropertyPath: objectName\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:filterable\"] === \"false\" && objectType === \"NavigationProperty\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.NavigationRestrictions\" /* NavigationRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"RestrictedProperties\",\n                        value: {\n                            type: \"Collection\",\n                            Collection: [\n                                {\n                                    type: \"Record\",\n                                    propertyValues: [\n                                        {\n                                            name: \"NavigationProperty\",\n                                            value: {\n                                                type: \"NavigationPropertyPath\",\n                                                NavigationPropertyPath: objectName\n                                            }\n                                        },\n                                        {\n                                            name: \"FilterRestrictions\",\n                                            value: {\n                                                type: \"Record\",\n                                                Record: {\n                                                    propertyValues: [\n                                                        {\n                                                            name: \"Filterable\",\n                                                            value: {\n                                                                type: \"Bool\",\n                                                                Bool: false\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:filter-restricton\"]) {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.FilterRestrictions\" /* FilterRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"FilterExpressionRestrictions\",\n                        value: {\n                            type: \"Collection\",\n                            Collection: [\n                                {\n                                    type: \"Record\",\n                                    propertyValues: [\n                                        {\n                                            name: \"FilterExpressionRestrictions\",\n                                            value: {\n                                                type: \"String\",\n                                                String: attributes[\"sap:filter-restricton\"]\n                                            }\n                                        },\n                                        {\n                                            name: \"Property\",\n                                            value: {\n                                                type: \"PropertyPath\",\n                                                PropertyPath: objectName\n                                            }\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:sortable\"] === \"false\") {\n        annotations.push({\n            term: \"Org.OData.Capabilities.V1.SortRestrictions\" /* SortRestrictions */,\n            record: {\n                propertyValues: [\n                    {\n                        name: \"NonSortableProperties\",\n                        value: {\n                            type: \"PropertyPath\",\n                            PropertyPath: objectName\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    if (attributes[\"sap:visible\"] === \"false\") {\n        annotations.push({\n            term: \"com.sap.vocabularies.UI.v1.Hidden\" /* Hidden */,\n            value: {\n                type: \"Bool\",\n                Bool: true\n            }\n        });\n    }\n    if (attributes[\"sap:label\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.Label\" /* Label */,\n            value: {\n                type: \"String\",\n                String: attributes[\"sap:label\"]\n            }\n        });\n    }\n    if (attributes[\"sap:heading\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.Heading\" /* Heading */,\n            value: {\n                type: \"String\",\n                String: attributes[\"sap:heading\"]\n            }\n        });\n    }\n    if (attributes[\"sap:quickinfo\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.QuickInfo\" /* QuickInfo */,\n            value: {\n                type: \"String\",\n                String: attributes[\"sap:quickinfo\"]\n            }\n        });\n    }\n    if (attributes[\"sap:text\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.Text\" /* Text */,\n            value: {\n                type: \"Path\",\n                Path: attributes[\"sap:text\"]\n            }\n        });\n    }\n    if (attributes[\"sap:unit\"]) {\n        annotations.push({\n            term: \"Org.OData.Measures.V1.Unit\" /* Unit */,\n            value: {\n                type: \"Path\",\n                Path: attributes[\"sap:unit\"]\n            }\n        });\n        annotations.push({\n            term: \"Org.OData.Measures.V1.ISOCurrency\" /* ISOCurrency */,\n            value: {\n                type: \"Path\",\n                Path: attributes[\"sap:unit\"]\n            }\n        });\n    }\n    if (attributes[\"sap:precision\"]) {\n        annotations.push({\n            term: \"Org.OData.Measures.V1.Scale\" /* Scale */,\n            value: {\n                type: \"Int\",\n                Int: parseInt(attributes[\"sap:precision\"])\n            }\n        });\n    }\n    if (attributes[\"sap:value-list\"] === \"fixed-value\") {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.ValueListWithFixedValues\" /* ValueListWithFixedValues */,\n            value: {\n                type: \"Bool\",\n                Bool: true\n            }\n        });\n    }\n    if (attributes[\"sap:display-format\"] === \"NonNegative\") {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.IsDigitSequence\" /* IsDigitSequence */,\n            value: {\n                type: \"Bool\",\n                Bool: true\n            }\n        });\n    }\n    if (attributes[\"sap:display-format\"] === \"UpperCase\") {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.IsUpperCase\" /* IsUpperCase */,\n            value: {\n                type: \"Bool\",\n                Bool: true\n            }\n        });\n    }\n    if (attributes[\"sap:lower-boundary\"] || attributes[\"sap:upper-boundary\"]) {\n        const pv = [];\n        if (attributes[\"sap:lower-boundary\"]) {\n            pv.push({\n                name: \"LowerBoundary\",\n                value: {\n                    type: \"PropertyPath\",\n                    PropertyPath: attributes[\"sap:lower-boundary\"]\n                }\n            });\n        }\n        if (attributes[\"sap:upper-boundary\"]) {\n            pv.push({\n                name: \"UpperBoundary\",\n                value: {\n                    type: \"PropertyPath\",\n                    PropertyPath: attributes[\"sap:upper-boundary\"]\n                }\n            });\n        }\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.Interval\" /* Interval */,\n            record: {\n                propertyValues: pv\n            }\n        });\n    }\n    if (attributes[\"sap:field-control\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.FieldControl\" /* FieldControl */,\n            value: {\n                type: \"Path\",\n                Path: attributes[\"sap:field-control\"]\n            }\n        });\n    }\n    if (attributes[\"sap:applicable-path\"]) {\n        annotations.push({\n            term: \"Org.OData.Core.V1.OperationAvailable\" /* OperationAvailable */,\n            value: {\n                type: \"Path\",\n                Path: attributes[\"sap:applicable-path\"]\n            }\n        });\n    }\n    if (attributes[\"sap:minoccurs\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.MinOccurs\" /* MinOccurs */,\n            value: {\n                type: \"Int\",\n                Int: parseInt(attributes[\"sap:minoccurs\"])\n            }\n        });\n    }\n    if (attributes[\"sap:maxoccurs\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.MaxOccurs\" /* MaxOccurs */,\n            value: {\n                type: \"Int\",\n                Int: parseInt(attributes[\"sap:maxoccurs\"])\n            }\n        });\n    }\n    if (attributes[\"sap:parameter\"] === \"mandatory\") {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.FieldControl\" /* FieldControl */,\n            value: {\n                type: \"EnumMember\",\n                EnumMember: \"Common.FieldControlType/Mandatory\" /* Mandatory */\n            }\n        });\n    }\n    if (attributes[\"sap:parameter\"] === \"optional\") {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.FieldControl\" /* FieldControl */,\n            value: {\n                type: \"EnumMember\",\n                EnumMember: \"Common.FieldControlType/Optional\" /* Optional */\n            }\n        });\n    }\n    if (attributes[\"sap:attribute-for\"]) {\n        annotations.push({\n            term: \"com.sap.vocabularies.Common.v1.Attributes\" /* Attributes */,\n            value: {\n                type: \"Collection\",\n                Collection: [\n                    {\n                        type: \"PropertyPath\",\n                        PropertyPath: objectName\n                    }\n                ]\n            }\n        });\n    }\n    return annotations;\n}\nexports.convertV2Annotations = convertV2Annotations;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Multiplicity = void 0;\nvar Multiplicity;\n(function (Multiplicity) {\n    Multiplicity[\"One\"] = \"1\";\n    Multiplicity[\"ZeroOrOne\"] = \"0..1\";\n    Multiplicity[\"Many\"] = \"*\";\n    Multiplicity[\"Unknown\"] = \"unknown\";\n})(Multiplicity = exports.Multiplicity || (exports.Multiplicity = {}));\n",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","module.exports = {\r\n\r\n  isArray: function(value) {\r\n    if (Array.isArray) {\r\n      return Array.isArray(value);\r\n    }\r\n    // fallback for older browsers like  IE 8\r\n    return Object.prototype.toString.call( value ) === '[object Array]';\r\n  }\r\n\r\n};\r\n","/*jslint node:true */\r\n\r\nvar xml2js = require('./xml2js');\r\nvar xml2json = require('./xml2json');\r\nvar js2xml = require('./js2xml');\r\nvar json2xml = require('./json2xml');\r\n\r\nmodule.exports = {\r\n  xml2js: xml2js,\r\n  xml2json: xml2json,\r\n  js2xml: js2xml,\r\n  json2xml: json2xml\r\n};\r\n","var helper = require('./options-helper');\nvar isArray = require('./array-helper').isArray;\n\nvar currentElement, currentElementName;\n\nfunction validateOptions(userOptions) {\n  var options = helper.copyOptions(userOptions);\n  helper.ensureFlagExists('ignoreDeclaration', options);\n  helper.ensureFlagExists('ignoreInstruction', options);\n  helper.ensureFlagExists('ignoreAttributes', options);\n  helper.ensureFlagExists('ignoreText', options);\n  helper.ensureFlagExists('ignoreComment', options);\n  helper.ensureFlagExists('ignoreCdata', options);\n  helper.ensureFlagExists('ignoreDoctype', options);\n  helper.ensureFlagExists('compact', options);\n  helper.ensureFlagExists('indentText', options);\n  helper.ensureFlagExists('indentCdata', options);\n  helper.ensureFlagExists('indentAttributes', options);\n  helper.ensureFlagExists('indentInstruction', options);\n  helper.ensureFlagExists('fullTagEmptyElement', options);\n  helper.ensureFlagExists('noQuotesForNativeAttributes', options);\n  helper.ensureSpacesExists(options);\n  if (typeof options.spaces === 'number') {\n    options.spaces = Array(options.spaces + 1).join(' ');\n  }\n  helper.ensureKeyExists('declaration', options);\n  helper.ensureKeyExists('instruction', options);\n  helper.ensureKeyExists('attributes', options);\n  helper.ensureKeyExists('text', options);\n  helper.ensureKeyExists('comment', options);\n  helper.ensureKeyExists('cdata', options);\n  helper.ensureKeyExists('doctype', options);\n  helper.ensureKeyExists('type', options);\n  helper.ensureKeyExists('name', options);\n  helper.ensureKeyExists('elements', options);\n  helper.checkFnExists('doctype', options);\n  helper.checkFnExists('instruction', options);\n  helper.checkFnExists('cdata', options);\n  helper.checkFnExists('comment', options);\n  helper.checkFnExists('text', options);\n  helper.checkFnExists('instructionName', options);\n  helper.checkFnExists('elementName', options);\n  helper.checkFnExists('attributeName', options);\n  helper.checkFnExists('attributeValue', options);\n  helper.checkFnExists('attributes', options);\n  helper.checkFnExists('fullTagEmptyElement', options);\n  return options;\n}\n\nfunction writeIndentation(options, depth, firstLine) {\n  return (!firstLine && options.spaces ? '\\n' : '') + Array(depth + 1).join(options.spaces);\n}\n\nfunction writeAttributes(attributes, options, depth) {\n  if (options.ignoreAttributes) {\n    return '';\n  }\n  if ('attributesFn' in options) {\n    attributes = options.attributesFn(attributes, currentElementName, currentElement);\n  }\n  var key, attr, attrName, quote, result = [];\n  for (key in attributes) {\n    if (attributes.hasOwnProperty(key) && attributes[key] !== null && attributes[key] !== undefined) {\n      quote = options.noQuotesForNativeAttributes && typeof attributes[key] !== 'string' ? '' : '\"';\n      attr = '' + attributes[key]; // ensure number and boolean are converted to String\n      attr = attr.replace(/\"/g, '&quot;');\n      attrName = 'attributeNameFn' in options ? options.attributeNameFn(key, attr, currentElementName, currentElement) : key;\n      result.push((options.spaces && options.indentAttributes? writeIndentation(options, depth+1, false) : ' '));\n      result.push(attrName + '=' + quote + ('attributeValueFn' in options ? options.attributeValueFn(attr, key, currentElementName, currentElement) : attr) + quote);\n    }\n  }\n  if (attributes && Object.keys(attributes).length && options.spaces && options.indentAttributes) {\n    result.push(writeIndentation(options, depth, false));\n  }\n  return result.join('');\n}\n\nfunction writeDeclaration(declaration, options, depth) {\n  currentElement = declaration;\n  currentElementName = 'xml';\n  return options.ignoreDeclaration ? '' :  '<?' + 'xml' + writeAttributes(declaration[options.attributesKey], options, depth) + '?>';\n}\n\nfunction writeInstruction(instruction, options, depth) {\n  if (options.ignoreInstruction) {\n    return '';\n  }\n  var key;\n  for (key in instruction) {\n    if (instruction.hasOwnProperty(key)) {\n      break;\n    }\n  }\n  var instructionName = 'instructionNameFn' in options ? options.instructionNameFn(key, instruction[key], currentElementName, currentElement) : key;\n  if (typeof instruction[key] === 'object') {\n    currentElement = instruction;\n    currentElementName = instructionName;\n    return '<?' + instructionName + writeAttributes(instruction[key][options.attributesKey], options, depth) + '?>';\n  } else {\n    var instructionValue = instruction[key] ? instruction[key] : '';\n    if ('instructionFn' in options) instructionValue = options.instructionFn(instructionValue, key, currentElementName, currentElement);\n    return '<?' + instructionName + (instructionValue ? ' ' + instructionValue : '') + '?>';\n  }\n}\n\nfunction writeComment(comment, options) {\n  return options.ignoreComment ? '' : '<!--' + ('commentFn' in options ? options.commentFn(comment, currentElementName, currentElement) : comment) + '-->';\n}\n\nfunction writeCdata(cdata, options) {\n  return options.ignoreCdata ? '' : '<![CDATA[' + ('cdataFn' in options ? options.cdataFn(cdata, currentElementName, currentElement) : cdata.replace(']]>', ']]]]><![CDATA[>')) + ']]>';\n}\n\nfunction writeDoctype(doctype, options) {\n  return options.ignoreDoctype ? '' : '<!DOCTYPE ' + ('doctypeFn' in options ? options.doctypeFn(doctype, currentElementName, currentElement) : doctype) + '>';\n}\n\nfunction writeText(text, options) {\n  if (options.ignoreText) return '';\n  text = '' + text; // ensure Number and Boolean are converted to String\n  text = text.replace(/&amp;/g, '&'); // desanitize to avoid double sanitization\n  text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return 'textFn' in options ? options.textFn(text, currentElementName, currentElement) : text;\n}\n\nfunction hasContent(element, options) {\n  var i;\n  if (element.elements && element.elements.length) {\n    for (i = 0; i < element.elements.length; ++i) {\n      switch (element.elements[i][options.typeKey]) {\n      case 'text':\n        if (options.indentText) {\n          return true;\n        }\n        break; // skip to next key\n      case 'cdata':\n        if (options.indentCdata) {\n          return true;\n        }\n        break; // skip to next key\n      case 'instruction':\n        if (options.indentInstruction) {\n          return true;\n        }\n        break; // skip to next key\n      case 'doctype':\n      case 'comment':\n      case 'element':\n        return true;\n      default:\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction writeElement(element, options, depth) {\n  currentElement = element;\n  currentElementName = element.name;\n  var xml = [], elementName = 'elementNameFn' in options ? options.elementNameFn(element.name, element) : element.name;\n  xml.push('<' + elementName);\n  if (element[options.attributesKey]) {\n    xml.push(writeAttributes(element[options.attributesKey], options, depth));\n  }\n  var withClosingTag = element[options.elementsKey] && element[options.elementsKey].length || element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve';\n  if (!withClosingTag) {\n    if ('fullTagEmptyElementFn' in options) {\n      withClosingTag = options.fullTagEmptyElementFn(element.name, element);\n    } else {\n      withClosingTag = options.fullTagEmptyElement;\n    }\n  }\n  if (withClosingTag) {\n    xml.push('>');\n    if (element[options.elementsKey] && element[options.elementsKey].length) {\n      xml.push(writeElements(element[options.elementsKey], options, depth + 1));\n      currentElement = element;\n      currentElementName = element.name;\n    }\n    xml.push(options.spaces && hasContent(element, options) ? '\\n' + Array(depth + 1).join(options.spaces) : '');\n    xml.push('</' + elementName + '>');\n  } else {\n    xml.push('/>');\n  }\n  return xml.join('');\n}\n\nfunction writeElements(elements, options, depth, firstLine) {\n  return elements.reduce(function (xml, element) {\n    var indent = writeIndentation(options, depth, firstLine && !xml);\n    switch (element.type) {\n    case 'element': return xml + indent + writeElement(element, options, depth);\n    case 'comment': return xml + indent + writeComment(element[options.commentKey], options);\n    case 'doctype': return xml + indent + writeDoctype(element[options.doctypeKey], options);\n    case 'cdata': return xml + (options.indentCdata ? indent : '') + writeCdata(element[options.cdataKey], options);\n    case 'text': return xml + (options.indentText ? indent : '') + writeText(element[options.textKey], options);\n    case 'instruction':\n      var instruction = {};\n      instruction[element[options.nameKey]] = element[options.attributesKey] ? element : element[options.instructionKey];\n      return xml + (options.indentInstruction ? indent : '') + writeInstruction(instruction, options, depth);\n    }\n  }, '');\n}\n\nfunction hasContentCompact(element, options, anyContent) {\n  var key;\n  for (key in element) {\n    if (element.hasOwnProperty(key)) {\n      switch (key) {\n      case options.parentKey:\n      case options.attributesKey:\n        break; // skip to next key\n      case options.textKey:\n        if (options.indentText || anyContent) {\n          return true;\n        }\n        break; // skip to next key\n      case options.cdataKey:\n        if (options.indentCdata || anyContent) {\n          return true;\n        }\n        break; // skip to next key\n      case options.instructionKey:\n        if (options.indentInstruction || anyContent) {\n          return true;\n        }\n        break; // skip to next key\n      case options.doctypeKey:\n      case options.commentKey:\n        return true;\n      default:\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction writeElementCompact(element, name, options, depth, indent) {\n  currentElement = element;\n  currentElementName = name;\n  var elementName = 'elementNameFn' in options ? options.elementNameFn(name, element) : name;\n  if (typeof element === 'undefined' || element === null || element === '') {\n    return 'fullTagEmptyElementFn' in options && options.fullTagEmptyElementFn(name, element) || options.fullTagEmptyElement ? '<' + elementName + '></' + elementName + '>' : '<' + elementName + '/>';\n  }\n  var xml = [];\n  if (name) {\n    xml.push('<' + elementName);\n    if (typeof element !== 'object') {\n      xml.push('>' + writeText(element,options) + '</' + elementName + '>');\n      return xml.join('');\n    }\n    if (element[options.attributesKey]) {\n      xml.push(writeAttributes(element[options.attributesKey], options, depth));\n    }\n    var withClosingTag = hasContentCompact(element, options, true) || element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve';\n    if (!withClosingTag) {\n      if ('fullTagEmptyElementFn' in options) {\n        withClosingTag = options.fullTagEmptyElementFn(name, element);\n      } else {\n        withClosingTag = options.fullTagEmptyElement;\n      }\n    }\n    if (withClosingTag) {\n      xml.push('>');\n    } else {\n      xml.push('/>');\n      return xml.join('');\n    }\n  }\n  xml.push(writeElementsCompact(element, options, depth + 1, false));\n  currentElement = element;\n  currentElementName = name;\n  if (name) {\n    xml.push((indent ? writeIndentation(options, depth, false) : '') + '</' + elementName + '>');\n  }\n  return xml.join('');\n}\n\nfunction writeElementsCompact(element, options, depth, firstLine) {\n  var i, key, nodes, xml = [];\n  for (key in element) {\n    if (element.hasOwnProperty(key)) {\n      nodes = isArray(element[key]) ? element[key] : [element[key]];\n      for (i = 0; i < nodes.length; ++i) {\n        switch (key) {\n        case options.declarationKey: xml.push(writeDeclaration(nodes[i], options, depth)); break;\n        case options.instructionKey: xml.push((options.indentInstruction ? writeIndentation(options, depth, firstLine) : '') + writeInstruction(nodes[i], options, depth)); break;\n        case options.attributesKey: case options.parentKey: break; // skip\n        case options.textKey: xml.push((options.indentText ? writeIndentation(options, depth, firstLine) : '') + writeText(nodes[i], options)); break;\n        case options.cdataKey: xml.push((options.indentCdata ? writeIndentation(options, depth, firstLine) : '') + writeCdata(nodes[i], options)); break;\n        case options.doctypeKey: xml.push(writeIndentation(options, depth, firstLine) + writeDoctype(nodes[i], options)); break;\n        case options.commentKey: xml.push(writeIndentation(options, depth, firstLine) + writeComment(nodes[i], options)); break;\n        default: xml.push(writeIndentation(options, depth, firstLine) + writeElementCompact(nodes[i], key, options, depth, hasContentCompact(nodes[i], options)));\n        }\n        firstLine = firstLine && !xml.length;\n      }\n    }\n  }\n  return xml.join('');\n}\n\nmodule.exports = function (js, options) {\n  options = validateOptions(options);\n  var xml = [];\n  currentElement = js;\n  currentElementName = '_root_';\n  if (options.compact) {\n    xml.push(writeElementsCompact(js, options, 0, true));\n  } else {\n    if (js[options.declarationKey]) {\n      xml.push(writeDeclaration(js[options.declarationKey], options, 0));\n    }\n    if (js[options.elementsKey] && js[options.elementsKey].length) {\n      xml.push(writeElements(js[options.elementsKey], options, 0, !xml.length));\n    }\n  }\n  return xml.join('');\n};\n","var js2xml = require('./js2xml.js');\r\n\r\nmodule.exports = function (json, options) {\r\n  if (json instanceof Buffer) {\r\n    json = json.toString();\r\n  }\r\n  var js = null;\r\n  if (typeof (json) === 'string') {\r\n    try {\r\n      js = JSON.parse(json);\r\n    } catch (e) {\r\n      throw new Error('The JSON structure is invalid');\r\n    }\r\n  } else {\r\n    js = json;\r\n  }\r\n  return js2xml(js, options);\r\n};\r\n","var isArray = require('./array-helper').isArray;\r\n\r\nmodule.exports = {\r\n\r\n  copyOptions: function (options) {\r\n    var key, copy = {};\r\n    for (key in options) {\r\n      if (options.hasOwnProperty(key)) {\r\n        copy[key] = options[key];\r\n      }\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  ensureFlagExists: function (item, options) {\r\n    if (!(item in options) || typeof options[item] !== 'boolean') {\r\n      options[item] = false;\r\n    }\r\n  },\r\n\r\n  ensureSpacesExists: function (options) {\r\n    if (!('spaces' in options) || (typeof options.spaces !== 'number' && typeof options.spaces !== 'string')) {\r\n      options.spaces = 0;\r\n    }\r\n  },\r\n\r\n  ensureAlwaysArrayExists: function (options) {\r\n    if (!('alwaysArray' in options) || (typeof options.alwaysArray !== 'boolean' && !isArray(options.alwaysArray))) {\r\n      options.alwaysArray = false;\r\n    }\r\n  },\r\n\r\n  ensureKeyExists: function (key, options) {\r\n    if (!(key + 'Key' in options) || typeof options[key + 'Key'] !== 'string') {\r\n      options[key + 'Key'] = options.compact ? '_' + key : key;\r\n    }\r\n  },\r\n\r\n  checkFnExists: function (key, options) {\r\n    return key + 'Fn' in options;\r\n  }\r\n\r\n};\r\n","var sax = require('sax');\r\nvar expat /*= require('node-expat');*/ = { on: function () { }, parse: function () { } };\r\nvar helper = require('./options-helper');\r\nvar isArray = require('./array-helper').isArray;\r\n\r\nvar options;\r\nvar pureJsParser = true;\r\nvar currentElement;\r\n\r\nfunction validateOptions(userOptions) {\r\n  options = helper.copyOptions(userOptions);\r\n  helper.ensureFlagExists('ignoreDeclaration', options);\r\n  helper.ensureFlagExists('ignoreInstruction', options);\r\n  helper.ensureFlagExists('ignoreAttributes', options);\r\n  helper.ensureFlagExists('ignoreText', options);\r\n  helper.ensureFlagExists('ignoreComment', options);\r\n  helper.ensureFlagExists('ignoreCdata', options);\r\n  helper.ensureFlagExists('ignoreDoctype', options);\r\n  helper.ensureFlagExists('compact', options);\r\n  helper.ensureFlagExists('alwaysChildren', options);\r\n  helper.ensureFlagExists('addParent', options);\r\n  helper.ensureFlagExists('trim', options);\r\n  helper.ensureFlagExists('nativeType', options);\r\n  helper.ensureFlagExists('nativeTypeAttributes', options);\r\n  helper.ensureFlagExists('sanitize', options);\r\n  helper.ensureFlagExists('instructionHasAttributes', options);\r\n  helper.ensureFlagExists('captureSpacesBetweenElements', options);\r\n  helper.ensureAlwaysArrayExists(options);\r\n  helper.ensureKeyExists('declaration', options);\r\n  helper.ensureKeyExists('instruction', options);\r\n  helper.ensureKeyExists('attributes', options);\r\n  helper.ensureKeyExists('text', options);\r\n  helper.ensureKeyExists('comment', options);\r\n  helper.ensureKeyExists('cdata', options);\r\n  helper.ensureKeyExists('doctype', options);\r\n  helper.ensureKeyExists('type', options);\r\n  helper.ensureKeyExists('name', options);\r\n  helper.ensureKeyExists('elements', options);\r\n  helper.ensureKeyExists('parent', options);\r\n  helper.checkFnExists('doctype', options);\r\n  helper.checkFnExists('instruction', options);\r\n  helper.checkFnExists('cdata', options);\r\n  helper.checkFnExists('comment', options);\r\n  helper.checkFnExists('text', options);\r\n  helper.checkFnExists('instructionName', options);\r\n  helper.checkFnExists('elementName', options);\r\n  helper.checkFnExists('attributeName', options);\r\n  helper.checkFnExists('attributeValue', options);\r\n  helper.checkFnExists('attributes', options);\r\n  return options;\r\n}\r\n\r\nfunction nativeType(value) {\r\n  var nValue = Number(value);\r\n  if (!isNaN(nValue)) {\r\n    return nValue;\r\n  }\r\n  var bValue = value.toLowerCase();\r\n  if (bValue === 'true') {\r\n    return true;\r\n  } else if (bValue === 'false') {\r\n    return false;\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction addField(type, value) {\r\n  var key;\r\n  if (options.compact) {\r\n    if (\r\n      !currentElement[options[type + 'Key']] &&\r\n      (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(options[type + 'Key']) !== -1 : options.alwaysArray)\r\n    ) {\r\n      currentElement[options[type + 'Key']] = [];\r\n    }\r\n    if (currentElement[options[type + 'Key']] && !isArray(currentElement[options[type + 'Key']])) {\r\n      currentElement[options[type + 'Key']] = [currentElement[options[type + 'Key']]];\r\n    }\r\n    if (type + 'Fn' in options && typeof value === 'string') {\r\n      value = options[type + 'Fn'](value, currentElement);\r\n    }\r\n    if (type === 'instruction' && ('instructionFn' in options || 'instructionNameFn' in options)) {\r\n      for (key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          if ('instructionFn' in options) {\r\n            value[key] = options.instructionFn(value[key], key, currentElement);\r\n          } else {\r\n            var temp = value[key];\r\n            delete value[key];\r\n            value[options.instructionNameFn(key, temp, currentElement)] = temp;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (isArray(currentElement[options[type + 'Key']])) {\r\n      currentElement[options[type + 'Key']].push(value);\r\n    } else {\r\n      currentElement[options[type + 'Key']] = value;\r\n    }\r\n  } else {\r\n    if (!currentElement[options.elementsKey]) {\r\n      currentElement[options.elementsKey] = [];\r\n    }\r\n    var element = {};\r\n    element[options.typeKey] = type;\r\n    if (type === 'instruction') {\r\n      for (key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          break;\r\n        }\r\n      }\r\n      element[options.nameKey] = 'instructionNameFn' in options ? options.instructionNameFn(key, value, currentElement) : key;\r\n      if (options.instructionHasAttributes) {\r\n        element[options.attributesKey] = value[key][options.attributesKey];\r\n        if ('instructionFn' in options) {\r\n          element[options.attributesKey] = options.instructionFn(element[options.attributesKey], key, currentElement);\r\n        }\r\n      } else {\r\n        if ('instructionFn' in options) {\r\n          value[key] = options.instructionFn(value[key], key, currentElement);\r\n        }\r\n        element[options.instructionKey] = value[key];\r\n      }\r\n    } else {\r\n      if (type + 'Fn' in options) {\r\n        value = options[type + 'Fn'](value, currentElement);\r\n      }\r\n      element[options[type + 'Key']] = value;\r\n    }\r\n    if (options.addParent) {\r\n      element[options.parentKey] = currentElement;\r\n    }\r\n    currentElement[options.elementsKey].push(element);\r\n  }\r\n}\r\n\r\nfunction manipulateAttributes(attributes) {\r\n  if ('attributesFn' in options && attributes) {\r\n    attributes = options.attributesFn(attributes, currentElement);\r\n  }\r\n  if ((options.trim || 'attributeValueFn' in options || 'attributeNameFn' in options || options.nativeTypeAttributes) && attributes) {\r\n    var key;\r\n    for (key in attributes) {\r\n      if (attributes.hasOwnProperty(key)) {\r\n        if (options.trim) attributes[key] = attributes[key].trim();\r\n        if (options.nativeTypeAttributes) {\r\n          attributes[key] = nativeType(attributes[key]);\r\n        }\r\n        if ('attributeValueFn' in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement);\r\n        if ('attributeNameFn' in options) {\r\n          var temp = attributes[key];\r\n          delete attributes[key];\r\n          attributes[options.attributeNameFn(key, attributes[key], currentElement)] = temp;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return attributes;\r\n}\r\n\r\nfunction onInstruction(instruction) {\r\n  var attributes = {};\r\n  if (instruction.body && (instruction.name.toLowerCase() === 'xml' || options.instructionHasAttributes)) {\r\n    var attrsRegExp = /([\\w:-]+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\w+))\\s*/g;\r\n    var match;\r\n    while ((match = attrsRegExp.exec(instruction.body)) !== null) {\r\n      attributes[match[1]] = match[2] || match[3] || match[4];\r\n    }\r\n    attributes = manipulateAttributes(attributes);\r\n  }\r\n  if (instruction.name.toLowerCase() === 'xml') {\r\n    if (options.ignoreDeclaration) {\r\n      return;\r\n    }\r\n    currentElement[options.declarationKey] = {};\r\n    if (Object.keys(attributes).length) {\r\n      currentElement[options.declarationKey][options.attributesKey] = attributes;\r\n    }\r\n    if (options.addParent) {\r\n      currentElement[options.declarationKey][options.parentKey] = currentElement;\r\n    }\r\n  } else {\r\n    if (options.ignoreInstruction) {\r\n      return;\r\n    }\r\n    if (options.trim) {\r\n      instruction.body = instruction.body.trim();\r\n    }\r\n    var value = {};\r\n    if (options.instructionHasAttributes && Object.keys(attributes).length) {\r\n      value[instruction.name] = {};\r\n      value[instruction.name][options.attributesKey] = attributes;\r\n    } else {\r\n      value[instruction.name] = instruction.body;\r\n    }\r\n    addField('instruction', value);\r\n  }\r\n}\r\n\r\nfunction onStartElement(name, attributes) {\r\n  var element;\r\n  if (typeof name === 'object') {\r\n    attributes = name.attributes;\r\n    name = name.name;\r\n  }\r\n  attributes = manipulateAttributes(attributes);\r\n  if ('elementNameFn' in options) {\r\n    name = options.elementNameFn(name, currentElement);\r\n  }\r\n  if (options.compact) {\r\n    element = {};\r\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\r\n      element[options.attributesKey] = {};\r\n      var key;\r\n      for (key in attributes) {\r\n        if (attributes.hasOwnProperty(key)) {\r\n          element[options.attributesKey][key] = attributes[key];\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      !(name in currentElement) &&\r\n      (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)\r\n    ) {\r\n      currentElement[name] = [];\r\n    }\r\n    if (currentElement[name] && !isArray(currentElement[name])) {\r\n      currentElement[name] = [currentElement[name]];\r\n    }\r\n    if (isArray(currentElement[name])) {\r\n      currentElement[name].push(element);\r\n    } else {\r\n      currentElement[name] = element;\r\n    }\r\n  } else {\r\n    if (!currentElement[options.elementsKey]) {\r\n      currentElement[options.elementsKey] = [];\r\n    }\r\n    element = {};\r\n    element[options.typeKey] = 'element';\r\n    element[options.nameKey] = name;\r\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\r\n      element[options.attributesKey] = attributes;\r\n    }\r\n    if (options.alwaysChildren) {\r\n      element[options.elementsKey] = [];\r\n    }\r\n    currentElement[options.elementsKey].push(element);\r\n  }\r\n  element[options.parentKey] = currentElement; // will be deleted in onEndElement() if !options.addParent\r\n  currentElement = element;\r\n}\r\n\r\nfunction onText(text) {\r\n  if (options.ignoreText) {\r\n    return;\r\n  }\r\n  if (!text.trim() && !options.captureSpacesBetweenElements) {\r\n    return;\r\n  }\r\n  if (options.trim) {\r\n    text = text.trim();\r\n  }\r\n  if (options.nativeType) {\r\n    text = nativeType(text);\r\n  }\r\n  if (options.sanitize) {\r\n    text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n  addField('text', text);\r\n}\r\n\r\nfunction onComment(comment) {\r\n  if (options.ignoreComment) {\r\n    return;\r\n  }\r\n  if (options.trim) {\r\n    comment = comment.trim();\r\n  }\r\n  addField('comment', comment);\r\n}\r\n\r\nfunction onEndElement(name) {\r\n  var parentElement = currentElement[options.parentKey];\r\n  if (!options.addParent) {\r\n    delete currentElement[options.parentKey];\r\n  }\r\n  currentElement = parentElement;\r\n}\r\n\r\nfunction onCdata(cdata) {\r\n  if (options.ignoreCdata) {\r\n    return;\r\n  }\r\n  if (options.trim) {\r\n    cdata = cdata.trim();\r\n  }\r\n  addField('cdata', cdata);\r\n}\r\n\r\nfunction onDoctype(doctype) {\r\n  if (options.ignoreDoctype) {\r\n    return;\r\n  }\r\n  doctype = doctype.replace(/^ /, '');\r\n  if (options.trim) {\r\n    doctype = doctype.trim();\r\n  }\r\n  addField('doctype', doctype);\r\n}\r\n\r\nfunction onError(error) {\r\n  error.note = error; //console.error(error);\r\n}\r\n\r\nmodule.exports = function (xml, userOptions) {\r\n\r\n  var parser = pureJsParser ? sax.parser(true, {}) : parser = new expat.Parser('UTF-8');\r\n  var result = {};\r\n  currentElement = result;\r\n\r\n  options = validateOptions(userOptions);\r\n\r\n  if (pureJsParser) {\r\n    parser.opt = {strictEntities: true};\r\n    parser.onopentag = onStartElement;\r\n    parser.ontext = onText;\r\n    parser.oncomment = onComment;\r\n    parser.onclosetag = onEndElement;\r\n    parser.onerror = onError;\r\n    parser.oncdata = onCdata;\r\n    parser.ondoctype = onDoctype;\r\n    parser.onprocessinginstruction = onInstruction;\r\n  } else {\r\n    parser.on('startElement', onStartElement);\r\n    parser.on('text', onText);\r\n    parser.on('comment', onComment);\r\n    parser.on('endElement', onEndElement);\r\n    parser.on('error', onError);\r\n    //parser.on('startCdata', onStartCdata);\r\n    //parser.on('endCdata', onEndCdata);\r\n    //parser.on('entityDecl', onEntityDecl);\r\n  }\r\n\r\n  if (pureJsParser) {\r\n    parser.write(xml).close();\r\n  } else {\r\n    if (!parser.parse(xml)) {\r\n      throw new Error('XML parsing error: ' + parser.getError());\r\n    }\r\n  }\r\n\r\n  if (result[options.elementsKey]) {\r\n    var temp = result[options.elementsKey];\r\n    delete result[options.elementsKey];\r\n    result[options.elementsKey] = temp;\r\n    delete result.text;\r\n  }\r\n\r\n  return result;\r\n\r\n};\r\n","var helper = require('./options-helper');\r\nvar xml2js = require('./xml2js');\r\n\r\nfunction validateOptions (userOptions) {\r\n  var options = helper.copyOptions(userOptions);\r\n  helper.ensureSpacesExists(options);\r\n  return options;\r\n}\r\n\r\nmodule.exports = function(xml, userOptions) {\r\n  var options, js, json, parentKey;\r\n  options = validateOptions(userOptions);\r\n  js = xml2js(xml, options);\r\n  parentKey = 'compact' in options && options.compact ? '_parent' : 'parent';\r\n  // parentKey = ptions.compact ? '_parent' : 'parent'; // consider this\r\n  if ('addParent' in options && options.addParent) {\r\n    json = JSON.stringify(js, function (k, v) { return k === parentKey? '_' : v; }, options.spaces);\r\n  } else {\r\n    json = JSON.stringify(js, null, options.spaces);\r\n  }\r\n  return json.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\r\n};\r\n","import { createMockMiddleware } from './middleware';\nimport * as path from 'path';\nimport Router from 'router';\nimport { resolvePath } from './router/utils/fileLoader';\nexport type { MockDataContributor } from './router/data/functionBasedMockData';\n/**\n * @param root0\n * @param root0.resources\n * @param root0.options\n */\nfunction FEMiddleware({ resources, options }): Promise<Router> {\n    // Basepath will be the webapp folder\n    const basePath = resources ? path.resolve(resources.rootProject._readers[0]._fsBasePath, '..') : '';\n    const serverConfig = options.configuration;\n    if (serverConfig.mockFolder) {\n        serverConfig.mockFolder = path.resolve(basePath, serverConfig.mockFolder);\n    } else {\n        if (serverConfig.service.metadataXmlPath) {\n            serverConfig.service.metadataXmlPath = resolvePath(basePath, serverConfig.service.metadataXmlPath);\n        }\n        if (serverConfig.service.metadataCdsPath) {\n            serverConfig.service.metadataCdsPath = resolvePath(basePath, serverConfig.service.metadataCdsPath);\n        }\n        serverConfig.service.mockdataRootPath = resolvePath(basePath, serverConfig.service.mockdataRootPath);\n    }\n    return createMockMiddleware(serverConfig);\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport = FEMiddleware;\n","import { Request, Response } from 'express';\nimport Router from 'router';\nimport { getLogger } from '@ui5/logger';\nimport { oDataHandler } from './router/odata';\nimport { FolderBasedServerConfig, ServerConfig } from './api';\nimport { catalogService } from './router/catalog';\nimport * as fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nimport { isInBrowser } from './router/utils/fileLoader';\n\n/**\n * @param req\n * @param res\n * @param next\n */\nfunction disableCache(req, res, next): void {\n    res.setHeader('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n    res.setHeader('Expires', '-1');\n    res.setHeader('Pragma', 'no-cache');\n    next();\n}\n\n/**\n * @param str\n */\nfunction encode(str) {\n    return str.replace(/'/g, '%27');\n}\n\n/**\n * @param serverConfig\n */\nfunction isFolderBasedConfig(serverConfig: ServerConfig): serverConfig is FolderBasedServerConfig {\n    return (serverConfig as FolderBasedServerConfig).mockFolder !== undefined;\n}\n\n/**\n * @param config\n */\nexport async function createMockMiddleware(config: ServerConfig): Promise<Router> {\n    const app: Router = Router();\n    const log = getLogger('server:ux-fe-mockserver');\n    app.use((req: Request, res: Response, next) => {\n        next();\n    });\n    app.use(disableCache);\n    if (config.watch) {\n        log.info(`Mockserver is running in watch mode`);\n    }\n\n    if (isFolderBasedConfig(config)) {\n        let mockConfig;\n        if (fs.existsSync(path.join(config.mockFolder, 'config.js'))) {\n            mockConfig = require(/* webpackIgnore: true */ path.join(config.mockFolder, 'config.js'));\n        } else {\n            mockConfig = JSON.parse(fs.readFileSync(path.join(config.mockFolder, 'config.json')).toString('utf-8'));\n        }\n        await Promise.all(\n            mockConfig.map(async (mockConfig) => {\n                const subConfig: ServerConfig = {\n                    service: mockConfig\n                };\n                if (subConfig.service.metadataXmlPath) {\n                    subConfig.service.metadataXmlPath = path.resolve(\n                        config.mockFolder,\n                        subConfig.service.metadataXmlPath\n                    );\n                }\n                if (subConfig.service.metadataCdsPath) {\n                    subConfig.service.metadataCdsPath = path.resolve(\n                        config.mockFolder,\n                        subConfig.service.metadataCdsPath\n                    );\n                }\n\n                subConfig.service.mockdataRootPath = path.resolve(\n                    config.mockFolder,\n                    subConfig.service.mockdataRootPath\n                );\n                if (!subConfig.service.urlBasePath) {\n                    subConfig.service.urlBasePath = '';\n                }\n                try {\n                    const oDataHandlerInstance = await oDataHandler(subConfig);\n                    if (config.contextBasedIsolation) {\n                        const subRouter: Router = Router();\n                        subRouter.use(\n                            `${subConfig.service.urlBasePath}/${subConfig.service.name}`,\n                            oDataHandlerInstance\n                        );\n                        subRouter.use(\n                            `${subConfig.service.urlBasePath}/${encode(subConfig.service.name)}`,\n                            oDataHandlerInstance\n                        );\n                        app.use(/^\\/tenant-(\\d{1,3})/, subRouter);\n                    }\n                    if (config.debug) {\n                        log.info(`Mockdata location: ${subConfig.service.mockdataRootPath}`);\n                        log.info(`Service path: ${subConfig.service.urlBasePath}/${subConfig.service.name}`);\n                    }\n                    app.use(`${subConfig.service.urlBasePath}/${subConfig.service.name}`, oDataHandlerInstance);\n                    app.use(`${subConfig.service.urlBasePath}/${encode(subConfig.service.name)}`, oDataHandlerInstance);\n\n                    app.use('/sap/opu/odata/IWFND/CATALOGSERVICE;v=2', catalogService(subConfig));\n                } catch (e) {\n                    if (config.debug) {\n                        console.error(e);\n                    }\n                    console.log('Failed to start ' + subConfig.service.urlBasePath + '/' + subConfig.service.name);\n                }\n            })\n        );\n    } else {\n        if (!config.service.urlBasePath) {\n            config.service.urlBasePath = '';\n        }\n        log.info(`Mockdata location: ${config.service.mockdataRootPath}`);\n        log.info(`Service path: ${config.service.urlBasePath}/${config.service.name}`);\n\n        // eslint-disable-next-line prefer-const\n        let serverInit;\n        if (isInBrowser()) {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const nise = require('nise');\n            const fakeServer = nise.fakeServer;\n            const escapePath = function (sPath) {\n                // eslint-disable-next-line\n                return sPath.replace(/[\\\\\\/\\[\\]\\{\\}\\(\\)\\-\\*\\+\\?\\.\\^\\$\\|]/g, '\\\\$&');\n            };\n\n            nise.fakeXhr.FakeXMLHttpRequest.useFilters = true;\n\n            const mockServer = fakeServer.create();\n            mockServer.autoRespond = true;\n            const serverhook = new RegExp(escapePath(config.service.urlBasePath) + '.*');\n            nise.fakeXhr.FakeXMLHttpRequest.addFilter((method, url /*async, username, password*/) => {\n                return !serverhook.test(url);\n            });\n\n            mockServer.respondWith(serverhook, async function (xhr /*, id*/) {\n                const parsedUrl = url.parse(xhr.url);\n                const req = {\n                    url: parsedUrl.href,\n                    method: xhr.method,\n                    body: xhr.requestBody,\n                    headers: xhr.requestHeaders\n                };\n                if (req.headers['Content-Type'] === 'multipart/mixed;charset=utf-8') {\n                    const oBoundaryRegex = new RegExp('batch_[a-z0-9-]*');\n                    const sBoundary = oBoundaryRegex.exec(req.body)[0];\n                    req.headers['Content-Type'] = 'multipart/mixed; boundary=' + sBoundary;\n                }\n                Object.keys(req.headers).forEach((headerText) => {\n                    req.headers[headerText.toLowerCase()] = req.headers[headerText];\n                });\n                const responseHeaders = {};\n                let responseStatusCode = 200;\n                let responseContentType;\n                let responseBuffer = '';\n                const res = {\n                    header: (headerName, headerValue) => {\n                        //responseHeaders[headerName] = headerValue;\n                        responseHeaders[headerName.toLowerCase()] = headerValue;\n                    },\n                    getHeader: (headerName) => {\n                        return responseHeaders[headerName];\n                    },\n                    setHeader: (headerName, headerValue) => {\n                        res.header(headerName, headerValue);\n                    },\n                    status: (statusCode) => {\n                        responseStatusCode = statusCode;\n                    },\n                    type: (contentType) => {\n                        responseContentType = contentType;\n                        return res;\n                    },\n                    contentType: (contentType) => {\n                        responseContentType = contentType;\n                        res.header('Content-Type', responseContentType);\n                        return res;\n                    },\n                    write: (data: string) => {\n                        responseBuffer += data;\n                    },\n                    end: () => {\n                        res.send(responseBuffer);\n                    },\n                    send: (data: string) => {\n                        xhr.readyState = 1;\n                        if (typeof data === 'object') {\n                            data = JSON.stringify(data);\n                        }\n                        xhr.respond(responseStatusCode, responseHeaders, data);\n                    }\n                };\n                xhr.readyState = 4;\n                await serverInit;\n                app(req, res, function (arg1 /*arg2, arg3*/) {\n                    console.error(arg1);\n                });\n            });\n            app.mockServer = mockServer;\n        }\n\n        serverInit = oDataHandler(config).then((oDataHandlerInstance) => {\n            if (config.contextBasedIsolation) {\n                const subRouter: Router = Router();\n                subRouter.use(`${config.service.urlBasePath}/${config.service.name}`, oDataHandlerInstance);\n                subRouter.use(`${config.service.urlBasePath}/${encode(config.service.name)}`, oDataHandlerInstance);\n                app.use(/^\\/tenant-(\\d{1,3})/, subRouter);\n            }\n            app.use(`${config.service.urlBasePath}/${config.service.name}`, oDataHandlerInstance);\n            app.use(`${config.service.urlBasePath}/${encode(config.service.name)}`, oDataHandlerInstance);\n\n            app.use('/sap/opu/odata/IWFND/CATALOGSERVICE;v=2', catalogService(config));\n            return true;\n        });\n        app.readyPromise = serverInit;\n    }\n\n    return app;\n}\n","/**\n *\n */\nexport class AppHttp {\n    type: string;\n    rawData: object;\n    contentId: any;\n    request: any;\n    response: any;\n\n    /**\n     * @param {string} url\n     * @param {Object} headers\n     * @param {Array} payload\n     * @class\n     */\n    public constructor(url, headers, payload) {\n        this.type = 'app';\n        this.rawData = {\n            url: url,\n            headers: headers,\n            payload: payload\n        };\n\n        this.contentId = undefined;\n        this.request = undefined;\n        this.response = undefined;\n    }\n\n    /**\n     * @param context\n     * @param response\n     */\n    public write(context, response) {\n        response.write('Content-Type: application/http\\r\\n');\n        response.write('Content-Transfer-Encoding: binary\\r\\n');\n        if (this.contentId) {\n            response.write('Content-ID: ' + this.contentId.id + '\\r\\n');\n        }\n        response.write('\\r\\n'); //end of header\n\n        this.response.writeToBatchResponse(response, this.contentId);\n    }\n}\n","import { createBoundary } from '../keyGenerator';\n\n/**\n *\n */\nexport class Batch {\n    type: any;\n    isChangeSet: boolean;\n    changeSetErrorResponse: any;\n    parts: any;\n\n    /**\n     * @param type\n     */\n    public constructor(type) {\n        this.type = type;\n        this.isChangeSet = type === 'changeset';\n        if (this.isChangeSet) {\n            this.changeSetErrorResponse = null;\n        }\n        this.parts = [];\n    }\n\n    /**\n     * @param context\n     * @param response\n     */\n    public write(context, response) {\n        if (this.changeSetErrorResponse) {\n            //if an error in the changeset occured then only the response of this error is returned\n            response.statusCode = 200; //TODO check responce\n            response.write('Content-Type: application/http\\r\\n');\n            response.write('Content-Transfer-Encoding: binary\\r\\n');\n            response.write('\\r\\n'); //end of header\n\n            this.changeSetErrorResponse.writeToBatchResponse(response);\n        } else {\n            response.statusCode = 200;\n            const boundary = 'batch_' + createBoundary(context);\n            if (this.isChangeSet) {\n                response.write('Content-Type: multipart/mixed; boundary=' + boundary + '\\r\\n');\n                response.write('\\r\\n'); //end of header\n            } else {\n                response.setHeader('Content-Type', 'multipart/mixed; boundary=' + boundary);\n            }\n\n            response.write('--' + boundary + '\\r\\n');\n            for (let i = 0; i < this.parts.length; i++) {\n                if (i !== 0) {\n                    response.write('\\r\\n--' + boundary + '\\r\\n');\n                }\n                this.parts[i].write(context, response);\n            }\n            response.write('\\r\\n--' + boundary + '--\\r\\n');\n        }\n    }\n}\n","/**\n * @param input\n */\nfunction split(input) {\n    const LF = '\\n';\n    const CRLF = '\\r\\n';\n    const a = [];\n\n    let pL = 0;\n    let p1 = input.indexOf(CRLF, pL);\n    let p2 = input.indexOf(LF, pL);\n\n    while (p1 !== -1 || p2 !== -1) {\n        if (p1 !== -1 && p1 <= p2) {\n            a.push(input.substring(pL, p1));\n            pL = p1 + 2;\n        } else {\n            a.push(input.substring(pL, p2));\n            pL = p2 + 1;\n        }\n        p1 = input.indexOf(CRLF, pL);\n        p2 = input.indexOf(LF, pL);\n    }\n    if (pL < input.length) {\n        a.push(input.substring(pL));\n    }\n    return a;\n}\n\n/**\n *\n */\nexport class BatchContent {\n    type: number;\n    stringData: string;\n    stringSplit: any;\n    pos: number;\n\n    /**\n     * @param data\n     */\n    public constructor(data) {\n        if (typeof data === 'string') {\n            this.type = 0;\n            this.stringData = data;\n            this.stringSplit = split(data);\n            this.pos = 0;\n        } else {\n            throw new Error('Only string allowed for batch parser');\n        }\n    }\n\n    /**\n     *\n     */\n    public lookLine(): string {\n        return this.stringSplit[this.pos];\n    }\n\n    /**\n     *\n     */\n    public readLine(): string {\n        return this.stringSplit[this.pos++];\n    }\n\n    public inc(): void {\n        this.pos++;\n    }\n}\n","import { BatchContent } from './batchContent';\nimport { Batch } from './batch';\nimport { AppHttp } from './appHttp';\n\n/**\n * @param headerValue\n */\nexport function getBoundary(headerValue) {\n    const l = headerValue.split(';');\n\n    for (let i = 0; i < l.length; i++) {\n        const ll = l[i].split('=');\n        if (ll[0].trim() === 'boundary') {\n            return ll[1];\n        }\n    }\n}\n\n/**\n * @param line\n */\nfunction readHeader(line) {\n    const colPos = line.indexOf(':');\n    if (colPos === -1) {\n        throw new Error('Invalid header \"content-type\" in batch part');\n    }\n\n    const s0 = line.substr(0, colPos);\n    const s1 = line.substr(colPos + 1);\n    return {\n        name: s0.toLowerCase(),\n        value: s1.trim()\n    };\n}\n\n/**\n * @param batchContent\n * @param boundary\n */\nfunction readAppHttp(batchContent, boundary) {\n    const headers = {};\n    const payload = [];\n\n    let state = 0; //read url\n    const url = batchContent.readLine();\n\n    state = 1; //read header\n    let line = batchContent.lookLine();\n\n    while (line !== null && line !== undefined && line.indexOf(boundary) !== 0) {\n        if (state === 1) {\n            if (line.length === 0) {\n                state = 2; //read body\n                batchContent.inc();\n            } else {\n                const h = readHeader(line);\n                headers[h.name] = h.value;\n                batchContent.inc();\n            }\n        } else if (state === 2) {\n            payload.push(line);\n            batchContent.inc();\n        }\n        line = batchContent.lookLine();\n    }\n    if (line === undefined) {\n        throw new Error('Invalid boundary while parsing batch request. Expect boundary ' + boundary);\n    }\n\n    return new AppHttp(url, headers, payload);\n}\n\n/**\n * @param batchContent\n * @param boundary\n */\nfunction parsePart(batchContent, boundary) {\n    const boundaryNext = boundary;\n    const boundaryEnd = boundary + '--';\n    const headers = {};\n    let content;\n\n    let state = 1; //read header\n    let line = batchContent.lookLine();\n\n    while (line !== null && line !== undefined && line !== boundaryNext && line !== boundaryEnd) {\n        if (state === 1) {\n            if (line.length === 0) {\n                state = 2; //read body\n                batchContent.inc();\n            } else {\n                const h = readHeader(line);\n                headers[h.name] = h.value;\n                batchContent.inc();\n            }\n        } else if (state === 2) {\n            if (!headers['content-type']) {\n                throw new Error('Missing header \"content-type\" in batch part');\n            } else if (headers['content-type'] === 'application/http') {\n                content = readAppHttp(batchContent, boundary);\n                if (headers['content-id']) {\n                    content.contentId = { id: headers['content-id'] };\n                }\n            } else if (headers['content-type'].indexOf('multipart/mixed;') > -1) {\n                const changeSetBoundary = exports.getBoundary(headers['content-type']);\n                content = parseBatch(batchContent, changeSetBoundary, 'changeset');\n            } else {\n                //TODO not supported\n            }\n        }\n        line = batchContent.lookLine();\n    }\n    if (line === undefined) {\n        throw new Error('Invalid boundary while parsing batch request. Expect boundary ' + boundary);\n    }\n\n    return content;\n}\n\n/**\n * @param content\n * @param boundary\n * @param type\n */\nfunction parseBatch(content, boundary, type) {\n    const boundaryNext = '--' + boundary;\n    const boundaryEnd = '--' + boundary + '--';\n\n    const batch = new Batch(type);\n\n    let part;\n\n    let line = content.readLine();\n    while (line !== null && line !== undefined && line !== boundaryNext) {\n        //read lines before first boundary\n        line = content.readLine();\n    }\n    if (line === undefined) {\n        throw new Error('Invalid boundary while parsing batch request');\n    }\n    //line is now read boundary\n    line = content.lookLine(); //read line behind\n\n    while (line !== null && line !== undefined && line !== boundaryEnd) {\n        part = parsePart(content, boundaryNext);\n        batch.parts.push(part);\n        line = content.lookLine(); //now on boundary\n        if (line === boundaryNext) {\n            line = content.readLine(); //consume boundaryNext\n        }\n    }\n\n    content.readLine(); //consume boundaryEnd\n    line = content.lookLine(); //read line behind\n    while (line !== null && line !== undefined && line.length === 0) {\n        //read empty lines after first boundaryend\n        content.readLine();\n        line = content.lookLine();\n    }\n\n    return batch;\n}\n\n/**\n * @param payload\n * @param boundary\n */\nexport function convertBatch(payload, boundary) {\n    return parseBatch(new BatchContent(payload), boundary, 'batch');\n}\n","import { raw } from 'body-parser';\nimport { Request } from 'express';\n\nconst clone = (obj: object): object => {\n    return JSON.parse(JSON.stringify(obj));\n};\n\nconst createUrlData = (request): object => {\n    const protocol = request.connection && request.connection.encrypted ? 'https' : 'http';\n\n    return {\n        host: request.headers['x-forwarded-host'] || request.headers.host,\n        proto: request.headers['x-forwarded-proto'] || request.protocol || protocol,\n        path: request.headers['x-forwarded-path'] || request.url,\n        forwarded: !!request.headers['x-forwarded-path'],\n        baseUrl: request.baseUrl\n    };\n};\n\n/**\n * @param originalRequest\n * @param uriPrefix\n */\nexport function createRequest(originalRequest: Request, uriPrefix: string): any {\n    let request: any = {\n        headers: {}\n    };\n\n    if (originalRequest) {\n        request = {\n            httpVersion: originalRequest.httpVersion,\n            headers: clone(originalRequest.headers),\n            method: originalRequest.method,\n            url: originalRequest.url,\n            urlData: createUrlData(originalRequest),\n            baseUrl: uriPrefix || originalRequest.baseUrl || ''\n        };\n    }\n\n    if (originalRequest.body) {\n        request.body = originalRequest.body;\n    }\n\n    request.getBodyAsString = (cb) => {\n        if (request.body) {\n            if (request.body instanceof Buffer) {\n                return cb(request.body.toString('utf8'));\n            } else {\n                return cb(request.body);\n            }\n        } else if (originalRequest.body) {\n            return cb(originalRequest.body);\n        } else {\n            const parser = raw({ type: '*/*' });\n\n            parser(originalRequest, null, function next(err) {\n                if (err) {\n                    throw new Error('Error while parsing http content');\n                }\n                const body = originalRequest.body;\n                return cb(body.toString('utf8'));\n            });\n        }\n    };\n\n    return request;\n}\n\n/**\n * @param appHttp\n * @param options\n */\nexport function createRequestFromAppHttp(appHttp, options) {\n    const appData = appHttp.rawData;\n\n    const s = appData.url.split(' ');\n    if (s.length !== 3) {\n        throw new Error('Invalid URI format inside batch request.');\n    }\n    const method = s[0];\n    let uri = s[1];\n    const version = s[2];\n\n    const body = appData.payload.join('\\r\\n');\n\n    if (uri.substr(0, 1) !== '/') {\n        uri = '/' + uri;\n    }\n\n    const request = {\n        httpVersion: version,\n        headers: clone(appData.headers),\n        method: method,\n        url: uri,\n        urlData: undefined,\n        getBodyAsString: undefined,\n        body: body\n    };\n\n    request.urlData = createUrlData(request);\n\n    if (options) {\n        Object.assign(request, options);\n    }\n\n    request.getBodyAsString = (cb) => {\n        return cb(request.body);\n    };\n\n    return request;\n}\n","import * as http from 'http';\n\n/**\n *\n */\nexport class SimpleResponse {\n    statusCode: number = null;\n    headers: object = {};\n    data = '';\n\n    /**\n     * @param code\n     * @param headers\n     */\n    public writeHead(code, headers): void {\n        this.statusCode = code;\n        Object.assign(this.headers, headers);\n    }\n\n    /**\n     * @param name\n     * @param value\n     */\n    public setHeader(name, value): void {\n        this.headers[name] = value;\n    }\n\n    /**\n     * @param code\n     */\n    public status(code): SimpleResponse {\n        this.statusCode = code;\n        return this;\n    }\n\n    /**\n     * @param data\n     */\n    public write(data): SimpleResponse {\n        this.data += data;\n        return this;\n    }\n\n    public end(): void {\n        // nothing to do\n    }\n\n    /**\n     * @param response\n     */\n    public writeToBatchResponse(response /*, contentId*/): void {\n        let value;\n        const headers = this.headers;\n        response.write('HTTP/1.1 ' + this.statusCode + ' ' + http.STATUS_CODES['' + this.statusCode] + '\\r\\n');\n\n        Object.keys(headers).forEach(function (key) {\n            value = headers[key];\n            response.write(key + ': ' + value + '\\r\\n');\n        });\n\n        response.write('\\r\\n'); // end of header\n        response.write(this.data);\n        if (this.data.length > 0) {\n            response.write('\\r\\n'); //as used in OData_Specification_V2.0 batch samples\n        }\n    }\n\n    /**\n     * @param res\n     */\n    public writeToResponse(res): void {\n        res.statusCode = this.statusCode;\n        Object.keys(this.headers).forEach((headerName) => {\n            res.setHeader(headerName, this.headers[headerName]);\n        });\n        if (this.data.length > 0) {\n            res.send(JSON.parse(this.data));\n        } else {\n            res.send(this.data);\n        }\n    }\n}\n\n/**\n *\n */\nexport function createResponse(): SimpleResponse {\n    return new SimpleResponse();\n}\n","import { Request, Response } from 'express';\nimport { RequestHandler } from 'express-serve-static-core';\nimport { createBoundary } from './keyGenerator';\nimport { createRequest } from './http/simpleHttpRequest';\nimport { getBoundary, convertBatch } from './content/batchParser';\nimport { ODataMetadata } from '../data/metadata';\nimport { DataAccess } from '../data/dataAccess';\nimport { ODataRequest } from '../request/odataRequest';\nimport { ODataV2Request } from '../request/odataV2Request';\nimport { ODataV4Request } from '../request/odataV4Request';\nimport { ServerConfig } from '../../api';\n\n/**\n * Simplified/mocked implementation of a batch context required by the\n * xs2/xsodata lib\n */\nlet index = 0;\nconst mockContext = {\n    getNextKeyCounter(): number {\n        return index++;\n    }\n};\n\n/**\n * Write batch content to the response. The method has been copied from the\n * xs2/xsodata project and modified because FE expects status code 202.\n *\n * @param batch\n * @param context\n * @param response\n */\nfunction writeBatch(batch, context, response: Response): void {\n    response.statusCode = 200;\n    const boundary = 'batch_' + createBoundary(context);\n    response.setHeader('Content-Type', 'multipart/mixed; boundary=' + boundary);\n    response.write('--' + boundary + '\\r\\n');\n    for (let i = 0; i < batch.parts.length; i++) {\n        if (i !== 0) {\n            response.write('\\r\\n--' + boundary + '\\r\\n');\n        }\n        batch.parts[i].write(context, response);\n    }\n    response.write('\\r\\n--' + boundary + '--\\r\\n');\n}\n\n/**\n * @param metadata\n * @param dataAccess\n * @param config\n */\nexport function batchRequestHandler(\n    metadata: ODataMetadata,\n    dataAccess: DataAccess,\n    config: ServerConfig\n): RequestHandler {\n    return (req: Request, res: Response): void => {\n        const request = createRequest(req, '/');\n        if (metadata.getVersion() === '2.0') {\n            res.setHeader('dataserviceversion', metadata.getVersion());\n        } else {\n            res.setHeader('odata-version', metadata.getVersion());\n        }\n        res.statusCode = 200;\n        const boundary = getBoundary(req.headers['content-type']);\n\n        /**\n         * Process the current part and prepare the return part\n         *\n         * @param part\n         */\n        async function handlePart(part: any): Promise<void> {\n            const baseUrl = req.baseUrl.replace('/$batch', '');\n            if (config.debug) {\n                console.log(part.rawData.url);\n            }\n            const [method, url] = part.rawData.url.split(' ');\n            const odataReq: ODataRequest =\n                metadata.getVersion() === '2.0'\n                    ? new ODataV2Request(baseUrl, url, metadata)\n                    : new ODataV4Request(baseUrl, url, metadata);\n            try {\n                switch (method) {\n                    case 'PATCH':\n                    case 'MERGE': {\n                        const patchData = part.rawData.payload[0].length ? JSON.parse(part.rawData.payload[0]) : {};\n                        const updatedData = await dataAccess.updateData(odataReq, patchData);\n                        part.response = odataReq.createResponse(updatedData);\n                        break;\n                    }\n                    case 'DELETE':\n                        await dataAccess.deleteData(odataReq);\n                        part.response = odataReq.createResponse(null);\n                        break;\n                    case 'POST': {\n                        const postData = part.rawData.payload[0].length ? JSON.parse(part.rawData.payload[0]) : {};\n                        const actionResponse = await dataAccess.performAction(odataReq, postData);\n                        if (actionResponse === null) {\n                            const createdData = await dataAccess.createData(odataReq, postData);\n                            part.response = odataReq.createResponse(createdData, true, createdData);\n                        } else {\n                            part.response = odataReq.createResponse(actionResponse);\n                        }\n                        break;\n                    }\n                    case 'GET':\n                    default: {\n                        const actionResponse = await dataAccess.performAction(odataReq);\n                        if (actionResponse === null) {\n                            const data = await dataAccess.getData(odataReq);\n                            part.response = odataReq.createResponse(data);\n                        } else {\n                            part.response = odataReq.createResponse(actionResponse);\n                        }\n                        break;\n                    }\n                }\n            } catch (e) {\n                part.response = odataReq.createErrorResponse(e);\n            } finally {\n                odataReq.applyResponseHeaders(res);\n            }\n        }\n\n        request.getBodyAsString(async (body) => {\n            const batch = convertBatch(body, boundary);\n            await Promise.all(\n                batch.parts.map(async (part: any) => {\n                    if (part.isChangeSet) {\n                        return await Promise.all(part.parts.map(async (subPart) => await handlePart(subPart)));\n                    } else {\n                        return await handlePart(part);\n                    }\n                })\n            );\n            writeBatch(batch, mockContext, res);\n            res.end();\n        });\n    };\n}\n","export interface Key {\n    COLUMN_NAME: string;\n    LENGTH: number;\n    DATA_TYPE_NAME: 'VARCHAR';\n    IS_NULLABLE: 'FALSE';\n}\n\n/**\n * @param genKeyName\n */\nexport function createGenKeyProperty(genKeyName: string): Key {\n    return {\n        COLUMN_NAME: genKeyName,\n        LENGTH: 2147483647,\n        DATA_TYPE_NAME: 'VARCHAR',\n        IS_NULLABLE: 'FALSE'\n    };\n}\n\n/**\n * @param index\n */\nexport function createGenKeyValue(index: number): string {\n    return '' + Date.now() + (index + 1);\n}\n\n/**\n * @param context\n */\nexport function createBoundary(context): string {\n    return '' + Date.now() + '_' + context.getNextKeyCounter();\n}\n","import { Request, Response } from 'express';\nimport Router from 'router';\nimport { FileBasedServerConfig } from '../api';\nimport { loadFile } from './utils/fileLoader';\n\n/**\n * @param config\n * @param version\n */\nexport function catalogService(config: FileBasedServerConfig, version = 2): Router {\n    const router: Router = Router();\n\n    router.get('/ServiceCollection', (req: Request, res: Response) => {\n        res.json({\n            d: {\n                results: [\n                    {\n                        ID: config.service.name\n                    }\n                ]\n            }\n        });\n    });\n\n    router.get('/ServiceCollection\\\\(*', (req: Request, res: Response) => {\n        res.json({\n            d: {\n                results: [\n                    {\n                        TechnicalName: config.service.name,\n                        Version: version\n                    }\n                ]\n            }\n        });\n    });\n\n    if (config.annotations) {\n        router.get('/Annotations*', (req: Request, res: Response) => {\n            loadFile(config.annotations.localPath)\n                .then((data) => {\n                    res.setHeader('Content-Type', 'application/xml');\n                    res.write(data);\n                    res.end();\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n        });\n    }\n\n    return router;\n}\n","import { MockDataEntitySet } from './entitySet';\nimport { EntitySet, EntityType } from '@sap-ux/annotation-converter';\nimport { DataAccessInterface } from './common';\n\n/**\n *\n */\nexport class ContainedDataEntitySet extends MockDataEntitySet {\n    /**\n     * @param entitySetDefinition\n     * @param containedData\n     * @param dataAccess\n     */\n    constructor(entitySetDefinition: EntitySet | EntityType, containedData: any, dataAccess: DataAccessInterface) {\n        super(undefined, entitySetDefinition, dataAccess, false, false);\n        this._rootMockData = containedData;\n        this.readyPromise = Promise.resolve(this);\n    }\n}\n","import { EntityType, Property } from '@sap-ux/annotation-converter';\nimport { ODataMetadata } from './metadata';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ODataRequestInterface {}\nexport interface EntitySetInterface {\n    checkKeyValue(mockData: object, keyValues: object, keyName: string, keyProp?: Property): boolean;\n    isV4(): boolean;\n}\nexport interface DataAccessInterface {\n    isV4(): boolean;\n    getNavigationPropertyKeys(\n        data: any,\n        navPropDetail: any,\n        currentEntityType: EntityType,\n        currentKeys: Record<string, string>,\n        forCreate?: boolean\n    ): Record<string, string>;\n    getMockEntitySet(\n        entityTypeName,\n        generateMockData?: boolean,\n        containedEntityType?: EntityType,\n        containedData?: any\n    ): Promise<EntitySetInterface>;\n    getData(odataRequest: ODataRequestInterface): Promise<any>;\n    getMetadata(): ODataMetadata;\n}\n\n/**\n *\n */\nexport class ExecutionError extends Error {\n    statusCode: number;\n    messageData: object;\n    isSAPMessage: boolean;\n    isCustomError = true;\n\n    /**\n     * @param message\n     * @param statusCode\n     * @param messageData\n     * @param isSAPMessage\n     */\n    constructor(message: string, statusCode: number, messageData: object, isSAPMessage: boolean) {\n        super(message);\n        this.statusCode = statusCode;\n        this.messageData = messageData;\n        this.isSAPMessage = isSAPMessage;\n    }\n}\n","import { ODataRequest } from '../request/odataRequest';\nimport { ODataMetadata } from './metadata';\nimport { MockDataEntitySet } from './entitySet';\nimport { DraftMockEntitySet } from './draftEntitySet';\nimport { StickyMockEntitySet } from './stickyEntitySet';\nimport { EntitySet, EntityType } from '@sap-ux/annotation-converter';\nimport { ODataV4Request } from '../request/odataV4Request';\nimport cloneDeep from 'lodash.clonedeep';\nimport { ContainedDataEntitySet } from './ContainedDataEntitySet';\nimport { DataAccessInterface } from './common';\nimport { MockEntityContainer } from './mockEntityContainer';\n\n/**\n *\n */\nexport class DataAccess implements DataAccessInterface {\n    protected readonly mockDataRootFolder: string;\n    protected metadata: ODataMetadata;\n    protected readonly strictKeyMode: boolean;\n    protected readonly contextBasedIsolation: boolean;\n    protected entitySets: Record<string, MockDataEntitySet> = {};\n    protected stickyEntitySets: StickyMockEntitySet[] = [];\n    protected generateMockData: boolean;\n    /**\n     * @param root\n     * @param metadata\n     * @param strictKeyMode\n     * @param contextBasedIsolation\n     * @param generateMockData\n     */\n    public constructor(\n        root: string,\n        metadata: ODataMetadata,\n        strictKeyMode: boolean,\n        contextBasedIsolation: boolean,\n        generateMockData: boolean\n    ) {\n        this.mockDataRootFolder = root;\n        this.metadata = metadata;\n        this.strictKeyMode = strictKeyMode;\n        this.generateMockData = generateMockData;\n        this.contextBasedIsolation = contextBasedIsolation;\n        this.metadata.getEntitySets().forEach((entitySet) => {\n            this.getMockEntitySet(entitySet.name, generateMockData);\n        });\n    }\n\n    public reloadData(metadata: ODataMetadata) {\n        this.metadata = metadata;\n        this.entitySets = {};\n        this.metadata.getEntitySets().forEach((entitySet) => {\n            this.getMockEntitySet(entitySet.name, this.generateMockData);\n        });\n    }\n\n    /**\n     *\n     */\n    public isV4(): boolean {\n        return this.metadata.getVersion() !== '2.0';\n    }\n\n    /**\n     * @param entityTypeName\n     * @param generateMockData\n     * @param containedEntityType\n     * @param containedData\n     */\n    public async getMockEntitySet(\n        entityTypeName,\n        generateMockData?: boolean,\n        containedEntityType?: EntityType,\n        containedData?: any\n    ): Promise<MockDataEntitySet> {\n        if (containedEntityType) {\n            const mockEntitySet = new ContainedDataEntitySet(containedEntityType, containedData, this);\n            return mockEntitySet.readyPromise;\n        } else if (!this.entitySets[entityTypeName]) {\n            const entitySet = this.metadata.getEntitySet(entityTypeName);\n            const entityType = this.metadata.getEntityType(entityTypeName);\n            let mockEntitySet: MockDataEntitySet;\n            if (this.metadata.isDraftEntity(entitySet)) {\n                mockEntitySet = new DraftMockEntitySet(\n                    this.mockDataRootFolder,\n                    entitySet || entityType,\n                    this,\n                    generateMockData\n                );\n            } else if (this.metadata.isStickyEntity(entitySet)) {\n                mockEntitySet = new StickyMockEntitySet(\n                    this.mockDataRootFolder,\n                    entitySet || entityType,\n                    this,\n                    generateMockData\n                );\n                this.stickyEntitySets.push(mockEntitySet as StickyMockEntitySet);\n            } else {\n                mockEntitySet = new MockDataEntitySet(\n                    this.mockDataRootFolder,\n                    entitySet || entityType,\n                    this,\n                    generateMockData\n                );\n            }\n            this.entitySets[entityTypeName] = mockEntitySet;\n        }\n        return this.entitySets[entityTypeName].readyPromise;\n    }\n\n    /**\n     * @param odataRequest\n     * @param actionData\n     */\n    public async performAction(odataRequest: ODataRequest, actionData?: object): Promise<any> {\n        // if it's a bound action we need to look for the action type\n        const rootEntitySet = this.metadata.getEntitySet(odataRequest.query.queryPath[0].path);\n        if (rootEntitySet) {\n            let currentEntityType = rootEntitySet.entityType;\n            let currentEntitySet = rootEntitySet;\n            let i = 1;\n            for (i = 1; i < odataRequest.query.queryPath.length - 1; i++) {\n                const queryPart = odataRequest.query.queryPath[i].path;\n                const targetNavProp = currentEntityType.navigationProperties.find(\n                    (navProp) => navProp.name === queryPart\n                );\n                if (targetNavProp) {\n                    currentEntityType = targetNavProp.targetType;\n                    if (currentEntitySet) {\n                        currentEntitySet = currentEntitySet.navigationPropertyBinding[queryPart];\n                    }\n                }\n            }\n            const entitySetName = currentEntitySet ? currentEntitySet.name : currentEntityType.name;\n            const actionName = odataRequest.query.queryPath[i] ? odataRequest.query.queryPath[i].path : undefined; // Double as action name\n            if (actionName && actionName.length > 0) {\n                const fqActionName = `${actionName}(${currentEntityType.fullyQualifiedName})`;\n                const actionDefinition = this.metadata.getActionByFQN(fqActionName);\n                if (actionDefinition) {\n                    return (await this.getMockEntitySet(entitySetName)).executeAction(\n                        actionDefinition,\n                        actionData,\n                        odataRequest,\n                        odataRequest.query.queryPath[i - 1].keys\n                    );\n                }\n                const collecfqActionName = `${actionName}(Collection(${currentEntityType.fullyQualifiedName}))`;\n                const collecactionDefinition = this.metadata.getActionByFQN(collecfqActionName);\n                if (collecactionDefinition) {\n                    return (await this.getMockEntitySet(entitySetName)).executeAction(\n                        collecactionDefinition,\n                        actionData,\n                        odataRequest,\n                        odataRequest.query.queryPath[0].keys\n                    );\n                }\n            }\n        } else {\n            // Unbound action\n            const actionName = odataRequest.query.queryPath[0].path;\n            const fqActionName = `${this.metadata.getEntityContainerPath()}/${actionName}()`;\n            const actionDefinition = this.metadata.getActionByFQN(fqActionName);\n            // Technically i'm not sure what we can do here but we cna at least check if it's a sticky action\n            if (actionDefinition) {\n                if (this.metadata.getEntitySetByType(actionDefinition.sourceType)) {\n                    const targetEntitySet = this.metadata.getEntitySetByType(actionDefinition.sourceType);\n                    let outData: any = (await this.getMockEntitySet(targetEntitySet.name)).executeAction(\n                        actionDefinition,\n                        Object.assign({}, actionData, odataRequest.query.rawParams),\n                        odataRequest,\n                        odataRequest.query.rawParams\n                    );\n                    if (this.metadata.getVersion() === '2.0') {\n                        const enrichElement = (entitySet: EntitySet, dataLine) => {\n                            const keyValues: string[] = [];\n                            if (entitySet.entityType.keys.length === 1) {\n                                keyValues.push(`${dataLine[entitySet.entityType.keys[0].name]}`);\n                            } else {\n                                entitySet.entityType.keys.forEach((key) => {\n                                    keyValues.push(`${key.name}='${dataLine[key.name]}'`);\n                                });\n                            }\n                            const uri = `${odataRequest.baseUrl}/${entitySet.name}(${keyValues.join(',')})`;\n                            dataLine['__metadata'] = {\n                                id: uri,\n                                uri: uri,\n                                type: entitySet.entityTypeName\n                            };\n                            return dataLine;\n                        };\n\n                        // Enrich data with __metadata for v2\n                        if (Array.isArray(outData)) {\n                            outData = (outData as any[]).map((element) => {\n                                return enrichElement(targetEntitySet, element);\n                            });\n                        } else if (outData != null) {\n                            outData = enrichElement(targetEntitySet, outData);\n                        }\n                    }\n                    return outData;\n                } else {\n                    // There is no entitySet linked to it, handle it in the EntityContainer.js potentially as executeAction\n                    const outData = (await MockEntityContainer.read(this.mockDataRootFolder))?.executeAction(\n                        actionDefinition,\n                        Object.assign({}, actionData, odataRequest.query.rawParams),\n                        odataRequest.query.rawParams\n                    );\n                    return outData;\n                }\n            } else {\n                const fqActionName = `${actionName}()`;\n                const actionDefinition = this.metadata.getActionByFQN(fqActionName);\n                if (actionDefinition) {\n                    this.stickyEntitySets.forEach((entitySet) => {\n                        entitySet.executeAction(\n                            actionDefinition,\n                            actionData,\n                            odataRequest,\n                            odataRequest.query.queryPath[0].keys\n                        );\n                    });\n                    return true;\n                }\n                return null;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @param data\n     * @param navPropDetail\n     * @param currentEntityType\n     * @param currentKeys\n     * @param forCreate\n     */\n    public getNavigationPropertyKeys(\n        data: any,\n        navPropDetail: any,\n        currentEntityType: EntityType,\n        currentKeys: Record<string, string>,\n        forCreate = false\n    ): Record<string, string> {\n        if (navPropDetail.referentialConstraint && navPropDetail.referentialConstraint.length > 0) {\n            const dataArray = Array.isArray(data) ? data : [data];\n            dataArray.forEach((data) => {\n                navPropDetail.referentialConstraint.forEach((refConstr) => {\n                    currentKeys[refConstr.targetProperty] = data[refConstr.sourceProperty];\n                });\n            });\n        } else {\n            // Try to find a back link (a nav property going back to the original entityType)\n            const originalData = cloneDeep(data);\n            const backNav: any = (navPropDetail.targetType as EntityType).navigationProperties.find(\n                (targetNavProp) => (targetNavProp as any).targetTypeName === currentEntityType.fullyQualifiedName\n            );\n            if (backNav && backNav.referentialConstraint && backNav.referentialConstraint.length > 0) {\n                backNav.referentialConstraint.forEach((refConstr) => {\n                    if (originalData[refConstr.targetProperty] !== undefined) {\n                        currentKeys[refConstr.sourceProperty] = originalData[refConstr.targetProperty];\n                        delete originalData[refConstr.targetProperty];\n                    }\n                });\n                navPropDetail.targetType.keys.forEach((propKey) => {\n                    if (\n                        propKey.name === 'IsActiveEntity' &&\n                        currentKeys[propKey.name] === undefined &&\n                        Object.hasOwnProperty.call(originalData, propKey.name) &&\n                        (!forCreate || !propKey.annotations?.Core?.Computed)\n                    ) {\n                        currentKeys[propKey.name] = originalData[propKey.name];\n                        delete originalData[propKey.name];\n                    }\n                });\n            } else if (!this.strictKeyMode) {\n                navPropDetail.targetType.keys.forEach((propKey) => {\n                    if (\n                        Object.hasOwnProperty.call(originalData, propKey.name) &&\n                        (!forCreate || !propKey.annotations?.Core?.Computed)\n                    ) {\n                        currentKeys[propKey.name] = originalData[propKey.name];\n                        delete originalData[propKey.name];\n                    }\n                });\n                // If there is no key or only draft stuff\n                if (\n                    Object.keys(currentKeys).length === 0 ||\n                    (Object.keys(currentKeys).length === 1 && currentKeys['IsActiveEntity'])\n                ) {\n                    // If we still don't have anything, try to get the keys from the current entity that are properties in the target\n                    currentEntityType.keys.forEach((propKey) => {\n                        if (\n                            navPropDetail.targetType.entityProperties.find((prop) => prop.name === propKey.name) &&\n                            originalData[propKey.name] !== undefined\n                        ) {\n                            currentKeys[propKey.name] = originalData[propKey.name];\n                            delete originalData[propKey.name];\n                        }\n                    });\n                }\n            }\n        }\n        return currentKeys;\n    }\n\n    /**\n     * @param currentEntitySet\n     * @param entityType\n     * @param expandNavProp\n     * @param data\n     * @param requestExpandObject\n     * @param tenantId\n     * @param previousEntitySet\n     * @param visitedPaths\n     */\n    async getExpandData(\n        currentEntitySet: EntitySet,\n        entityType: EntityType,\n        expandNavProp: string,\n        data: object,\n        requestExpandObject: any,\n        tenantId: string,\n        previousEntitySet: EntitySet,\n        visitedPaths: string[]\n    ) {\n        if (data === null) {\n            return;\n        }\n        const navProp = entityType.navigationProperties.find((navProp) => navProp.name === expandNavProp);\n        visitedPaths = visitedPaths.concat();\n        visitedPaths.push(expandNavProp);\n        let targetEntitySet;\n        if (navProp && currentEntitySet && currentEntitySet.navigationPropertyBinding[expandNavProp]) {\n            targetEntitySet = currentEntitySet.navigationPropertyBinding[expandNavProp];\n        } else if (previousEntitySet && previousEntitySet.navigationPropertyBinding[visitedPaths.join('/')]) {\n            targetEntitySet = previousEntitySet.navigationPropertyBinding[visitedPaths.join('/')];\n        }\n        if (targetEntitySet) {\n            const navEntitySet = await this.getMockEntitySet(targetEntitySet.name);\n            const dataArray = Array.isArray(data) ? data : [data];\n            for (const data of dataArray) {\n                const currentKeys = this.getNavigationPropertyKeys(data, navProp, entityType, {});\n                if (!navProp.containsTarget) {\n                    const expandData = navEntitySet.performGET(currentKeys, navProp.isCollection, tenantId);\n                    data[expandNavProp] = expandData;\n                    const expandDetail = requestExpandObject.expand[expandNavProp];\n                    if (expandDetail.expand && Object.keys(expandDetail.expand).length > 0) {\n                        await Promise.all(\n                            Object.keys(expandDetail.expand).map(async (subExpandNavProp) => {\n                                return this.getExpandData(\n                                    targetEntitySet,\n                                    navProp.targetType,\n                                    subExpandNavProp,\n                                    expandData,\n                                    expandDetail,\n                                    tenantId,\n                                    targetEntitySet,\n                                    []\n                                );\n                            })\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    public getMetadata(): ODataMetadata {\n        return this.metadata;\n    }\n\n    /**\n     * @param odataRequest\n     */\n    public async getData(odataRequest: ODataRequest): Promise<any> {\n        let currentEntitySet: EntitySet = null;\n        let previousEntitySet: EntitySet = null;\n        let currentEntityType: EntityType = null;\n        let visitedPaths: string[] = [];\n        let targetContainedData: any;\n        let targetContainedEntityType = null;\n        const rootEntitySet = this.metadata.getEntitySet(odataRequest.query.queryPath[0].path);\n        let isCount = false;\n        let data: any = await odataRequest.query.queryPath.reduce(async (data, queryPathPart, index) => {\n            data = await data;\n            let currentKeys: Record<string, any> = queryPathPart.keys || {};\n            let asArray: boolean = Object.keys(currentKeys).length === 0;\n            if (queryPathPart.path === '$count') {\n                isCount = true;\n                return data;\n            }\n            if ((!currentEntityType || data === null) && index > 0) {\n                if (data === null) {\n                    if (currentEntityType) {\n                        const navPropDetail = currentEntityType.navigationProperties.find(\n                            (navProp) => navProp.name === queryPathPart.path\n                        );\n                        asArray = asArray && navPropDetail.isCollection;\n                    }\n                    return asArray ? [] : null;\n                }\n                return data;\n            }\n            if (!currentEntityType) {\n                // First level if entity set, then it's navigation properties\n                currentEntitySet = this.metadata.getEntitySet(queryPathPart.path);\n                previousEntitySet = currentEntitySet;\n                currentEntityType = currentEntitySet.entityType;\n            } else {\n                const navPropDetail = currentEntityType.navigationProperties.find(\n                    (navProp) => navProp.name === queryPathPart.path\n                );\n                if (navPropDetail.name === 'SiblingEntity' && currentEntityType) {\n                    asArray = asArray && navPropDetail.isCollection;\n                    currentKeys.IsActiveEntity = !(data as any).IsActiveEntity;\n                } else {\n                    visitedPaths.push(queryPathPart.path);\n                    if (navPropDetail) {\n                        if (asArray) {\n                            currentKeys = this.getNavigationPropertyKeys(\n                                data,\n                                navPropDetail,\n                                currentEntityType,\n                                currentKeys\n                            );\n                        }\n                        if (\n                            navPropDetail.referentialConstraint.length == 0 &&\n                            data.hasOwnProperty(queryPathPart.path) &&\n                            this.metadata.getVersion() === '2.0'\n                        ) {\n                            // Fake containment for result set\n                            targetContainedEntityType = navPropDetail.targetType;\n                            targetContainedData = data[queryPathPart.path];\n                            currentEntitySet = null;\n                            currentEntityType = targetContainedEntityType;\n                        } else if (!navPropDetail.containsTarget && previousEntitySet) {\n                            currentEntitySet = previousEntitySet.navigationPropertyBinding[visitedPaths.join('/')];\n                            previousEntitySet = currentEntitySet;\n                            visitedPaths = [];\n                            currentEntityType = currentEntitySet.entityType;\n                            targetContainedEntityType = null;\n                            targetContainedData = null;\n                        } else {\n                            targetContainedEntityType = navPropDetail.targetType;\n                            targetContainedData = data[queryPathPart.path];\n                            currentEntitySet = null;\n                            currentEntityType = targetContainedEntityType;\n                        }\n                    } else {\n                        currentEntitySet = null;\n                        currentEntityType = null;\n                    }\n                    asArray = asArray && navPropDetail.isCollection;\n                }\n            }\n            if (\n                (!currentEntitySet && !targetContainedEntityType) ||\n                (this.metadata.getVersion() === '2.0' && targetContainedData)\n            ) {\n                if (Array.isArray(data)) {\n                    return asArray ? [] : null;\n                } else {\n                    return data[queryPathPart.path];\n                }\n            }\n            return (\n                await this.getMockEntitySet(\n                    currentEntitySet?.name,\n                    undefined,\n                    targetContainedEntityType,\n                    targetContainedData\n                )\n            ).performGET(currentKeys, asArray, odataRequest.tenantId);\n        }, {});\n\n        if (\n            rootEntitySet.entityType?.annotations?.Common?.ResultContext?.valueOf() &&\n            odataRequest.query.queryPath.length === 1\n        ) {\n            // Parametrized entityset, they cannot be requested directly\n            const potentialTarget = rootEntitySet.entityType.navigationProperties.find(\n                (navProp) => navProp.containsTarget\n            );\n            throw new Error(\n                JSON.stringify({\n                    message:\n                        'Parametrized entityset cannot be queried directly, you need to load the result set, most likely \"' +\n                        potentialTarget.name +\n                        '\" in this case'\n                })\n            );\n        }\n\n        if (data !== null || (Array.isArray(data) && data.length > 0)) {\n            // Apply $expand\n            if (odataRequest.query.expand) {\n                await Promise.all(\n                    Object.keys(odataRequest.query.expand).map(async (expandNavProp) => {\n                        return this.getExpandData(\n                            currentEntitySet,\n                            currentEntityType,\n                            expandNavProp,\n                            data,\n                            odataRequest.query,\n                            odataRequest.tenantId,\n                            previousEntitySet,\n                            visitedPaths\n                        );\n                    })\n                );\n            }\n\n            // Apply $filter\n            if ((odataRequest.query.filter || odataRequest.query?.aggregateDefinition?.filter) && Array.isArray(data)) {\n                const filterDef = odataRequest.query.filter || odataRequest.query?.aggregateDefinition?.filter;\n                const mockEntitySet = await this.getMockEntitySet(\n                    currentEntitySet ? currentEntitySet.name : currentEntityType.name\n                );\n                data = data.filter((dataLine) => {\n                    return mockEntitySet.checkFilter(dataLine, filterDef, odataRequest.tenantId);\n                });\n            }\n            // Apply $search\n            if (odataRequest.query.searchQuery && Array.isArray(data)) {\n                const mockEntitySet = await this.getMockEntitySet(currentEntityType.name);\n                data = data.filter((dataLine) => {\n                    return mockEntitySet.checkSearch(dataLine, odataRequest.query.searchQuery);\n                });\n            }\n\n            // Apply $apply for aggregates\n            if (odataRequest.query.aggregateDefinition) {\n                const dataByGroup = {};\n                const mockEntitySet = await this.getMockEntitySet(currentEntityType.name);\n                let mockData;\n                if (mockEntitySet) {\n                    mockData = await mockEntitySet.getMockData(odataRequest.tenantId);\n                }\n\n                const getAggregateKey = function (dataLine) {\n                    return odataRequest.query.aggregateDefinition.groupBy.reduce((key, groupByProp) => {\n                        if (key.length > 0) {\n                            key += ',';\n                        }\n                        key += dataLine[groupByProp];\n                        return key;\n                    }, '');\n                };\n                data.forEach((dataLine) => {\n                    const aggregateKey = getAggregateKey(dataLine);\n                    if (!dataByGroup[aggregateKey]) {\n                        dataByGroup[aggregateKey] = [];\n                    }\n                    dataByGroup[aggregateKey].push(dataLine);\n                });\n\n                data = Object.keys(dataByGroup).map((groupName) => {\n                    const dataToAggregate = dataByGroup[groupName];\n                    const outData = {};\n                    odataRequest.query.aggregateDefinition.groupBy.forEach((propName) => {\n                        outData[propName] = dataToAggregate[0][propName];\n                    });\n                    odataRequest.query.aggregateDefinition.aggregates.forEach((aggregateDefinition) => {\n                        let propValue;\n                        if (\n                            aggregateDefinition.operator === undefined &&\n                            mockData &&\n                            mockData.hasCustomAggregate(aggregateDefinition.name)\n                        ) {\n                            propValue = mockData.performCustomAggregate(aggregateDefinition.name, dataToAggregate);\n                        } else {\n                            dataToAggregate.forEach((dataLine) => {\n                                const currentValue = dataLine[aggregateDefinition.sourceProperty];\n                                if (propValue === undefined) {\n                                    propValue = currentValue;\n                                } else {\n                                    switch (aggregateDefinition.operator) {\n                                        case 'max':\n                                            propValue = Math.max(propValue, currentValue);\n                                            break;\n                                        case 'min':\n                                            propValue = Math.min(propValue, currentValue);\n                                            break;\n                                        case 'average':\n                                            propValue += currentValue;\n                                            break;\n                                        default:\n                                            propValue += currentValue;\n                                            break;\n                                    }\n                                }\n                            });\n                        }\n                        if (aggregateDefinition.operator === 'average') {\n                            propValue = propValue / dataToAggregate.length;\n                        }\n                        outData[aggregateDefinition.name] = propValue;\n                    });\n                    return outData;\n                });\n            }\n            // Apply $orderby\n            if (odataRequest?.query?.orderBy && odataRequest?.query?.orderBy.length > 0) {\n                data.sort(function (firstElement, secondElement) {\n                    let isDecisive = false;\n                    let outValue = 0;\n                    odataRequest.query.orderBy.forEach((orderByDef) => {\n                        if (isDecisive) {\n                            return;\n                        }\n                        if (firstElement[orderByDef.name] > secondElement[orderByDef.name]) {\n                            outValue = orderByDef.direction === 'asc' ? 1 : -1;\n                            isDecisive = true;\n                        } else if (firstElement[orderByDef.name] < secondElement[orderByDef.name]) {\n                            outValue = orderByDef.direction === 'asc' ? -1 : 1;\n                            isDecisive = true;\n                        }\n                    });\n                    return outValue;\n                });\n            }\n            // Apply $select\n            const originalData = cloneDeep(data);\n            if (odataRequest?.query?.properties) {\n                if (odataRequest.query.properties['DraftAdministrativeData']) {\n                    if (Array.isArray(data)) {\n                        data = (data as any[]).map((element) => {\n                            if (!element.DraftAdministrativeData) {\n                                element.DraftAdministrativeData = null;\n                            }\n                            return element;\n                        });\n                    } else if (data != null && data.constructor.name === 'Object') {\n                        if (!data.DraftAdministrativeData) {\n                            data.DraftAdministrativeData = null;\n                        }\n                    }\n                }\n            }\n            if (odataRequest?.query?.properties && Object.keys(odataRequest?.query?.properties).length > 0) {\n                const queryPropsKeys = Object.keys(odataRequest.query.properties);\n\n                const compareByKey = (element: { [x: string]: any }) => {\n                    const elemKeys = Object.keys(element);\n                    const differenceKeys = elemKeys.filter((x) => !queryPropsKeys.includes(x));\n                    differenceKeys.forEach((k) => {\n                        delete element[k];\n                    });\n                    if (odataRequest.query.expand) {\n                        const expandKeys = Object.keys(odataRequest.query.expand);\n                        expandKeys.forEach((expandKey) => {\n                            const expandElem = element[expandKey];\n                            if (expandElem) {\n                                if (\n                                    odataRequest.query.expand[expandKey].select &&\n                                    Object.keys(odataRequest.query.expand[expandKey].select).length > 0\n                                ) {\n                                    const expandSelectKeys = Object.keys(odataRequest.query.expand[expandKey].select);\n                                    if (Array.isArray(expandElem)) {\n                                        expandElem.forEach(function (expandItem) {\n                                            const expandElemKeys = Object.keys(expandItem);\n\n                                            const differenceKeys = expandElemKeys.filter(\n                                                (x) => !expandSelectKeys.includes(x)\n                                            );\n                                            differenceKeys.forEach((k) => {\n                                                delete expandItem[k];\n                                            });\n                                        });\n                                    } else {\n                                        const expandElemKeys = Object.keys(expandElem);\n\n                                        const differenceKeys = expandElemKeys.filter(\n                                            (x) => !expandSelectKeys.includes(x)\n                                        );\n                                        differenceKeys.forEach((k) => {\n                                            delete expandElem[k];\n                                        });\n                                    }\n                                }\n                            }\n                        });\n                    }\n\n                    return element;\n                };\n\n                if (Array.isArray(data)) {\n                    data = (data as any[]).map((element) => {\n                        return compareByKey(element);\n                    });\n                } else if (data != null && data.constructor.name === 'Object') {\n                    data = compareByKey(data);\n                }\n            }\n            odataRequest.dataLength = (Array.isArray(data) && data.length) || 1;\n\n            // Apply $skip / $top\n            if (Array.isArray(data) && odataRequest.query.startIndex !== undefined && odataRequest.query.maxElements) {\n                data = (data as any[]).slice(\n                    odataRequest.query.startIndex,\n                    odataRequest.query.startIndex + odataRequest.query.maxElements\n                );\n            }\n\n            if (this.metadata.getVersion() === '2.0') {\n                const enrichElement = (\n                    entitySet: EntitySet | undefined,\n                    entityType: EntityType | undefined,\n                    dataLine,\n                    originalDataLine\n                ) => {\n                    if (!entityType) {\n                        return;\n                    }\n                    const keyValues: string[] = [];\n                    if (entityType.keys.length === 1) {\n                        const key = entityType.keys[0];\n                        keyValues.push(`${dataLine[key.name] || originalDataLine[key.name]}`);\n                    } else {\n                        entityType.keys.forEach((key) => {\n                            keyValues.push(`${key.name}='${dataLine[key.name] || originalDataLine[key.name]}'`);\n                        });\n                    }\n\n                    const uri = `${odataRequest.baseUrl}/${\n                        entitySet ? entitySet.name : entityType.name\n                    }(${keyValues.join(',')})`;\n                    dataLine['__metadata'] = {\n                        id: uri,\n                        uri: uri,\n                        type: entityType.fullyQualifiedName\n                    };\n\n                    entityType.navigationProperties.forEach((navProp) => {\n                        //eslint-disable-next-line\n                        if (dataLine.hasOwnProperty(navProp.name)) {\n                            if (entitySet.navigationPropertyBinding[navProp.name]) {\n                                if (navProp.isCollection) {\n                                    let navPropData = dataLine[navProp.name];\n                                    let hasResult = false;\n                                    if (!Array.isArray(navPropData) && navPropData.hasOwnProperty('results')) {\n                                        navPropData = navPropData.results;\n                                        hasResult = true;\n                                    }\n                                    if (!Array.isArray(navPropData) && navPropData.hasOwnProperty('__deferred')) {\n                                        navPropData = [];\n                                        hasResult = false;\n                                    }\n                                    dataLine[navProp.name] = {\n                                        results: navPropData.map((element, idx) => {\n                                            let originalData = originalDataLine[navProp.name][idx];\n                                            if (hasResult) {\n                                                originalData = originalDataLine[navProp.name].results[idx];\n                                            }\n                                            return enrichElement(\n                                                entitySet.navigationPropertyBinding[navProp.name],\n                                                entityType.navigationProperties.find((nav) => nav.name === navProp.name)\n                                                    ?.targetType,\n                                                element,\n                                                originalData\n                                            );\n                                        })\n                                    };\n                                } else if (dataLine[navProp.name] !== null) {\n                                    dataLine[navProp.name] = enrichElement(\n                                        entitySet.navigationPropertyBinding[navProp.name],\n                                        entityType.navigationProperties.find((nav) => nav.name === navProp.name)\n                                            ?.targetType,\n                                        dataLine[navProp.name],\n                                        originalDataLine[navProp.name]\n                                    );\n                                }\n                            }\n                        }\n                    });\n                    return dataLine;\n                };\n\n                // Enrich data with __metadata for v2\n                if (Array.isArray(data)) {\n                    data = (data as any[]).map((element, idx) => {\n                        return enrichElement(currentEntitySet, currentEntityType, element, originalData[idx]);\n                    });\n                } else if (data != null) {\n                    data = enrichElement(currentEntitySet, currentEntityType, data, originalData);\n                }\n            }\n\n            if (isCount) {\n                data = odataRequest.dataLength;\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * @param odataRequest\n     * @param patchData\n     */\n    public async updateData(odataRequest: ODataRequest, patchData: any) {\n        const entitySetName = odataRequest.query.queryPath[0].path;\n        return (await this.getMockEntitySet(entitySetName)).performPATCH(\n            odataRequest.query.queryPath[0].keys,\n            patchData,\n            odataRequest.tenantId\n        );\n    }\n\n    /**\n     * @param odataRequest\n     * @param postData\n     */\n    public async createData(odataRequest: ODataRequest, postData: any) {\n        const entitySetName = odataRequest.query.queryPath[0].path;\n        const navPropertyName =\n            odataRequest.query.queryPath.length > 1 ? odataRequest.query.queryPath[1].path : undefined;\n        const entitySet = this.metadata.getEntitySet(entitySetName);\n        if (navPropertyName) {\n            // Creating a sub object\n            const entityType = entitySet.entityType;\n            const navPropDetail = entityType.navigationProperties.find(\n                (navProp) => navProp.name === navPropertyName\n            ) as any;\n            const navPropEntityType = (navPropDetail as any).targetType;\n            const data = (await this.getMockEntitySet(entitySetName)).performGET(\n                odataRequest.query.queryPath[0].keys,\n                false,\n                odataRequest.tenantId\n            );\n            if (!data[navPropertyName]) {\n                data[navPropertyName] = [];\n            }\n            const providedKeys = {};\n            navPropEntityType.keys.forEach((key) => {\n                if (postData[key.name] !== undefined) {\n                    providedKeys[key.name] = postData[key.name];\n                }\n            });\n            const currentKeys = this.getNavigationPropertyKeys(\n                data,\n                navPropDetail,\n                entitySet.entityType,\n                providedKeys,\n                true\n            );\n            if (!navPropDetail.containsTarget) {\n                const targetEntitySet = entitySet.navigationPropertyBinding[navPropertyName];\n                (odataRequest as ODataV4Request).context = `../$metadata#${targetEntitySet.name}/$entity`;\n                (odataRequest as ODataV4Request).location = `${targetEntitySet.name}(${Object.keys(currentKeys)\n                    .map((key) => `${key}='${currentKeys[key]}'`)\n                    .join(',')})`;\n                (await this.getMockEntitySet(targetEntitySet.name)).performPOST(\n                    currentKeys,\n                    postData,\n                    odataRequest.tenantId\n                );\n            } else {\n                data[navPropertyName].push(postData);\n            }\n            return postData;\n        } else {\n            // Creating a main object\n            const currentKeys = {};\n            entitySet.entityType.keys.forEach((key) => {\n                if (postData[key.name] !== undefined) {\n                    currentKeys[key.name] = postData[key.name];\n                }\n            });\n            (await this.getMockEntitySet(entitySet.name)).performPOST(currentKeys, postData, odataRequest.tenantId);\n            (odataRequest as ODataV4Request).context = `../$metadata#${entitySet.name}/$entity`;\n            (odataRequest as ODataV4Request).location = `${entitySet.name}(${Object.keys(currentKeys)\n                .map((key) => `${key}='${currentKeys[key]}'`)\n                .join(',')})`;\n            return postData;\n            // this.getMockEntitySet(entitySetName).performPOST(postData, res);\n        }\n    }\n\n    /**\n     * @param odataRequest\n     */\n    public async deleteData(odataRequest: ODataRequest) {\n        const entitySetName = odataRequest.query.queryPath[0].path;\n        return (await this.getMockEntitySet(entitySetName)).performDELETE(\n            odataRequest.query.queryPath[0].keys,\n            odataRequest.tenantId\n        );\n    }\n\n    /**\n     * @param res\n     * @param tenantId\n     */\n    public resetStickySessionTimeout(res: any, tenantId: string) {\n        res.setHeader('odata-version', '4.0');\n        let UUID = '';\n        let timeoutTime = 20;\n        this.stickyEntitySets.forEach((entitySet) => {\n            UUID = entitySet.resetSessionTimeout(tenantId);\n            timeoutTime = entitySet.sessionTimeoutTime;\n        });\n        res.setHeader('sap-contextid', UUID);\n        res.setHeader('sap-http-session-timeout', timeoutTime.toString());\n        res.statusCode = 200;\n        res.end();\n    }\n}\n","import { MockDataEntitySet } from './entitySet';\nimport { ODataRequest } from '../request/odataRequest';\nimport { Action, EntitySet, EntityType, Property, NavigationProperty } from '@sap-ux/annotation-converter';\nimport { FileBasedMockData, KeyDefinitions } from './fileBasedMockData';\nimport { uuidv4 } from './id';\nimport { DataAccessInterface } from './common';\n\ntype DraftElement = {\n    IsActiveEntity: boolean;\n    HasDraftEntity: boolean;\n    HasActiveEntity: boolean;\n    DraftAdministrativeData: DraftAdministrativeData;\n};\n\ntype DraftAdministrativeData = {\n    DraftUUID: string;\n    CreationDateTime: string;\n    CreatedByUser: string;\n    DraftIsCreatedByMe: boolean;\n    LastChangeDateTime: string;\n    LastChangedByUser: string;\n    InProcessByUser: string;\n    DraftIsProcessedByMe: boolean;\n};\n\n/**\n * @param isV4\n */\nfunction _getDateTimeOffset(isV4: boolean) {\n    const date = new Date();\n    date.setFullYear(2000 + Math.floor(Math.random() * 22));\n    date.setDate(Math.floor(Math.random() * 30));\n    date.setMonth(Math.floor(Math.random() * 12));\n    date.setMilliseconds(0);\n    return isV4 ? date.toISOString() : '/Date(' + date.getTime() + '+0000)/';\n}\n\n/**\n *\n */\nexport class DraftMockEntitySet extends MockDataEntitySet {\n    /**\n     * @param rootFolder\n     * @param entitySetDefinition\n     * @param dataAccess\n     * @param generateMockData\n     */\n    constructor(\n        rootFolder: string,\n        entitySetDefinition: EntitySet | EntityType,\n        dataAccess: DataAccessInterface,\n        generateMockData: boolean\n    ) {\n        super(rootFolder, entitySetDefinition, dataAccess, generateMockData, true, true);\n    }\n\n    /**\n     * @param filterExpression\n     * @param mockData\n     * @param allData\n     */\n    protected checkSpecificProperties(\n        filterExpression: any,\n        mockData: any,\n        allData: FileBasedMockData\n    ): boolean | null {\n        if (filterExpression.identifier === 'DraftAdministrativeData/InProcessByUser') {\n            return false;\n        } else if (\n            filterExpression.identifier === 'SiblingEntity/IsActiveEntity' &&\n            filterExpression.literal === 'null'\n        ) {\n            // Ensure that there is not sibling entity which is inactive\n            const keys = {};\n            this.entityTypeDefinition.keys.forEach((keyDef) => {\n                if (keyDef.name !== 'IsActiveEntity') {\n                    keys[keyDef.name] = mockData[keyDef.name];\n                } else {\n                    keys[keyDef.name] = false;\n                }\n            });\n            return !allData.hasEntry(keys);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @param mockData\n     * @param keyValues\n     * @param keyName\n     * @param property\n     */\n    public checkKeyValue(mockData: object, keyValues: object, keyName: string, property?: Property): boolean {\n        if (keyName === 'IsActiveEntity') {\n            // Make sure we check a boolean value\n            let booleanKeyValue = keyValues[keyName];\n            if (typeof booleanKeyValue === 'string') {\n                booleanKeyValue = booleanKeyValue === 'true';\n            }\n            return mockData[keyName] === booleanKeyValue;\n        }\n        return super.checkKeyValue(mockData, keyValues, keyName, property);\n    }\n\n    /**\n     * @param keyValues\n     * @param tenantId\n     */\n    public createInactiveVersion(keyValues: Record<string, string>, tenantId: string) {\n        const currentMockData = this.getMockData(tenantId);\n        const dataToDuplicate = this.performGET(keyValues, true, tenantId, true);\n        dataToDuplicate.forEach((data) => {\n            data.HasDraftEntity = true;\n            const duplicate: DraftElement = Object.assign({}, data) as DraftElement;\n            duplicate.IsActiveEntity = false;\n            duplicate.HasActiveEntity = true;\n\n            currentMockData.addEntry(duplicate);\n        });\n    }\n\n    /**\n     * @param keyValues\n     * @param tenantId\n     */\n    public activateInactiveVersion(keyValues: Record<string, string>, tenantId: string) {\n        const currentMockData = this.getMockData(tenantId);\n        const dataToDuplicate = this.performGET(keyValues, true, tenantId, true);\n        dataToDuplicate.forEach((draftData) => {\n            const activateKeyValues = this.getKeys(draftData);\n            activateKeyValues.IsActiveEntity = true;\n            const activeDraft: DraftElement = Object.assign({}, draftData) as DraftElement;\n            activeDraft.IsActiveEntity = true;\n            activeDraft.HasDraftEntity = false;\n            if (!currentMockData.hasEntry(activateKeyValues)) {\n                currentMockData.addEntry(activeDraft);\n            } else {\n                currentMockData.updateEntry(activateKeyValues, activeDraft);\n            }\n        });\n    }\n\n    /**\n     * @param keyValues\n     * @param draftData\n     * @param tenantId\n     */\n    public async draftDiscard(keyValues: Record<string, any>, draftData: object, tenantId: string) {\n        super.performDELETE(keyValues, tenantId);\n        for (const navPropName in this.entitySetDefinition.navigationPropertyBinding) {\n            if (this.entitySetDefinition.navigationPropertyBinding[navPropName].annotations?.Common?.DraftNode) {\n                // For all the draft node data duplicate them\n                const navPropDetail = this.entityTypeDefinition.navigationProperties.find(\n                    (navProp) => navProp.name === navPropName\n                ) as NavigationProperty;\n                const subKeys = this.dataAccess.getNavigationPropertyKeys(\n                    draftData,\n                    navPropDetail,\n                    this.entitySetDefinition.entityType,\n                    {}\n                );\n                const navPropEntity = (await this.dataAccess.getMockEntitySet(\n                    this.entitySetDefinition.navigationPropertyBinding[navPropName].name\n                )) as DraftMockEntitySet;\n                if (navPropEntity && navPropEntity.discardInactiveVersion) {\n                    navPropEntity.discardInactiveVersion(subKeys, tenantId);\n                }\n            }\n        }\n        const deleteKeyValues = Object.assign({}, keyValues);\n        deleteKeyValues.IsActiveEntity = true;\n        const activeData = this.performGET(deleteKeyValues, false, tenantId, true) as DraftElement;\n        if (activeData) {\n            activeData.HasDraftEntity = false;\n        }\n        return activeData;\n    }\n\n    /**\n     * @param keyValues\n     * @param tenantId\n     */\n    public discardInactiveVersion(keyValues: Record<string, string>, tenantId: string) {\n        const dataToDiscard = this.performGET(keyValues, true, tenantId);\n        dataToDiscard.forEach((data) => {\n            const keys = this.getKeys(data);\n            this.performDELETE(keys, tenantId);\n            const deleteKeyValues = Object.assign({}, keys);\n            deleteKeyValues.IsActiveEntity = true;\n            const activeData = this.performGET(deleteKeyValues, false, tenantId, true) as DraftElement;\n            if (activeData) {\n                activeData.HasDraftEntity = false;\n            }\n        });\n    }\n\n    /**\n     * @param actionDefinition\n     * @param actionData\n     * @param odataRequest\n     * @param keys\n     */\n    public async executeAction(\n        actionDefinition: Action,\n        actionData: object,\n        odataRequest: ODataRequest,\n        keys: Record<string, any>\n    ): Promise<any> {\n        const currentMockData = this.getMockData(odataRequest.tenantId);\n        actionData = currentMockData.onBeforeAction(actionDefinition, actionData, keys);\n        let responseObject;\n        switch (actionDefinition.fullyQualifiedName) {\n            // Draft Edit Action\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.EditAction}(${this.entitySetDefinition.entityTypeName})`:\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.EditAction}()`: {\n                const data = this.performGET(keys, false, odataRequest.tenantId, true) as DraftElement;\n\n                data.HasDraftEntity = true;\n                const duplicate: DraftElement = Object.assign({}, data) as DraftElement;\n                duplicate.IsActiveEntity = false;\n                duplicate.HasActiveEntity = true;\n                const currentDate = _getDateTimeOffset(this.isV4());\n                duplicate.DraftAdministrativeData = {\n                    DraftUUID: uuidv4(),\n                    CreationDateTime: currentDate,\n                    CreatedByUser: 'nobody',\n                    DraftIsCreatedByMe: true,\n                    LastChangeDateTime: currentDate,\n                    LastChangedByUser: 'nobody',\n                    InProcessByUser: 'nobody',\n                    DraftIsProcessedByMe: true\n                };\n                currentMockData.addEntry(duplicate);\n                for (const navPropName in this.entitySetDefinition.navigationPropertyBinding) {\n                    if (\n                        this.entitySetDefinition.navigationPropertyBinding[navPropName].annotations?.Common?.DraftNode\n                    ) {\n                        // For all the draft node data duplicate them\n                        const navPropDetail = this.entityTypeDefinition.navigationProperties.find(\n                            (navProp) => navProp.name === navPropName\n                        ) as NavigationProperty;\n                        const subKeys = this.dataAccess.getNavigationPropertyKeys(\n                            data,\n                            navPropDetail,\n                            this.entitySetDefinition.entityType,\n                            {}\n                        );\n                        const navPropEntity = (await this.dataAccess.getMockEntitySet(\n                            this.entitySetDefinition.navigationPropertyBinding[navPropName].name\n                        )) as DraftMockEntitySet;\n                        if (navPropEntity && navPropEntity.createInactiveVersion) {\n                            navPropEntity.createInactiveVersion(subKeys, odataRequest.tenantId);\n                        }\n                    }\n                }\n                // responseObject = duplicate;\n                odataRequest.query.queryPath.pop();\n                const inactiveKeys = Object.assign({}, keys, { IsActiveEntity: false });\n                odataRequest.query.queryPath[odataRequest.query.queryPath.length - 1].keys = inactiveKeys;\n                responseObject = this.dataAccess.getData(odataRequest);\n                break;\n            }\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.PreparationAction}(${this.entitySetDefinition.entityTypeName})`:\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.PreparationAction}()`:\n                // Prepare\n                responseObject = this.performGET(keys, false, odataRequest.tenantId);\n                break;\n\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.DiscardAction}(${this.entitySetDefinition.entityTypeName})`:\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.DiscardAction}()`: {\n                // Discard\n                const data = this.performGET(keys, false, odataRequest.tenantId) as DraftElement;\n                const activeData = await this.draftDiscard(keys, data, odataRequest.tenantId);\n                responseObject = activeData;\n                break;\n            }\n\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.ActivationAction}(${this.entitySetDefinition.entityTypeName})`:\n            case `${this.entitySetDefinition.annotations.Common.DraftRoot.ActivationAction}()`: {\n                const draftData = this.performGET(keys, false, odataRequest.tenantId);\n\n                const keyValues = Object.assign({}, keys);\n                keyValues.IsActiveEntity = true;\n                const activeDraft: DraftElement = Object.assign({}, draftData) as DraftElement;\n                activeDraft.IsActiveEntity = true;\n                activeDraft.DraftAdministrativeData = null;\n                activeDraft.HasDraftEntity = false;\n                if (currentMockData.hasEntry(keyValues)) {\n                    currentMockData.updateEntry(keyValues, activeDraft);\n                } else {\n                    currentMockData.addEntry(activeDraft);\n                }\n\n                for (const navPropName in this.entitySetDefinition.navigationPropertyBinding) {\n                    if (\n                        this.entitySetDefinition.navigationPropertyBinding[navPropName].annotations?.Common?.DraftNode\n                    ) {\n                        // For all the draft node data duplicate them\n                        const navPropDetail = this.entityTypeDefinition.navigationProperties.find(\n                            (navProp) => navProp.name === navPropName\n                        ) as NavigationProperty;\n                        const subKeys = this.dataAccess.getNavigationPropertyKeys(\n                            draftData,\n                            navPropDetail,\n                            this.entitySetDefinition.entityType,\n                            {}\n                        );\n                        const navPropEntity = (await this.dataAccess.getMockEntitySet(\n                            this.entitySetDefinition.navigationPropertyBinding[navPropName].name\n                        )) as DraftMockEntitySet;\n                        if (navPropEntity && navPropEntity.activateInactiveVersion) {\n                            navPropEntity.activateInactiveVersion(subKeys, odataRequest.tenantId);\n                        }\n                    }\n                }\n                await this.draftDiscard(keys, draftData, odataRequest.tenantId);\n                responseObject = activeDraft;\n                break;\n            }\n            default:\n                responseObject = currentMockData.executeAction(actionDefinition, actionData, keys);\n                break;\n        }\n        responseObject = currentMockData.onAfterAction(actionDefinition, actionData, keys, responseObject);\n        return responseObject;\n    }\n\n    /**\n     * @param keyValues\n     * @param postData\n     * @param tenantId\n     */\n    public performPOST(keyValues: KeyDefinitions, postData: any, tenantId: string): any {\n        // Validate potentially missing keys\n        if (!Object.hasOwnProperty.call(postData, 'IsActiveEntity')) {\n            postData.IsActiveEntity = false;\n        }\n        if (!Object.hasOwnProperty.call(postData, 'HasActiveEntity')) {\n            postData.HasActiveEntity = false;\n        }\n        return super.performPOST(keyValues, postData, tenantId);\n    }\n\n    /**\n     * @param keyValues\n     * @param tenantId\n     */\n    public async performDELETE(keyValues: KeyDefinitions, tenantId: string): Promise<void> {\n        const draftData = this.performGET(keyValues, false, tenantId);\n        if (this.entitySetDefinition.annotations?.Common?.DraftRoot && draftData && !draftData.IsActiveEntity) {\n            await this.draftDiscard(keyValues, draftData, tenantId);\n        } else {\n            return super.performDELETE(keyValues, tenantId);\n        }\n    }\n}\n","import { join } from 'path';\n\nimport { ODataRequest } from '../request/odataRequest';\nimport { EntitySet, EntityType, Action, Property } from '@sap-ux/annotation-converter';\nimport cloneDeep from 'lodash.clonedeep';\nimport { FileBasedMockData, KeyDefinitions } from './fileBasedMockData';\nimport { FunctionBasedMockData, MockDataContributor } from './functionBasedMockData';\nimport { loadFile, exists, loadJS } from '../utils/fileLoader';\nimport { DataAccessInterface, EntitySetInterface } from './common';\n\nfunction getData(fullData: any, objectPath: string): any {\n    if (fullData === undefined || objectPath.length === 0) {\n        return fullData;\n    }\n    if (objectPath.indexOf('/') === -1) {\n        return fullData[objectPath];\n    } else {\n        const subObjectPath = objectPath.split('/');\n        return getData(fullData[subObjectPath[0]], subObjectPath.slice(1).join('/'));\n    }\n}\n\nfunction transformationFn(type: string, check?: any) {\n    switch (type) {\n        case 'tolower':\n            return (data) => data.toLowerCase();\n        case 'toupper':\n            return (data) => data.toUpperCase();\n        case 'trim':\n            return (data) => data.trim();\n        case 'length':\n            return (data) => {\n                return data && data.length;\n            };\n        case 'round':\n            return (data) => Math.round(parseFloat(data));\n        case 'floor':\n            return (data) => Math.floor(parseFloat(data));\n        case 'ceiling':\n            return (data) => Math.ceil(parseFloat(data));\n        case 'cast':\n            return (data) => {\n                switch (check) {\n                    case 'Edm.String':\n                        return data.toString();\n                    case 'Edm.Boolean':\n                        return data === 'true';\n                    case 'Edm.Byte':\n                    case 'Edm.Int16':\n                    case 'Edm.Int32':\n                    case 'Edm.Int64': {\n                        return parseInt(data, 10);\n                    }\n                    case 'Edm.Decimal': {\n                        return parseFloat(data);\n                    }\n                    default:\n                        return data;\n                }\n            };\n        case 'startswith':\n            return (data) => {\n                return data.startsWith(check);\n            };\n        case 'endswith':\n            return (data) => {\n                return data.endsWith(check);\n            };\n        case 'contains':\n            return (data) => {\n                return data.indexOf(check) !== -1;\n            };\n        case 'concat':\n            return (data) => {\n                return data + check;\n            };\n        case 'indexof':\n            return (data) => {\n                return data.indexOf(check);\n            };\n        case 'substring':\n            return (data) => {\n                return data.substring(check);\n            };\n        case 'matchesPattern':\n            const regExp = new RegExp(check);\n            return (data) => {\n                return regExp.test(data);\n            };\n        case 'noop':\n        default:\n            return (data) => data;\n    }\n}\n\nfunction prepareLiteral(literal, property) {\n    if (!literal) {\n        return literal;\n    }\n    switch (property.type) {\n        case 'Edm.Boolean':\n            return literal === 'true';\n        case 'Edm.String':\n        case 'Edm.Guid':\n            if (literal && literal.startsWith(\"'\")) {\n                return literal.substr(1, literal.length - 2);\n            } else {\n                return literal;\n            }\n        case 'Edm.Byte':\n        case 'Edm.Int16':\n        case 'Edm.Int32':\n        case 'Edm.Int64': {\n            return parseInt(literal, 10);\n        }\n        case 'Edm.Decimal': {\n            return parseFloat(literal);\n        }\n        default:\n            return literal;\n    }\n}\n\n/**\n *\n */\nexport class MockDataEntitySet implements EntitySetInterface {\n    /**\n     * @param mockDataRootFolder\n     * @param entity\n     * @param generateMockData\n     * @param isDraft\n     */\n    public static async read(\n        mockDataRootFolder: string,\n        entity: string,\n        generateMockData: boolean,\n        isDraft: boolean\n    ): Promise<object[]> {\n        const path = join(mockDataRootFolder, entity) + '.json';\n        const jsPath = join(mockDataRootFolder, entity) + '.js';\n        let outData: any[] | object = [];\n        let isInitial = true;\n        if (await exists(jsPath)) {\n            try {\n                //eslint-disable-next-line\n                outData = await loadJS(jsPath);\n                isInitial = false;\n            } catch (e) {\n                console.error(e);\n                return Promise.resolve([]);\n            }\n        }\n        if ((isInitial || !(outData as any).getInitialDataSet) && (await exists(path))) {\n            try {\n                const fileContent = await loadFile(path);\n                let outJsonData;\n                if (fileContent.length === 0) {\n                    outJsonData = [];\n                } else {\n                    outJsonData = JSON.parse(fileContent);\n                    if (isDraft) {\n                        outJsonData.forEach((jsonLine) => {\n                            const IsActiveEntityValue = jsonLine.IsActiveEntity;\n                            if (IsActiveEntityValue === undefined) {\n                                jsonLine.IsActiveEntity = true;\n                                jsonLine.HasActiveEntity = true;\n                                jsonLine.HasDraftEntity = false;\n                            }\n                        });\n                    }\n                }\n                if (isInitial) {\n                    outData = outJsonData;\n                    isInitial = false;\n                } else {\n                    (outData as any).getInitialDataSet = function (contextId) {\n                        return outJsonData.concat();\n                    };\n                }\n            } catch {\n                //return Promise.resolve([]);.\n            }\n        }\n        if (isInitial) {\n            outData = [];\n            if (generateMockData) {\n                (outData as any).__generateMockData = generateMockData;\n            }\n        }\n        return outData as any;\n    }\n\n    protected _rootMockData: object[] = [];\n    private _rootMockDataFn: MockDataContributor;\n    protected contextBasedMockData: Record<string, FileBasedMockData> = {};\n    public readyPromise: Promise<MockDataEntitySet>;\n    protected entitySetDefinition: EntitySet | null;\n    protected entityTypeDefinition: EntityType;\n    protected dataAccess: DataAccessInterface;\n    /**\n     * @param rootFolder\n     * @param entitySetDefinition\n     * @param dataAccess\n     * @param generateMockData\n     * @param initializeMockData\n     * @param isDraft\n     */\n    constructor(\n        rootFolder: string,\n        entitySetDefinition: EntitySet | EntityType,\n        dataAccess: DataAccessInterface,\n        generateMockData: boolean,\n        initializeMockData = true,\n        isDraft = false\n    ) {\n        if (entitySetDefinition._type === 'EntityType') {\n            this.entitySetDefinition = null;\n            this.entityTypeDefinition = entitySetDefinition as EntityType;\n        } else {\n            this.entitySetDefinition = entitySetDefinition as EntitySet;\n            this.entityTypeDefinition = this.entitySetDefinition.entityType;\n        }\n\n        this.dataAccess = dataAccess;\n        if (initializeMockData) {\n            this.readyPromise = MockDataEntitySet.read(\n                rootFolder,\n                entitySetDefinition.name,\n                generateMockData,\n                isDraft\n            ).then((mockData) => {\n                if (typeof mockData === 'object' && !Array.isArray(mockData)) {\n                    this._rootMockDataFn = mockData as MockDataContributor;\n                } else {\n                    this._rootMockData = mockData;\n                }\n                return this;\n            });\n        }\n    }\n\n    /**\n     * @param contextId\n     */\n    public getMockData(contextId: string): FileBasedMockData {\n        if (!Object.prototype.hasOwnProperty.apply(this.contextBasedMockData, [contextId])) {\n            this.contextBasedMockData[contextId] = this._rootMockDataFn\n                ? new FunctionBasedMockData(this._rootMockDataFn, this.entityTypeDefinition, this, contextId)\n                : new FileBasedMockData(this._rootMockData, this.entityTypeDefinition, this);\n        }\n        return this.contextBasedMockData[contextId];\n    }\n\n    /**\n     * @param keyValues\n     * @param dataLine\n     * @param keyDefinition\n     */\n    protected checkKeys(keyValues: KeyDefinitions, dataLine: object, keyDefinition: Property[]): boolean {\n        return Object.keys(keyValues).every((keyName) => {\n            return this.checkKeyValue(\n                dataLine,\n                keyValues,\n                keyName,\n                keyDefinition.find((keyProp) => keyProp.name === keyName) as Property\n            );\n        });\n    }\n\n    /**\n     * @param filterExpression\n     * @param mockData\n     * @param allData\n     */\n    protected checkSpecificProperties(filterExpression: any, mockData: any, allData: any): boolean | null {\n        return null;\n    }\n\n    /**\n     *\n     */\n    public isV4(): boolean {\n        return this.dataAccess.isV4();\n    }\n\n    public getProperty(identifier) {\n        let resolvedPath;\n        if (this.entitySetDefinition) {\n            resolvedPath = this.dataAccess\n                .getMetadata()\n                .resolvePath('/' + this.entitySetDefinition.name + '/' + identifier);\n        } else {\n            resolvedPath = this.entityTypeDefinition.resolvePath(identifier, true);\n        }\n\n        return resolvedPath.target;\n    }\n\n    /**\n     * @param mockData\n     * @param filterExpression\n     * @param tenantId\n     */\n    public checkFilter(mockData: object, filterExpression: any, tenantId: string): boolean {\n        let isValid = true;\n        if (filterExpression.hasOwnProperty('expressions')) {\n            if (filterExpression.operator === 'AND') {\n                isValid = filterExpression.expressions.every((filterValue) => {\n                    return this.checkFilter(mockData, filterValue, tenantId);\n                });\n            } else {\n                isValid = filterExpression.expressions.some((filterValue) => {\n                    return this.checkFilter(mockData, filterValue, tenantId);\n                });\n            }\n        } else {\n            isValid = this.checkSimpleExpression(filterExpression, mockData, tenantId);\n        }\n        return isValid;\n    }\n\n    public checkSimpleExpression(filterExpression, mockData, tenantId: string) {\n        let identifier = filterExpression.identifier;\n        const operator = filterExpression.operator;\n        let literal = filterExpression.literal;\n        let identifierTransformation = transformationFn('noop');\n        let comparisonType = null;\n        if (identifier.type === 'lambda') {\n            const lambdaOperator = identifier.operator;\n            let hasAnyValid = false;\n            let hasAllValid = true;\n            const mockDataToCheckValue = identifierTransformation(getData(mockData, identifier.target));\n            identifier.expression.identifier = identifier.expression.identifier.replace(identifier.key, '');\n            mockDataToCheckValue.find((subMockData) => {\n                const isEntryValid = this.checkSimpleExpression(identifier.expression, subMockData, tenantId);\n                if (!isEntryValid) {\n                    hasAllValid = false;\n                } else {\n                    hasAnyValid = true;\n                }\n            });\n            if (lambdaOperator === 'ANY') {\n                return hasAnyValid;\n            } else {\n                return hasAllValid;\n            }\n        } else if (identifier.method) {\n            identifierTransformation = transformationFn(\n                identifier.method,\n                prepareLiteral(identifier.methodArgs[1], this.getProperty(identifier.methodArgs[0]))\n            );\n            if (identifier.method === 'length' || identifier.method === 'indexof') {\n                comparisonType = 'Edm.Int16';\n            } else {\n                comparisonType = 'Edm.String';\n            }\n            identifier = identifier.methodArgs[0];\n        }\n        let literalTransformation = transformationFn('noop');\n        if (literal && literal.method) {\n            literalTransformation = transformationFn(literal.method);\n            literal = literalTransformation(literal.methodArgs[0]);\n        } else if (!literal) {\n            literal = true;\n        }\n\n        const property = this.getProperty(identifier);\n        if (!comparisonType) {\n            comparisonType = property.type;\n        }\n        const currentMockData = this.getMockData(tenantId);\n        const specificCheck = this.checkSpecificProperties(filterExpression, mockData, currentMockData);\n        if (specificCheck !== null) {\n            return specificCheck;\n        }\n        const mockValue = identifierTransformation(getData(mockData, identifier));\n        if (literal === true) {\n            return mockValue === literal;\n        }\n        let isValid = true;\n        switch (comparisonType) {\n            case 'Edm.Boolean':\n                isValid = !!mockValue === (literal === 'true');\n                break;\n\n            case 'Edm.Byte':\n            case 'Edm.Int16':\n            case 'Edm.Int32':\n            case 'Edm.Int64': {\n                const testValue = parseInt(literal, 10);\n                switch (operator) {\n                    case 'gt':\n                        isValid = mockValue > testValue;\n                        break;\n                    case 'ge':\n                        isValid = mockValue >= testValue;\n                        break;\n                    case 'lt':\n                        isValid = mockValue < testValue;\n                        break;\n                    case 'le':\n                        isValid = mockValue <= testValue;\n                        break;\n                    case 'ne':\n                        isValid = mockValue !== testValue;\n                        break;\n                    case 'eq':\n                    default:\n                        isValid = mockValue === testValue;\n                        break;\n                }\n                break;\n            }\n            case 'Edm.Decimal': {\n                const testValue = parseFloat(literal);\n                switch (operator) {\n                    case 'gt':\n                        isValid = mockValue > testValue;\n                        break;\n                    case 'ge':\n                        isValid = mockValue >= testValue;\n                        break;\n                    case 'lt':\n                        isValid = mockValue < testValue;\n                        break;\n                    case 'le':\n                        isValid = mockValue <= testValue;\n                        break;\n                    case 'ne':\n                        isValid = mockValue !== testValue;\n                        break;\n                    case 'eq':\n                    default:\n                        isValid = mockValue === testValue;\n                        break;\n                }\n                break;\n            }\n            case 'Edm.String':\n            case 'Edm.Guid':\n            default:\n                if (literal && literal.startsWith(\"'\")) {\n                    isValid = mockValue === literal.substr(1, literal.length - 2);\n                } else {\n                    isValid = mockValue === literal;\n                }\n                break;\n        }\n        return isValid;\n    }\n\n    /**\n     * @param mockData\n     * @param searchQuery\n     */\n    public checkSearch(mockData: object, searchQuery: string): boolean {\n        return this.entityTypeDefinition.entityProperties\n            .filter((property) => {\n                switch (property.type) {\n                    case 'Edm.Boolean':\n                    case 'Edm.Int32':\n                        return false;\n                    case 'Edm.String':\n                        return true;\n                    default:\n                        return false;\n                }\n            })\n            .some((property) => {\n                const mockValue = mockData[property.name];\n                return mockValue && mockValue.indexOf(searchQuery) !== -1;\n            });\n    }\n\n    /**\n     * @param mockData\n     * @param keyValues\n     * @param keyName\n     * @param keyProp\n     */\n    public checkKeyValue(mockData: object, keyValues: object, keyName: string, keyProp?: Property): boolean {\n        if (keyProp) {\n            switch (keyProp.type) {\n                case 'Edm.Guid':\n                    if (keyValues[keyName] && keyValues[keyName].startsWith(\"guid'\")) {\n                        return mockData[keyName] === keyValues[keyName].substr(5, keyValues[keyName].length - 6);\n                    }\n                    return mockData[keyName] === keyValues[keyName];\n                case 'Edm.String':\n                    if (keyValues[keyName] && keyValues[keyName].startsWith(\"'\")) {\n                        return mockData[keyName] === keyValues[keyName].substr(1, keyValues[keyName].length - 2);\n                    }\n                    return mockData[keyName] === keyValues[keyName];\n                case 'Edm.Int32':\n                case 'Edm.Int64':\n                case 'Edm.Int16':\n                    return mockData[keyName] === parseInt(keyValues[keyName], 10);\n                default:\n                    return mockData[keyName] === keyValues[keyName];\n            }\n        }\n        return mockData[keyName] === keyValues[keyName];\n    }\n\n    /**\n     * @param dataLine\n     */\n    public getKeys(dataLine: object): Record<string, string | number | boolean> {\n        const keys = this.entityTypeDefinition.keys;\n        const keyValues = {};\n        keys.forEach((keyProp) => {\n            keyValues[keyProp.name] = dataLine[keyProp.name];\n        });\n\n        return keyValues;\n    }\n\n    /**\n     * @param keyValues\n     */\n    protected prepareKeys(keyValues: KeyDefinitions): KeyDefinitions {\n        let outKeys = {};\n        if (keyValues === undefined) {\n            return outKeys;\n        }\n        if (Object.keys(keyValues).length === 1 && Object.values(keyValues)[0] === undefined) {\n            let keyValue;\n            Object.keys(keyValues).forEach((keyName) => {\n                keyValue = keyName;\n                if (keyValue.startsWith(\"'\")) {\n                    keyValue = keyValue.substr(1, keyValue.length - 2);\n                }\n            });\n            const keyName = this.entityTypeDefinition.keys[0].name;\n            outKeys[keyName] = keyValue;\n        } else {\n            outKeys = keyValues;\n        }\n        // Remove non key items only if all keys are provided\n        let realKeys = outKeys;\n        if (this.entityTypeDefinition.keys.every((keyProp) => outKeys[keyProp.name] !== undefined)) {\n            realKeys = {};\n            Object.keys(outKeys).forEach((keyName) => {\n                if (this.entityTypeDefinition.keys.find((keyProp) => keyProp.name === keyName)) {\n                    realKeys[keyName] = outKeys[keyName];\n                }\n            });\n        }\n\n        return realKeys;\n    }\n\n    /**\n     * @param keyValues\n     * @param asArray\n     * @param tenantId\n     * @param dontClone\n     */\n    public performGET(keyValues: KeyDefinitions, asArray: boolean, tenantId: string, dontClone = false): any {\n        const currentMockData = this.getMockData(tenantId);\n        if (keyValues && Object.keys(keyValues).length) {\n            keyValues = this.prepareKeys(keyValues);\n            const data = currentMockData.fetchEntries(keyValues);\n            if (!data || (Array.isArray(data) && data.length === 0 && !asArray)) {\n                if (!currentMockData.hasEntries()) {\n                    return currentMockData.getEmptyObject();\n                } else {\n                    return null;\n                }\n            }\n            if (Array.isArray(data) && !asArray) {\n                if (dontClone) {\n                    return data[0];\n                }\n                return cloneDeep(data[0]);\n            }\n            if (dontClone) {\n                return data;\n            }\n            return cloneDeep(data);\n        }\n        if (this.entitySetDefinition?.entityType?.annotations?.Common?.ResultContext?.valueOf()) {\n            // Parametrized entityset, they cannot be requested directly\n            throw new Error(JSON.stringify({ message: 'Parametrized entityset need to be queried with keys' }));\n        }\n        if (!asArray) {\n            return cloneDeep(currentMockData.getDefaultElement());\n        }\n        return currentMockData.getAllEntries();\n    }\n\n    /**\n     * @param keyValues\n     * @param postData\n     * @param tenantId\n     */\n    public performPOST(keyValues: KeyDefinitions, postData: object, tenantId: string): any {\n        // Validate potentially missing keys\n        keyValues = this.prepareKeys(keyValues);\n        const currentMockData = this.getMockData(tenantId);\n        Object.keys(keyValues).forEach((key) => {\n            if (!postData[key]) {\n                postData[key] = keyValues[key];\n            }\n        });\n        this.entityTypeDefinition.keys.forEach((keyProp) => {\n            if (postData[keyProp.name] === undefined || postData[keyProp.name].length === 0) {\n                // Missing key\n                if (keyProp.name === 'IsActiveEntity') {\n                    postData['IsActiveEntity'] = false;\n                } else {\n                    postData[keyProp.name] = currentMockData.generateKey(keyProp as Property);\n                }\n            }\n        });\n        let newObject = currentMockData.getEmptyObject();\n        newObject = Object.assign(newObject, postData);\n        currentMockData.addEntry(newObject);\n        return newObject;\n    }\n\n    /**\n     * @param keyValues\n     * @param patchData\n     * @param tenantId\n     */\n    public performPATCH(keyValues: KeyDefinitions, patchData: object, tenantId: string): any {\n        keyValues = this.prepareKeys(keyValues);\n        const data = this.performGET(keyValues, false, tenantId);\n        const currentMockData = this.getMockData(tenantId);\n        const updatedData = Object.assign(data, patchData);\n        currentMockData.onBeforeUpdateEntry(keyValues, updatedData);\n        currentMockData.updateEntry(keyValues, updatedData);\n        currentMockData.onAfterUpdateEntry(keyValues, updatedData);\n        return updatedData;\n    }\n\n    /**\n     * @param keyValues\n     * @param tenantId\n     */\n    public async performDELETE(keyValues: KeyDefinitions, tenantId: string): Promise<void> {\n        const currentMockData = this.getMockData(tenantId);\n        keyValues = this.prepareKeys(keyValues);\n        currentMockData.removeEntry(keyValues);\n    }\n\n    /**\n     * @param actionDefinition\n     * @param actionData\n     * @param odataRequest\n     * @param keys\n     */\n    public async executeAction(\n        actionDefinition: Action,\n        actionData: object,\n        odataRequest: ODataRequest,\n        keys: Record<string, any>\n    ): Promise<any> {\n        const currentMockData = this.getMockData(odataRequest.tenantId);\n        keys = this.prepareKeys(keys);\n        actionData = currentMockData.onBeforeAction(actionDefinition, actionData, keys);\n        let responseObject = currentMockData.executeAction(actionDefinition, actionData, keys);\n        responseObject = currentMockData.onAfterAction(actionDefinition, actionData, keys, responseObject);\n        return responseObject;\n    }\n}\n","import cloneDeep from 'lodash.clonedeep';\nimport { ComplexType, Property, EntityType } from '@sap-ux/annotation-converter';\nimport { generateId, uuidv4 } from './id';\nimport { Action } from '@sap-ux/vocabularies-types';\nimport { EntitySetInterface } from './common';\n\nexport type KeyDefinitions = Record<string, number | boolean | string>;\n\n/**\n *\n */\nexport class FileBasedMockData {\n    protected _mockData: object[];\n    protected _entityType: EntityType;\n    protected _mockDataEntitySet: EntitySetInterface;\n    /**\n     * @param mockData\n     * @param entityType\n     * @param mockDataEntitySet\n     */\n    constructor(mockData: object[], entityType: EntityType, mockDataEntitySet: EntitySetInterface) {\n        this._entityType = entityType;\n\n        this._mockDataEntitySet = mockDataEntitySet;\n        if (mockData.length === 0 && (mockData as any).__generateMockData) {\n            this._mockData = this.generateMockData();\n        } else {\n            this._mockData = cloneDeep(mockData);\n            if (this._mockData.forEach) {\n                this._mockData.forEach((mockLine) => {\n                    // We need to ensure that complex types are at least partially created\n                    this._entityType.entityProperties.forEach((prop) => {\n                        if (prop.targetType && !mockLine[prop.name]) {\n                            mockLine[prop.name] = {};\n                            prop.targetType.properties.forEach((subProp) => {\n                                mockLine[prop.name][subProp.name] = this.getDefaultValueFromType(\n                                    subProp.type,\n                                    subProp.targetType,\n                                    subProp.defaultValue\n                                );\n                            });\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    /**\n     * @param mockEntry\n     */\n    addEntry(mockEntry): void {\n        this._mockData.push(mockEntry);\n    }\n\n    /**\n     * @param keyValues\n     * @param updatedData\n     */\n    updateEntry(keyValues: KeyDefinitions, updatedData: object): void {\n        const dataIndex = this.getDataIndex(keyValues);\n        this._mockData[dataIndex] = updatedData;\n    }\n\n    /**\n     * @param keyValues\n     */\n    fetchEntries(keyValues: KeyDefinitions): object[] {\n        const keys = this._entityType.keys;\n        return this._mockData.filter((mockData) => {\n            return Object.keys(keyValues).every((keyName) => {\n                return this._mockDataEntitySet.checkKeyValue(\n                    mockData,\n                    keyValues,\n                    keyName,\n                    keys.find((keyProp) => keyProp.name === keyName) as Property\n                );\n            });\n        });\n    }\n\n    /**\n     * @param keyValues\n     */\n    hasEntry(keyValues: KeyDefinitions): boolean {\n        return this.getDataIndex(keyValues) !== -1;\n    }\n\n    /**\n     *\n     */\n    hasEntries(): boolean {\n        return this._mockData.length > 0;\n    }\n\n    /**\n     *\n     */\n    getAllEntries(): object[] {\n        return cloneDeep(this._mockData);\n    }\n\n    /**\n     * @param keyValues\n     */\n    protected getDataIndex(keyValues: KeyDefinitions): number {\n        const keys = this._entityType.keys;\n        return this._mockData.findIndex((mockData) => {\n            return Object.keys(keyValues).every((keyName) => {\n                return this._mockDataEntitySet.checkKeyValue(\n                    mockData,\n                    keyValues,\n                    keyName,\n                    keys.find((keyProp) => keyProp.name === keyName) as Property\n                );\n            });\n        });\n    }\n\n    /**\n     * @param keyValues\n     */\n    removeEntry(keyValues: KeyDefinitions): void {\n        const dataIndex = this.getDataIndex(keyValues);\n        if (dataIndex !== -1) {\n            this._mockData.splice(dataIndex, 1);\n        }\n    }\n\n    /**\n     * @param type\n     * @param complexType\n     * @param defaultValue\n     */\n    protected getDefaultValueFromType(type: string, complexType: ComplexType, defaultValue?: any): any {\n        if (complexType) {\n            const outData = {};\n            complexType.properties.forEach((subProp) => {\n                outData[subProp.name] = this.getDefaultValueFromType(\n                    subProp.type,\n                    subProp.targetType,\n                    subProp.defaultValue\n                );\n            });\n            return outData;\n        } else {\n            if (defaultValue !== undefined) {\n                return defaultValue;\n            }\n            switch (type) {\n                case 'Edm.Int16':\n                case 'Edm.Byte':\n                case 'Edm.Int32':\n                case 'Edm.Int64':\n                    return 0;\n                case 'Edm.Boolean':\n                    return false;\n                default:\n                    return '';\n            }\n        }\n    }\n\n    /**\n     * @param type\n     * @param complexType\n     * @param propertyName\n     * @param lineIndex\n     */\n    protected getRandomValueFromType(\n        type: string,\n        complexType: ComplexType,\n        propertyName: string,\n        lineIndex: number\n    ): any {\n        if (complexType) {\n            const outData = {};\n            complexType.properties.forEach((subProp) => {\n                outData[subProp.name] = this.getRandomValueFromType(\n                    subProp.type,\n                    subProp.targetType,\n                    subProp.name,\n                    lineIndex\n                );\n            });\n            return outData;\n        } else {\n            switch (type) {\n                case 'Edm.Int16':\n                case 'Edm.Int32':\n                case 'Edm.Int64':\n                    return Math.floor(Math.random() * 10000);\n                case 'Edm.String':\n                    return `${propertyName}_${lineIndex}`;\n                case 'Edm.Boolean':\n                    return Math.random() < 0.5;\n                case 'Edm.Byte':\n                    return Math.floor(Math.random() * 10);\n                case 'Edm.Decimal':\n                    return Math.floor(Math.random() * 100000) / 100;\n                case 'Edm.Guid':\n                    return uuidv4();\n                case 'Edm.Date':\n                case 'Edm.DateTime':\n                case 'Edm.DateTimeOffset': {\n                    const date = new Date();\n                    date.setFullYear(2000 + Math.floor(Math.random() * 22));\n                    date.setDate(Math.floor(Math.random() * 30));\n                    date.setMonth(Math.floor(Math.random() * 12));\n                    date.setMilliseconds(0);\n                    if (type === 'Edm.Date') {\n                        const dateOut =\n                            date.getUTCFullYear() +\n                            '-' +\n                            ('0' + (date.getUTCMonth() + 1)).slice(-2) +\n                            '-' +\n                            ('0' + date.getUTCDate()).slice(-2);\n                        return this._mockDataEntitySet.isV4() ? dateOut : '/Date(' + date.getTime() + '+0000)/';\n                    } else {\n                        return this._mockDataEntitySet.isV4()\n                            ? date.toISOString()\n                            : '/Date(' + date.getTime() + '+0000)/';\n                    }\n                }\n                case 'Edm.Time':\n                case 'Time':\n                    // ODataModel expects ISO8601 duration format\n                    return (\n                        'PT' +\n                        Math.floor(Math.random() * 23) +\n                        'H' +\n                        Math.floor(Math.random() * 59) +\n                        'M' +\n                        Math.floor(Math.random() * 59) +\n                        'S'\n                    );\n                case 'Edm.TimeOfDay':\n                case 'Edm.Binary':\n                default:\n                    return '';\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    getEmptyObject(): object {\n        const outObj = {};\n        this._entityType.entityProperties.forEach((property) => {\n            outObj[property.name] = this.getDefaultValueFromType(\n                property.type,\n                property.targetType,\n                property.defaultValue\n            );\n        });\n\n        return outObj;\n    }\n\n    /**\n     *\n     */\n    getDefaultElement(): object {\n        if (this._mockData && !this._mockData.length) {\n            return this._mockData;\n        } else if (this._mockData.length >= 1) {\n            return cloneDeep(this._mockData[0]);\n        } else {\n            return this.getEmptyObject();\n        }\n    }\n\n    /**\n     * @param property\n     * @param lineIndex\n     */\n    generateKey(property: Property, lineIndex?: number, mockData: any = []) {\n        const currentMockData = this._mockData || mockData;\n        let highestIndex;\n        switch (property.type) {\n            case 'Edm.Int32':\n                highestIndex = 0;\n                currentMockData.forEach((mockLine: any) => {\n                    const lineIndex = parseInt(mockLine[property.name], 10);\n                    highestIndex = Math.max(highestIndex, lineIndex);\n                });\n                return highestIndex + 1;\n            case 'Edm.Boolean':\n                return Math.random() > 0.5;\n            case 'Edm.Guid':\n                return uuidv4();\n            case 'Edm.String':\n                if (lineIndex === undefined) {\n                    lineIndex = currentMockData.length + 1;\n                }\n                return `${property.name}_${lineIndex}`;\n            default:\n                return generateId(12);\n        }\n    }\n\n    /**\n     * @param iIndex\n     */\n    generateMockDataLine(iIndex: number, mockData: any) {\n        const outObj = {};\n        this._entityType.entityProperties.forEach((property) => {\n            if (property.isKey) {\n                outObj[property.name] = this.generateKey(property, iIndex, mockData);\n            } else {\n                outObj[property.name] = this.getRandomValueFromType(\n                    property.type,\n                    property.targetType,\n                    property.name,\n                    iIndex\n                );\n            }\n        });\n\n        return outObj;\n    }\n\n    /**\n     *\n     */\n    generateMockData() {\n        const mockData = [];\n        for (let i = 0; i < 150; i++) {\n            mockData.push(this.generateMockDataLine(i, mockData));\n        }\n        return mockData;\n    }\n\n    /**\n     * Allow to modify the action data beforehand\n     *\n     * @param actionDefinition\n     * @param actionData\n     * @param keys\n     */\n    onBeforeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object {\n        return actionData;\n    }\n    /**\n     * Do something with the action\n     *\n     * @param actionDefinition\n     * @param actionData\n     * @param keys\n     */\n    executeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object {\n        return actionData;\n    }\n\n    /**\n     * Allow to modify the response data\n     *\n     * @param actionDefinition\n     * @param actionData\n     * @param keys\n     * @param responseData\n     */\n    onAfterAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): any {\n        return responseData;\n    }\n\n    //eslint-disable-next-line\n    onAfterUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void {}\n    //eslint-disable-next-line\n    onBeforeUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void {}\n    //eslint-disable-next-line\n    hasCustomAggregate(customAggregateName: string): boolean {\n        return false;\n    }\n    //eslint-disable-next-line\n    performCustomAggregate(customAggregateName: string, dataToAggregate: any[]): any {}\n}\n","import { EntityType, Property } from '@sap-ux/annotation-converter';\nimport { FileBasedMockData, KeyDefinitions } from './fileBasedMockData';\nimport { Action } from '@sap-ux/vocabularies-types';\nimport { EntitySetInterface, ExecutionError } from './common';\n\nexport type MockDataContributor = {\n    getInitialDataSet?: (contextId: string) => object[];\n    addEntry?: (mockEntry: object) => void;\n    updateEntry?: (keyValues: KeyDefinitions, newData: object) => void;\n    removeEntry?: (keyValues: KeyDefinitions) => void;\n    hasEntry?: (keyValues: KeyDefinitions) => boolean;\n    hasEntries?: () => boolean;\n    fetchEntries?: (keyValues: KeyDefinitions) => object[];\n    getAllEntries?: () => object[];\n    getEmptyObject?: () => object;\n    getDefaultElement?: () => object;\n    generateKey?: (property: Property) => any;\n    onBeforeAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;\n    executeAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;\n    onAfterAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): any;\n    onAfterUpdateEntry?(keyValues: KeyDefinitions, updatedData: object): void;\n    onBeforeUpdateEntry?(keyValues: KeyDefinitions, updatedData: object): void;\n    hasCustomAggregate?(customAggregateName: string): boolean;\n    performCustomAggregate?(customAggregateName: string, dataToAggregate: any[]): any;\n    throwError?(message: string, statusCode?: number, messageData?: object);\n    base?: {\n        generateMockData: () => void;\n        addEntry: (mockEntry: object) => void;\n        updateEntry: (keyValues: KeyDefinitions, newData: object) => void;\n        removeEntry: (keyValues: KeyDefinitions) => void;\n        hasEntry: (keyValues: KeyDefinitions) => boolean;\n        fetchEntries: (keyValues: KeyDefinitions) => object[];\n        hasEntries: () => boolean;\n        getAllEntries: () => object[];\n        getEmptyObject: () => object;\n        getDefaultElement: () => object;\n    };\n};\n\n/**\n *\n */\nexport class FunctionBasedMockData extends FileBasedMockData {\n    private _mockDataFn: MockDataContributor;\n\n    /**\n     * @param mockDataFn\n     * @param entityType\n     * @param mockDataEntitySet\n     * @param contextId\n     */\n    constructor(\n        mockDataFn: MockDataContributor,\n        entityType: EntityType,\n        mockDataEntitySet: EntitySetInterface,\n        contextId: string\n    ) {\n        const noMock: any = [];\n        noMock.__generateMockData = true;\n        super(\n            (mockDataFn?.getInitialDataSet ? mockDataFn.getInitialDataSet(contextId) : noMock) || noMock,\n            entityType,\n            mockDataEntitySet\n        );\n        this._mockDataFn = mockDataFn;\n        this._mockDataFn.base = {\n            generateMockData: super.generateMockData.bind(this),\n            addEntry: super.addEntry.bind(this),\n            updateEntry: super.updateEntry.bind(this),\n            removeEntry: super.removeEntry.bind(this),\n            fetchEntries: super.fetchEntries.bind(this),\n            hasEntry: super.hasEntry.bind(this),\n            hasEntries: super.hasEntries.bind(this),\n            getAllEntries: super.getAllEntries.bind(this),\n            getEmptyObject: super.getEmptyObject.bind(this),\n            getDefaultElement: super.getDefaultElement.bind(this)\n        };\n        this._mockDataFn.throwError = function (\n            message: string,\n            statusCode = 500,\n            messageData?: object,\n            isSAPMessage = false\n        ) {\n            const executionError = new ExecutionError(message, statusCode, messageData, isSAPMessage);\n            throw executionError;\n        };\n    }\n\n    /**\n     * @param mockEntry\n     */\n    addEntry(mockEntry): void {\n        if (this._mockDataFn.addEntry) {\n            return this._mockDataFn.addEntry(mockEntry);\n        }\n        return super.addEntry(mockEntry);\n    }\n\n    /**\n     * @param keyValues\n     * @param updatedData\n     */\n    updateEntry(keyValues: KeyDefinitions, updatedData: object): void {\n        if (this._mockDataFn.updateEntry) {\n            return this._mockDataFn.updateEntry(keyValues, updatedData);\n        }\n        return super.updateEntry(keyValues, updatedData);\n    }\n\n    /**\n     * @param keyValues\n     */\n    removeEntry(keyValues: KeyDefinitions): void {\n        if (this._mockDataFn.removeEntry) {\n            return this._mockDataFn.removeEntry(keyValues);\n        }\n        return super.removeEntry(keyValues);\n    }\n\n    /**\n     * @param keyValues\n     */\n    fetchEntries(keyValues: KeyDefinitions): object[] {\n        if (this._mockDataFn?.fetchEntries) {\n            return this._mockDataFn.fetchEntries(keyValues);\n        } else {\n            return super.fetchEntries(keyValues);\n        }\n    }\n\n    /**\n     * @param keyValues\n     */\n    hasEntry(keyValues: KeyDefinitions): boolean {\n        if (this._mockDataFn.hasEntry) {\n            return this._mockDataFn.hasEntry(keyValues);\n        }\n        return super.hasEntry(keyValues);\n    }\n\n    /**\n     *\n     */\n    hasEntries(): boolean {\n        if (this._mockDataFn.hasEntries) {\n            return this._mockDataFn.hasEntries();\n        }\n        return super.hasEntries();\n    }\n\n    /**\n     *\n     */\n    getEmptyObject(): object {\n        if (this._mockDataFn?.getEmptyObject) {\n            return this._mockDataFn.getEmptyObject();\n        } else {\n            return super.getEmptyObject();\n        }\n    }\n\n    /**\n     *\n     */\n    getDefaultElement(): object {\n        if (this._mockDataFn?.getDefaultElement) {\n            return this._mockDataFn.getDefaultElement();\n        } else {\n            return super.getDefaultElement();\n        }\n    }\n\n    /**\n     * @param property\n     * @param lineIndex\n     */\n    generateKey(property: Property, lineIndex: number) {\n        if (this._mockDataFn?.generateKey) {\n            return this._mockDataFn.generateKey(property);\n        } else {\n            return super.generateKey(property, lineIndex);\n        }\n    }\n\n    /**\n     *\n     */\n    getAllEntries(): object[] {\n        if (this._mockDataFn?.getAllEntries) {\n            return this._mockDataFn.getAllEntries();\n        } else {\n            return super.getAllEntries();\n        }\n    }\n\n    /**\n     * @param actionDefinition\n     * @param actionData\n     * @param keys\n     */\n    onBeforeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object {\n        if (this._mockDataFn?.onBeforeAction) {\n            return this._mockDataFn.onBeforeAction(actionDefinition, actionData, keys);\n        } else {\n            return super.onBeforeAction(actionDefinition, actionData, keys);\n        }\n    }\n\n    /**\n     * @param actionDefinition\n     * @param actionData\n     * @param keys\n     */\n    executeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): object {\n        if (this._mockDataFn?.executeAction) {\n            return this._mockDataFn.executeAction(actionDefinition, actionData, keys);\n        } else {\n            return super.executeAction(actionDefinition, actionData, keys);\n        }\n    }\n\n    /**\n     * @param actionDefinition\n     * @param actionData\n     * @param keys\n     * @param responseData\n     */\n    onAfterAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): any {\n        if (this._mockDataFn?.onAfterAction) {\n            return this._mockDataFn.onAfterAction(actionDefinition, actionData, keys, responseData);\n        } else {\n            return super.onAfterAction(actionDefinition, actionData, keys, responseData);\n        }\n    }\n\n    /**\n     * @param keyValues\n     * @param updatedData\n     */\n    onAfterUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void {\n        if (this._mockDataFn?.onAfterUpdateEntry) {\n            return this._mockDataFn.onAfterUpdateEntry(keyValues, updatedData);\n        } else {\n            return super.onAfterUpdateEntry(keyValues, updatedData);\n        }\n    }\n\n    /**\n     * @param keyValues\n     * @param updatedData\n     */\n    onBeforeUpdateEntry(keyValues: KeyDefinitions, updatedData: object): void {\n        if (this._mockDataFn?.onBeforeUpdateEntry) {\n            return this._mockDataFn.onBeforeUpdateEntry(keyValues, updatedData);\n        } else {\n            return super.onBeforeUpdateEntry(keyValues, updatedData);\n        }\n    }\n    /**\n     * @param customAggregateName\n     */\n    hasCustomAggregate(customAggregateName: string): boolean {\n        if (this._mockDataFn?.hasCustomAggregate) {\n            return this._mockDataFn.hasCustomAggregate(customAggregateName);\n        } else {\n            return super.hasCustomAggregate(customAggregateName);\n        }\n    }\n\n    /**\n     * @param customAggregateName\n     * @param dataToAggregate\n     */\n    performCustomAggregate(customAggregateName: string, dataToAggregate: any[]): any {\n        if (this._mockDataFn?.performCustomAggregate) {\n            return this._mockDataFn.performCustomAggregate(customAggregateName, dataToAggregate);\n        } else {\n            return super.performCustomAggregate(customAggregateName, dataToAggregate);\n        }\n    }\n}\n","const CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n/**\n * @param length\n */\nexport function generateId(length) {\n    let result = '';\n    while (length--) {\n        result += CHARS.charAt(Math.floor(Math.random() * CHARS.length));\n    }\n    return result;\n}\n\n/**\n *\n */\nexport function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0,\n            v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n","import { parseEDMX } from '@sap-ux/edmx-parser';\nimport { Action, ConverterOutput, convertTypes, EntitySet, EntityType } from '@sap-ux/annotation-converter';\nimport { ParserOutput } from '@sap-ux/vocabularies-types';\n\n/**\n *\n */\nexport class ODataMetadata {\n    /**\n     * @param edmx\n     */\n    public static async parse(edmx: string): Promise<ODataMetadata> {\n        const metadata: ParserOutput = parseEDMX(edmx);\n        const converterMetadata: ConverterOutput = convertTypes(metadata);\n        return new ODataMetadata(converterMetadata, metadata);\n    }\n\n    public readonly typeToEntityMapping: object = {};\n    protected readonly metadata: ConverterOutput;\n    protected readonly parserMetadata: ParserOutput;\n\n    /**\n     * @param metadata\n     * @param parserMetadata\n     */\n    private constructor(metadata: ConverterOutput, parserMetadata: ParserOutput) {\n        this.metadata = metadata;\n        this.parserMetadata = parserMetadata;\n    }\n\n    /**\n     *\n     */\n    public getVersion(): string {\n        return this.metadata.version === '1.0' ? '2.0' : '4.0';\n    }\n\n    /**\n     * @param entitySetName\n     */\n    public getEntitySet(entitySetName: string): EntitySet {\n        return this.metadata.entitySets.find((entitySet) => entitySet.name === entitySetName);\n    }\n\n    /**\n     *\n     */\n    public getEntitySets(): EntitySet[] {\n        return this.metadata.entitySets;\n    }\n\n    /**\n     * @param entityTypeName\n     */\n    public getEntityType(entityTypeName: string): EntityType {\n        return this.metadata.entityTypes.find((entityType) => entityType.name === entityTypeName);\n    }\n\n    /**\n     * @param entityTypeName\n     */\n    public getEntityTypeByFQDN(entityTypeName: string): EntityType {\n        return this.metadata.entityTypes.find((entityType) => entityType.fullyQualifiedName === entityTypeName);\n    }\n    /**\n     * @param entityTypeName\n     */\n    public getEntitySetByType(entityTypeName: string): EntitySet {\n        return this.metadata.entitySets.find((entitySet) => entitySet.entityTypeName === entityTypeName);\n    }\n\n    /**\n     *\n     */\n    public getNamespace(): string {\n        return this.metadata.namespace;\n    }\n\n    /**\n     * @param actionFQN\n     */\n    public getActionByFQN(actionFQN: string): Action | undefined {\n        return this.metadata.actions.find((action) => action.fullyQualifiedName === actionFQN);\n    }\n\n    /**\n     *\n     */\n    public getEntityContainerPath(): string {\n        return this.parserMetadata.schema.entityContainer.fullyQualifiedName;\n    }\n    /**\n     * @param entitySet\n     */\n    public isDraftEntity(entitySet: EntitySet): boolean {\n        return (\n            entitySet?.annotations?.Common?.DraftRoot !== undefined ||\n            entitySet?.annotations?.Common?.DraftNode !== undefined\n        );\n    }\n\n    /**\n     * @param entitySet\n     */\n    public isStickyEntity(entitySet: EntitySet): boolean {\n        return entitySet?.annotations?.Session?.StickySessionSupported !== undefined;\n    }\n\n    public resolvePath(path: string): any {\n        return this.metadata.resolvePath(path);\n    }\n    //\n    // public getKeys(entitySet: string): string[] {\n    //     return this.entities[entitySet].keys;\n    // }\n    //\n    // public getTarget(entitySet: string, navProperty: string): string {\n    //     const props = navProperty.split('/');\n    //     let target = entitySet;\n    //     for (const prop of props) {\n    //         if (!this.entities[target]) {\n    //             console.error(`Could not find entitySet ${entitySet}`);\n    //             return undefined;\n    //         }\n    //         const nav = this.entities[target].navigation[prop];\n    //         if (!nav) {\n    //             console.error(`Could not find navigation for ${entitySet}.${prop}`);\n    //             return undefined;\n    //         } else {\n    //             target = this.typeToEntityMapping[nav['to']] || nav['to'];\n    //         }\n    //     }\n    //     return target;\n    // }\n    //\n    // public getTargetPropertyMap(entitySet: string, navProperty: string): object {\n    //     if (navProperty.includes('/')) {\n    //         const props = navProperty.split('/');\n    //         navProperty = props.pop();\n    //         entitySet = this.getTarget(entitySet, props.join('/'));\n    //     }\n    //     return this.entities[entitySet].navigation[navProperty]['keys'];\n    // }\n}\n","import { join } from 'path';\nimport { exists, loadJS } from '../utils/fileLoader';\nimport { Action } from '@sap-ux/vocabularies-types';\nimport { ExecutionError } from './common';\n\nexport type MockEntityContainerContributer = {\n    onBeforeAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;\n    executeAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>): object;\n    onAfterAction?(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): any;\n    throwError?(message: string, statusCode?: number, messageData?: object);\n};\n\n/**\n *\n */\nexport class MockEntityContainer {\n    /**\n     * @param mockDataRootFolder\n     * @returns Promise<MockEntityContainerContributer>\n     */\n    public static async read(mockDataRootFolder: string): Promise<MockEntityContainerContributer> {\n        const jsPath = join(mockDataRootFolder, 'EntityContainer') + '.js';\n        let outData: MockEntityContainerContributer;\n        if (await exists(jsPath)) {\n            try {\n                //eslint-disable-next-line\n                outData = await loadJS(jsPath);\n            } catch (e) {\n                outData = {};\n                console.error(e);\n            }\n        }\n        if (!outData) {\n            outData = {\n                executeAction(actionDefinition, actionData, keys) {\n                    this.throwError('Unsupported Action', 501, {\n                        error: {\n                            message: `FunctionImport or Action \"${actionDefinition.name}\" not mocked`\n                        }\n                    });\n                    return [];\n                }\n            };\n        }\n\n        outData.throwError = function (message: string, statusCode = 500, messageData?: object, isSAPMessage = false) {\n            const executionError = new ExecutionError(message, statusCode, messageData, isSAPMessage);\n            throw executionError;\n        };\n\n        return outData;\n    }\n}\n","import { MockDataEntitySet } from './entitySet';\nimport { ODataRequest } from '../request/odataRequest';\nimport { EntityType, EntitySet, Action } from '@sap-ux/annotation-converter';\nimport { ODataV4Request } from '../request/odataV4Request';\nimport cloneDeep from 'lodash.clonedeep';\nimport { generateId } from './id';\nimport { KeyDefinitions } from './fileBasedMockData';\nimport { DataAccessInterface } from './common';\n\n/**\n *\n */\nexport class StickyMockEntitySet extends MockDataEntitySet {\n    private _currentSessionObject = {};\n    currentUUID;\n    sessionTimeoutRef;\n    public sessionTimeoutTime = 120;\n\n    /**\n     * @param rootFolder\n     * @param entitySetDefinition\n     * @param dataAccess\n     * @param generateMockData\n     */\n    constructor(\n        rootFolder: string,\n        entitySetDefinition: EntitySet | EntityType,\n        dataAccess: DataAccessInterface,\n        generateMockData: boolean\n    ) {\n        super(rootFolder, entitySetDefinition, dataAccess, generateMockData);\n    }\n\n    /**\n     * @param tenantId\n     */\n    private getSessionObject(tenantId: string) {\n        return this._currentSessionObject[tenantId];\n    }\n\n    /**\n     * @param tenantId\n     * @param objectData\n     */\n    private setSessionObject(tenantId: string, objectData: object) {\n        this._currentSessionObject[tenantId] = objectData;\n    }\n\n    /**\n     * @param tenantId\n     */\n    public resetSessionTimeout(tenantId: string): any {\n        clearTimeout(this.sessionTimeoutRef);\n        this.sessionTimeoutRef = setTimeout(() => {\n            this.currentUUID = null;\n            this.setSessionObject(tenantId, null);\n        }, this.sessionTimeoutTime * 1000);\n        return this.currentUUID;\n    }\n\n    /**\n     * @param keyValues\n     * @param patchData\n     * @param tenantId\n     */\n    public performPATCH(keyValues: KeyDefinitions, patchData: object, tenantId: string): any {\n        keyValues = this.prepareKeys(keyValues);\n        const data = this.performGET(keyValues, false, tenantId);\n        const currentMockData = this.getMockData(tenantId);\n        const updatedData = Object.assign(data, patchData);\n        currentMockData.onBeforeUpdateEntry(keyValues, updatedData);\n        if (updatedData.__transient) {\n            this.setSessionObject(tenantId, updatedData);\n        } else {\n            currentMockData.updateEntry(keyValues, updatedData);\n        }\n\n        currentMockData.onAfterUpdateEntry(keyValues, updatedData);\n\n        return updatedData;\n    }\n\n    /**\n     * @param actionDefinition\n     * @param actionData\n     * @param odataRequest\n     * @param keys\n     */\n    public async executeAction(\n        actionDefinition: Action,\n        actionData: object,\n        odataRequest: ODataRequest,\n        keys: Record<string, any>\n    ): Promise<any> {\n        const currentMockData = this.getMockData(odataRequest.tenantId);\n        keys = this.prepareKeys(keys);\n        actionData = currentMockData.onBeforeAction(actionDefinition, actionData, keys);\n        let responseObject;\n        switch (actionDefinition.fullyQualifiedName) {\n            // Draft Edit Action\n            case `${this.entitySetDefinition.annotations.Session.StickySessionSupported.EditAction}(${actionDefinition.sourceType})`: {\n                const data = this.performGET(keys, false, odataRequest.tenantId);\n                const duplicate = Object.assign({}, data);\n                this.setSessionObject(odataRequest.tenantId, duplicate);\n                duplicate.__transient = true;\n                duplicate.__keys = keys;\n                responseObject = duplicate;\n                break;\n            }\n\n            case `${this.entitySetDefinition.annotations.Session.StickySessionSupported.NewAction}(${actionDefinition.sourceType})`: {\n                // New\n                const newObject: any = Object.assign({}, actionData);\n                const nonNullableProperties = actionDefinition.returnEntityType.entityProperties.filter(\n                    (prop) => prop.nullable === false\n                );\n                nonNullableProperties.forEach((nonNullableProperty) => {\n                    if (newObject[nonNullableProperty.name] === undefined) {\n                        if (Object.prototype.hasOwnProperty.call(nonNullableProperty, 'defaultValue')) {\n                            newObject[nonNullableProperty.name] = nonNullableProperty.defaultValue;\n                        } else {\n                            switch (nonNullableProperty.type) {\n                                case 'Edm.String':\n                                    newObject[nonNullableProperty.name] = '';\n                                    break;\n                                case 'Edm.Guid':\n                                    newObject[nonNullableProperty.name] = '';\n                                    break;\n                            }\n                        }\n                    }\n                });\n\n                this.setSessionObject(odataRequest.tenantId, newObject);\n                newObject.__transient = true;\n                (odataRequest as ODataV4Request).context = `../$metadata#${this.entitySetDefinition.name}()/$entity`;\n                const uuid = generateId(16);\n                this.currentUUID = uuid;\n                odataRequest.setResponseHeader('sap-contextid', 'SID:ANON:localMock' + uuid);\n                odataRequest.setResponseHeader('sap-http-session-timeout', this.sessionTimeoutTime);\n                this.resetSessionTimeout(odataRequest.tenantId);\n                responseObject = newObject;\n                break;\n            }\n\n            case `${this.entitySetDefinition.annotations.Session.StickySessionSupported.DiscardAction}(${actionDefinition.sourceType})`:\n                // Discard\n                this.setSessionObject(odataRequest.tenantId, null);\n                responseObject = null;\n                break;\n\n            case `${this.entitySetDefinition.annotations.Session.StickySessionSupported.SaveAction}(${actionDefinition.sourceType})`: {\n                const newData = this.getSessionObject(odataRequest.tenantId);\n                if (newData.__keys) {\n                    // Key needs to be filled now\n                    currentMockData.updateEntry(newData.__keys, newData);\n                } else {\n                    this.performPOST({}, newData, odataRequest.tenantId);\n                }\n\n                this.setSessionObject(odataRequest.tenantId, null);\n\n                responseObject = newData;\n                break;\n            }\n        }\n        responseObject = currentMockData.onAfterAction(actionDefinition, actionData, keys, responseObject);\n        return responseObject;\n    }\n\n    /**\n     * @param keyValues\n     * @param asArray\n     * @param tenantId\n     * @param dontClone\n     */\n    public performGET(keyValues: KeyDefinitions, asArray: boolean, tenantId: string, dontClone = false): any {\n        const currentSessionObject = this.getSessionObject(tenantId);\n        if (currentSessionObject && keyValues && Object.keys(keyValues).length) {\n            if (\n                (Object.prototype.hasOwnProperty.call(keyValues, \"''\") && keyValues[\"''\"] === undefined) ||\n                this.checkKeys(keyValues, currentSessionObject, this.entityTypeDefinition.keys)\n            ) {\n                // odataRequest.setResponseHeader('sap-contextid', this.currentUUID);\n                // odataRequest.setResponseHeader('sap-http-session-timeout', this.sessionTimeoutTime.toString());\n                this.resetSessionTimeout(tenantId);\n                return cloneDeep(currentSessionObject);\n            }\n        }\n        return super.performGET(keyValues, asArray, tenantId);\n    }\n}\n","import { Request, Response } from 'express';\nimport Router from 'router';\nimport { getLogger } from '@ui5/logger';\nimport { FileBasedServerConfig } from '../api';\nimport { batchRequestHandler } from './batch';\nimport { ODataV2Request } from './request/odataV2Request';\nimport { ODataMetadata } from './data/metadata';\nimport { DataAccess } from './data/dataAccess';\nimport { ODataV4Request } from './request/odataV4Request';\nimport { ODataRequest } from './request/odataRequest';\nimport { isInBrowser, loadFile } from './utils/fileLoader';\nimport { createRequest } from './batch/http/simpleHttpRequest';\n\n/**\n * @param config\n */\nexport async function oDataHandler(config: FileBasedServerConfig): Promise<Router> {\n    const router: Router = Router();\n    const log = getLogger('server:ux-fe-mockserver');\n    let edmx;\n    if (config.service.metadataCdsPath) {\n        const cdsContent = await loadFile(config.service.metadataCdsPath);\n        const stringToCds = await import('./utils/stringToCds');\n\n        edmx = await stringToCds.compileCDS(cdsContent, config.service.cdsServiceName);\n    } else {\n        edmx = await loadFile(config.service.metadataXmlPath);\n    }\n\n    let metadata = await ODataMetadata.parse(edmx);\n    const dataAccess = new DataAccess(\n        config.service.mockdataRootPath,\n        metadata,\n        !!config.strictKeyMode,\n        !!config.contextBasedIsolation,\n        !!config.service.generateMockData\n    );\n\n    if (config.watch && !isInBrowser()) {\n        const watchPath = [config.service.mockdataRootPath];\n        if (config.service.metadataXmlPath) {\n            watchPath.push(config.service.metadataXmlPath);\n        }\n        if (config.service.metadataCdsPath) {\n            watchPath.push(config.service.metadataCdsPath);\n        }\n        const chokidar = await import('chokidar');\n        chokidar\n            .watch(watchPath, {\n                ignoreInitial: true\n            })\n            .on('all', async function (event, path) {\n                log.info(`Change detected for service ${config.service.urlBasePath}... restarting`);\n                if (config.debug) {\n                    log.info(`${event} on ${path}`);\n                }\n                if (config.service.metadataCdsPath) {\n                    const cdsContent = await loadFile(config.service.metadataCdsPath);\n                    const stringToCds = await import('./utils/stringToCds');\n\n                    edmx = stringToCds.compileCDS(cdsContent, config.service.cdsServiceName);\n                } else {\n                    edmx = await loadFile(config.service.metadataXmlPath);\n                }\n                metadata = await ODataMetadata.parse(edmx);\n                dataAccess.reloadData(metadata);\n                log.info(`Service ${config.service.urlBasePath} restarted`);\n            });\n    }\n\n    router.get('/\\\\$metadata', (req: Request, res: Response) => {\n        res.setHeader('Content-Type', 'application/xml');\n        res.write(edmx);\n        res.end();\n    });\n\n    router.use('/\\\\$batch', batchRequestHandler(metadata, dataAccess, config));\n\n    router.get('/', (req: Request, res: Response) => {\n        const data = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <app:service xml:lang=\"en\" xml:base=\"${config.service.urlBasePath}/${config.service.name}/\"\n            xmlns:app=\"http://www.w3.org/2007/app\"\n            xmlns:atom=\"http://www.w3.org/2005/Atom\"\n            xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"\n            xmlns:sap=\"http://www.sap.com/Protocols/SAPData\">\n            <app:workspace>\n            </app:workspace>\n            <atom:link rel=\"self\" href=\"${config.service.urlBasePath}/${config.service.name}/\"/>\n            <atom:link rel=\"latest-version\" href=\"${config.service.urlBasePath}/${config.service.name}/\"/>\n        </app:service>`;\n        res.setHeader('Content-Type', 'application/xml');\n        res.write(data);\n        res.end();\n    });\n\n    router.get('/*', async (req: Request, res: Response) => {\n        const odataReq: ODataRequest =\n            metadata.getVersion() === '2.0'\n                ? new ODataV2Request(req.baseUrl, req.url.substring(1), metadata)\n                : new ODataV4Request(req.baseUrl, req.url.substring(1), metadata);\n        res.setHeader('sap-tenantId', odataReq.tenantId);\n        res.type('application/json');\n        try {\n            const actionResponse = await dataAccess.performAction(odataReq);\n            let response;\n            if (actionResponse === null) {\n                const data = await dataAccess.getData(odataReq);\n                response = odataReq.createResponse(data);\n            } else {\n                response = odataReq.createResponse(actionResponse);\n            }\n            response.writeToResponse(res);\n        } catch (e) {\n            const errorResponse = odataReq.createErrorResponse(e);\n            errorResponse.writeToResponse(res);\n        }\n    });\n\n    router.post('/*', async (req: Request, res: Response) => {\n        const odataReq: ODataRequest =\n            metadata.getVersion() === '2.0'\n                ? new ODataV2Request(req.baseUrl, req.url.substring(1), metadata)\n                : new ODataV4Request(req.baseUrl, req.url.substring(1), metadata);\n        res.setHeader('sap-tenantId', odataReq.tenantId);\n        res.type('application/json');\n        try {\n            const request = createRequest(req, '/');\n            request.getBodyAsString(async (body) => {\n                const postData = body ? JSON.parse(body) : {};\n                const actionResponse = await dataAccess.performAction(odataReq, postData);\n                let response;\n                if (actionResponse === null) {\n                    const createdData = await dataAccess.createData(odataReq, postData);\n                    response = odataReq.createResponse(createdData, true, createdData);\n                } else {\n                    response = odataReq.createResponse(actionResponse);\n                }\n                response.writeToResponse(res);\n            });\n        } catch (e) {\n            const errorResponse = odataReq.createErrorResponse(e);\n            errorResponse.writeToResponse(res);\n        }\n    });\n\n    router.patch('/*', async (req: Request, res: Response) => {\n        const odataReq: ODataRequest =\n            metadata.getVersion() === '2.0'\n                ? new ODataV2Request(req.baseUrl, req.url.substring(1), metadata)\n                : new ODataV4Request(req.baseUrl, req.url.substring(1), metadata);\n        res.setHeader('sap-tenantId', odataReq.tenantId);\n        res.type('application/json');\n        try {\n            const request = createRequest(req, '/');\n            request.getBodyAsString(async (body) => {\n                const data = await dataAccess.updateData(odataReq, JSON.parse(body));\n                const response = odataReq.createResponse(data);\n                response.writeToResponse(res);\n            });\n        } catch (e) {\n            const errorResponse = odataReq.createErrorResponse(e);\n            errorResponse.writeToResponse(res);\n        }\n    });\n\n    router.head('/*', (req: Request, res: Response) => {\n        const tenantId = req.originalUrl.indexOf('/tenant-') === 0 ? req.originalUrl.split('/')[1] : 'tenant-default';\n        res.setHeader('sap-tenantId', tenantId);\n        const contextId = req.header('sap-contextid');\n        if (contextId) {\n            dataAccess.resetStickySessionTimeout(res, tenantId);\n        }\n    });\n\n    return router;\n}\n","import { createToken, EmbeddedActionsParser, Lexer } from 'chevrotain';\n\n// ----------------- Lexer -----------------\n\nconst OPEN = createToken({ name: 'OPEN', pattern: /(:?\\(|%28)/ });\nconst CLOSE = createToken({ name: 'CLOSE', pattern: /(:?\\)|%29)/ });\nconst COMMA = createToken({ name: 'COMMA', pattern: /(:?,|%2C)/ });\nconst SLASH = createToken({ name: 'SLASH', pattern: /\\// });\nconst ANYALL = createToken({ name: 'COMMA', pattern: /(:?any|all)/ });\nconst COLON = createToken({ name: 'COLON', pattern: /(:?:|%3A)/ });\nconst SIMPLEIDENTIFIER = createToken({ name: 'SimpleIdentifier', pattern: /[a-zA-Z0-9_]{1,128}/ });\nconst SIMPLE_METHOD = createToken({\n    name: 'SIMPLE_METHOD',\n    pattern: /(:?length|tolower|toupper|trim|round|floor|ceiling)/\n});\nconst COMPLEX_METHOD = createToken({\n    name: 'COMPLEX_METHOD',\n    pattern: /(:?concat|contains|endswith|indexof|matchesPattern|startswith|substring|cast)/\n});\nconst TYPEDEF = createToken({ name: 'Typedef', pattern: /Edm\\.[a-zA-Z]+/ });\n// null, boolean, guid, dateTimeInOffset / dateValue / timeOfDay / decimalValue / doubleValue / singleValue / string / duration / enum / binary\nconst LITERAL = createToken({\n    name: 'Literal',\n    pattern: /(:?null|true|false|[0-9]{4}-[0-9]{2}-[0-9]{2}|-?(:?0|[1-9]\\d*)(\\.\\d+)?(:?[eE][+-]?\\d+)?|'[^\\\\\"\\n\\r\\']+')/\n});\nconst LOGICAL_OPERATOR = createToken({ name: 'Logical', pattern: /(:?eq|ne|lt|le|gt|ge)/ });\nconst ANDOR = createToken({ name: 'AndOr', pattern: /(:?and|or)/ });\nconst WS = createToken({ name: 'Whitespace', pattern: /\\s+/ });\nconst filterTokens = [\n    OPEN,\n    CLOSE,\n    COMMA,\n    COLON,\n    SLASH,\n    ANYALL,\n    ANDOR,\n    WS,\n    SIMPLE_METHOD,\n    COMPLEX_METHOD,\n    LOGICAL_OPERATOR,\n    TYPEDEF,\n    LITERAL,\n    SIMPLEIDENTIFIER\n];\n\nexport const FilterLexer = new Lexer(filterTokens, {\n    // Less position info tracked, reduces verbosity of the playground output.\n    positionTracking: 'onlyStart'\n});\n\n// Parser\ntype CstRule<T> = (idxInCallingRule?: number, ...args: any[]) => T;\nexport class FilterParser extends EmbeddedActionsParser {\n    filterExpr: CstRule<any>;\n    expression: CstRule<any>;\n    methodCallExpr: CstRule<any>;\n    literalOrIdentifier: CstRule<any>;\n    lambdaOperator: CstRule<any>;\n    memberExpr: CstRule<any>;\n    constructor() {\n        super(filterTokens, {\n            recoveryEnabled: true\n        });\n\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const $ = this;\n\n        $.filterExpr = $.RULE('filterExpr', () => {\n            const expression = $.SUBRULE($.expression);\n            return expression;\n        });\n\n        $.literalOrIdentifier = $.RULE('literalOrIdentifier', () => {\n            const result = $.OR([\n                {\n                    ALT: () => $.CONSUME(TYPEDEF)\n                },\n                {\n                    ALT: () => $.CONSUME(LITERAL)\n                },\n                {\n                    ALT: () => $.SUBRULE($.memberExpr)\n                }\n            ]);\n            return result;\n        });\n        $.methodCallExpr = $.RULE('methodCallExpr', () => {\n            let methodNode;\n            let literal1Node;\n            let literal2Node;\n            $.OR([\n                {\n                    ALT: () => {\n                        methodNode = $.CONSUME(SIMPLE_METHOD);\n                        $.CONSUME(OPEN);\n                        literal1Node = $.SUBRULE($.literalOrIdentifier);\n                        $.CONSUME(CLOSE);\n                    }\n                },\n                {\n                    ALT: () => {\n                        methodNode = $.CONSUME(COMPLEX_METHOD);\n                        $.OPTION(() => $.CONSUME(WS));\n                        $.CONSUME2(OPEN);\n                        $.OPTION2(() => $.CONSUME2(WS));\n                        literal1Node = $.SUBRULE2($.literalOrIdentifier);\n                        $.OPTION3(() => $.CONSUME3(WS));\n                        $.CONSUME(COMMA);\n                        $.OPTION4(() => $.CONSUME4(WS));\n                        literal2Node = $.SUBRULE3($.literalOrIdentifier);\n                        $.OPTION5(() => $.CONSUME5(WS));\n                        $.CONSUME2(CLOSE);\n                    }\n                }\n            ]);\n            const methodArgs = [literal1Node.image ? literal1Node.image : literal1Node];\n            if (literal2Node) {\n                methodArgs.push(literal2Node.image ? literal2Node.image : literal2Node);\n            }\n            return {\n                method: methodNode.image,\n                methodArgs\n            };\n        });\n\n        $.lambdaOperator = $.RULE('lambdaOperator', () => {\n            const anyAll = $.CONSUME(ANYALL);\n            $.CONSUME(OPEN);\n            const key = $.CONSUME(SIMPLEIDENTIFIER);\n            $.CONSUME(COLON);\n            const subExpr = $.SUBRULE($.expression);\n            $.OPTION(() => {\n                $.CONSUME(CLOSE);\n            });\n            return {\n                type: 'lambda',\n                operator: anyAll.image.toUpperCase(),\n                key: key.image,\n                expression: subExpr.expressions && subExpr.expressions[0]\n            };\n        });\n\n        $.memberExpr = $.RULE('memberExpr', () => {\n            let memberDef = '';\n            const identifier = $.CONSUME(SIMPLEIDENTIFIER);\n            memberDef += identifier.image;\n            $.OPTION(() => {\n                $.CONSUME(SLASH);\n\n                const outMember: any = $.OR([\n                    {\n                        ALT: () => $.SUBRULE($.memberExpr)\n                    },\n                    {\n                        ALT: () => $.SUBRULE($.lambdaOperator)\n                    }\n                ]);\n                if (outMember.expression) {\n                    // Lamba\n                    outMember.target = memberDef;\n                    memberDef = outMember;\n                } else {\n                    memberDef += '/';\n                    memberDef += outMember;\n                }\n            });\n            return memberDef;\n        });\n\n        $.expression = $.RULE('expression', () => {\n            const isExprOpen = $.OPTION1(() => $.CONSUME(OPEN));\n            const identifier = $.OR([\n                {\n                    ALT: () => $.SUBRULE($.memberExpr)\n                },\n                {\n                    ALT: () => $.SUBRULE($.methodCallExpr)\n                }\n            ]);\n\n            let operator;\n            let literal;\n            let andOr;\n            let subExpr;\n            let currentOperator = '';\n            let expressions = [];\n            let isOpen;\n            $.OPTION2(() => {\n                $.CONSUME(WS);\n                operator = $.CONSUME(LOGICAL_OPERATOR);\n                $.CONSUME2(WS);\n                literal = $.OR2([\n                    {\n                        ALT: () => $.CONSUME(LITERAL)\n                    },\n                    {\n                        ALT: () => $.SUBRULE2($.methodCallExpr)\n                    }\n                ]);\n                const expression = {\n                    identifier,\n                    operator: operator.image,\n                    literal: literal.image ? literal.image : literal\n                };\n                expressions.push(expression);\n                $.OPTION3(() => $.CONSUME(CLOSE));\n                $.OPTION4(() => {\n                    $.CONSUME5(WS);\n                    andOr = $.CONSUME(ANDOR);\n                    currentOperator = andOr.image.toUpperCase();\n\n                    $.CONSUME6(WS);\n                    isOpen = $.OPTION5(() => $.CONSUME2(OPEN));\n                    subExpr = $.SUBRULE2($.expression);\n                    if (currentOperator === subExpr.operator || subExpr.operator === '') {\n                        expressions = expressions.concat(subExpr.expressions);\n                    } else {\n                        if (\n                            (currentOperator === 'AND' && isOpen === undefined) ||\n                            (isExprOpen !== undefined && isExprOpen.image !== undefined)\n                        ) {\n                            // AND has priority\n                            expressions.push(subExpr.expressions.shift());\n                            const subObject = {\n                                expressions,\n                                operator: currentOperator\n                            };\n                            expressions = [subObject].concat(subExpr.expressions);\n                            currentOperator = subExpr.operator;\n                        } else {\n                            expressions.push(subExpr);\n                        }\n                    }\n                    //currentOperator = subExpr.operator;\n\n                    $.OPTION6(() => $.CONSUME2(CLOSE));\n                });\n                $.OPTION7(() => $.CONSUME3(CLOSE));\n            });\n            if (expressions.length === 0) {\n                expressions.push({\n                    identifier: identifier\n                });\n            }\n            return {\n                expressions,\n                operator: currentOperator\n            };\n        });\n        this.performSelfAnalysis();\n    }\n}\n\nexport function parseFilter(text) {\n    const parser = new FilterParser();\n    const lexingResult = FilterLexer.tokenize(text);\n    // \"input\" is a setter which will reset the parser's state.\n    parser.input = lexingResult.tokens;\n    const output = parser.filterExpr();\n\n    if (parser.errors.length > 0) {\n        parser.errors.forEach(console.error);\n        throw new Error('Parsing errors detected');\n    }\n    return output;\n}\n","import { parse } from 'querystring';\nimport { ODataMetadata } from '../data/metadata';\nimport { SimpleResponse } from '../batch/http/simpleHttpResponse';\nimport { Response } from 'express';\nimport { ExecutionError, ODataRequestInterface } from '../data/common';\nimport { parseFilter } from './filterParser';\n\nexport interface DataQuery {\n    list: boolean;\n    queryPath: QueryPath[];\n    rawParams: object;\n    properties: object;\n    orderBy: OrderByDefinition[];\n    searchQuery: string;\n    expand: object;\n    format: string;\n    aggregateDefinition: AggregateDefinition;\n    filter: any;\n    startIndex?: number;\n    maxElements?: number;\n}\n\ntype OrderByDefinition = {\n    name: string;\n    direction: 'asc' | 'desc';\n};\ntype AggregateDefinition = {\n    filter: any;\n    groupBy: string[];\n    aggregates: AggregateProperty[];\n};\n\ntype AggregateProperty = {\n    name: string;\n    operator: string;\n    sourceProperty: string;\n};\n\nexport type QueryPath = {\n    path: string;\n    keys: Record<string, any>;\n};\n\nexport type ErrorInformation = {\n    statusCode: number;\n    message?: string;\n    data?: object;\n};\n\n/**\n * Abstract class representing an OData request\n */\nexport abstract class ODataRequest implements ODataRequestInterface {\n    public query: DataQuery;\n    public readonly baseUrl: string;\n    public readonly tenantId: string;\n    public dataLength: number;\n    protected metadata: ODataMetadata;\n    protected headers: any = {};\n\n    /**\n     * @param baseUrl\n     * @param url\n     * @param metadata\n     */\n    public constructor(baseUrl: string, url: string, metadata: ODataMetadata) {\n        this.metadata = metadata;\n        url = decodeURIComponent(url);\n        const [path, params] = url.split('?');\n        this.baseUrl = baseUrl;\n        this.query = this.parseUrl(path, params ? parse(params) : {});\n        this.tenantId = this.baseUrl.indexOf('/tenant-') === 0 ? this.baseUrl.split('/')[1] : 'tenant-default';\n    }\n\n    /**\n     * @param headerName\n     * @param headerValue\n     */\n    public setResponseHeader(headerName: string, headerValue: any) {\n        this.headers[headerName] = headerValue;\n    }\n\n    /**\n     * @param res\n     */\n    public applyResponseHeaders(res: Response) {\n        for (const headerName in this.headers) {\n            res.setHeader(headerName, this.headers[headerName]);\n        }\n        this.headers = {};\n    }\n\n    /**\n     * @param path\n     */\n    private parsePath(path: string): QueryPath[] {\n        const pathSplit = path.split('/');\n        return pathSplit.reduce((pathArr, pathPart) => {\n            const keysStart = pathPart.indexOf('(');\n            const keysEnd = pathPart.indexOf(')');\n            let entity;\n            let keys;\n            if (keysStart > -1) {\n                entity = pathPart.substring(0, keysStart) + pathPart.substring(keysEnd + 1);\n                const keysList = pathPart.substring(keysStart + 1, keysEnd).split(',');\n                keys = {};\n                keysList.forEach((keyValue) => {\n                    const [key, value] = keyValue.split('=');\n                    if (value) {\n                        keys[key] = value.replace(/^'|'$/g, '');\n                    } else {\n                        keys[key] = undefined;\n                    }\n                });\n            } else {\n                entity = pathPart;\n            }\n            pathArr.push({ path: entity, keys: keys });\n            return pathArr;\n        }, []);\n    }\n\n    /**\n     * Version specific parsing of the input url\n     *\n     * @param path\n     * @param params\n     */\n    protected parseUrl(path: string, params: object): DataQuery {\n        const query: Partial<DataQuery> = { properties: {} };\n        query.queryPath = this.parsePath(path);\n        query.rawParams = params;\n        query.searchQuery = params['$search'];\n\n        if (params['$select']) {\n            const props = params['$select'].split(',');\n            props.forEach((property) => {\n                query.properties[property.split('/')[0]] = true;\n            });\n        } else if (params['$expand']) {\n            // If we have no select but an expand we may want to pull in content from the entity as well\n            const entitySet = this.metadata.getEntitySet(query.queryPath[0].path);\n            if (entitySet) {\n                const properties = entitySet.entityType.entityProperties;\n                properties.forEach((property) => {\n                    query.properties[property.name] = true;\n                });\n            }\n        }\n\n        if (params['$expand']) {\n            const expandParameters = this.parseExpand(params['$expand']);\n            query.expand = expandParameters.expand;\n            query.properties = Object.assign(query.properties, expandParameters.properties || {});\n        }\n\n        if (params['$orderby']) {\n            const orderByParameters = this.parseOrderBy(params['$orderby']);\n            query.orderBy = orderByParameters;\n        }\n\n        if (params['$apply']) {\n            const applyParameters = this.parseApply(params['$apply']);\n            query.aggregateDefinition = applyParameters;\n        }\n\n        if (params['$filter']) {\n            const filterParams = decodeURIComponent(params['$filter']);\n            const thisFilters = parseFilter(filterParams); //this.parseFilter(filterParams);\n            query.filter = thisFilters;\n        }\n\n        query.startIndex = params['$skip'] ? parseInt(params['$skip'], 10) : 0;\n        query.maxElements = params['$top'] ? parseInt(params['$top'], 10) : Number.POSITIVE_INFINITY;\n\n        query.format = 'json';\n        return query as DataQuery;\n    }\n\n    /**\n     * @param filterParams\n     */\n    protected parseFilter(filterParams: string) {\n        let filterSplit = filterParams.split(' ');\n        filterSplit = filterSplit.reduce((outSplit, currentValue) => {\n            if (currentValue.indexOf('tolower') === 0) {\n                outSplit.push(currentValue);\n            } else if (currentValue.indexOf('(') !== -1) {\n                const parentSplit = currentValue.split('(');\n                parentSplit.forEach((subValue) => {\n                    if (subValue.length === 0) {\n                        outSplit.push('(');\n                    } else {\n                        outSplit.push(subValue);\n                    }\n                });\n            } else if (currentValue.indexOf(')') !== -1) {\n                const parentSplit = currentValue.split(')');\n                parentSplit.forEach((subValue) => {\n                    if (subValue.length === 0) {\n                        outSplit.push(')');\n                    } else {\n                        outSplit.push(subValue);\n                    }\n                });\n            } else {\n                outSplit.push(currentValue);\n            }\n            return outSplit;\n        }, []);\n        let char = filterSplit[0];\n        let filterIdx = 0;\n        const filters: any = [];\n        const childStack = [];\n        let thisFilters = filters;\n\n        filters.operator = 'AND';\n        while (filterIdx < filterSplit.length) {\n            if (char[0] === '(') {\n                const childFilters = [];\n                childStack.push(thisFilters);\n                thisFilters = childFilters;\n                filterIdx++;\n                char = filterSplit[filterIdx];\n            } else if (char[char.length - 1] === ')' && char.indexOf('tolower') !== 0) {\n                const parentFilter = childStack.pop();\n                parentFilter.push(thisFilters);\n                thisFilters = parentFilter;\n                filterIdx++;\n                char = filterSplit[filterIdx];\n            } else if (char === 'and') {\n                filterIdx++;\n                thisFilters.operator = 'AND';\n                char = filterSplit[filterIdx];\n            } else if (char === 'or') {\n                const currentFilters = thisFilters;\n                thisFilters = [currentFilters];\n                thisFilters.operator = 'OR';\n                filterIdx++;\n                char = filterSplit[filterIdx];\n            } else {\n                const filterProperty = char;\n                const filterOperator = filterSplit[++filterIdx];\n                const eqValue = filterSplit[++filterIdx];\n                thisFilters.push({\n                    prop: filterProperty,\n                    operator: filterOperator,\n                    eqValue: eqValue\n                });\n                char = filterSplit[++filterIdx];\n            }\n        }\n        return thisFilters;\n    }\n\n    protected abstract parseExpand(expandParameters: string): Partial<DataQuery>;\n\n    /**\n     * @param orderByParameters\n     */\n    protected parseOrderBy(orderByParameters: string): OrderByDefinition[] {\n        const orderByParams = orderByParameters.split(',');\n        const orderByDefinition = [];\n        orderByParams.forEach((param) => {\n            const [paramName, direction] = param.split(' ');\n            orderByDefinition.push({ name: paramName, direction: direction !== undefined ? direction : 'asc' });\n        });\n        return orderByDefinition;\n    }\n    /**\n     * @param applyParameters\n     */\n    protected parseApply(applyParameters: string): AggregateDefinition {\n        const filterRegEx = /^filter\\(([^)]+)\\)\\/(.*)$/;\n        const filterMatches = applyParameters.match(filterRegEx);\n        let groupByText = applyParameters;\n        let filterParams;\n        if (filterMatches) {\n            const filterExpr = filterMatches[1];\n            filterParams = parseFilter(filterExpr);\n            groupByText = filterMatches[2];\n        }\n        const groupByRegEx = /^groupby\\(\\(([^)]+)\\),([^)]+\\))\\)$/;\n        const groupByMatches = groupByText.match(groupByRegEx);\n        if (groupByMatches) {\n            return {\n                filter: filterParams,\n                groupBy: groupByMatches[1].split(','),\n                aggregates: this.parseAggregateDefinition(groupByMatches[2])\n            };\n        }\n    }\n\n    /**\n     * @param aggregationDefinition\n     */\n    protected parseAggregateDefinition(aggregationDefinition: string): AggregateProperty[] {\n        const aggregateRegEx = /^aggregate\\(([^)]+)\\)$/;\n        const aggregateMatches = aggregationDefinition.match(aggregateRegEx);\n        if (aggregateMatches) {\n            return aggregateMatches[1].split(',').map((aggregateMatch) => {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const [property, withOp, operator, asStr, targetName] = aggregateMatch.split(' ');\n                return {\n                    name: targetName || property,\n                    operator,\n                    sourceProperty: property\n                };\n            });\n        }\n    }\n\n    protected abstract toJSON(data: object | object[]): string;\n\n    /**\n     * @param entity\n     * @param element\n     */\n    protected enrichElement(entity: string, element: object): void {\n        // method can be overwritten by enhancing classes\n    }\n\n    // /**\n    //  * Select only the properties that the client requested\n    //  * @param element element to be modified\n    //  */\n    // protected selectProperties(element: object, properties: object): void {\n    //     if (properties) {\n    //         for (const property in element) {\n    //             if (!properties[property]) {\n    //                 delete element[property];\n    //             }\n    //         }\n    //     }\n    // }\n    //\n    // protected expandProperties(element: object, expand: object): void {\n    //     if (expand) {\n    //         for (const property in expand) {\n    //             const target = this.metadata.getTarget(this.query.entitySet, property);\n    //             if (target) {\n    //                 const data = this.dataAccess.read(target);\n    //\n    //                 let keys;\n    //                 const keyMap = this.metadata.getTargetPropertyMap(this.query.entitySet, property);\n    //                 if (keyMap) {\n    //                     keys = {};\n    //                     for (const key in keyMap) {\n    //                         if (element[key] !== undefined) {\n    //                             keys[keyMap[key]] = element[key];\n    //                         }\n    //                     }\n    //                 } else {\n    //                     if (this.query.keys) {\n    //                         keys = this.query.keys;\n    //                     } else {\n    //                         keys = {};\n    //                         const keyIds = this.metadata.getKeys(this.query.entitySet);\n    //                         keyIds.forEach((key) => {\n    //                             keys[key] = element[key];\n    //                         });\n    //                     }\n    //                 }\n    //\n    //                 const subElements = this.selectElements(data, keys);\n    //                 for (const subElement of subElements) {\n    //                     this.enrichElement(target, subElement);\n    //                 }\n    //                 element[property] = subElements.length === 1 ? subElements[0] : subElements;\n    //             } else {\n    //                 element[property] = null;\n    //             }\n    //         }\n    //     }\n    // }\n\n    // protected selectElements(elements: object[], keys: object): object[] {\n    //     if (!keys) {\n    //         return elements;\n    //     }\n    //     const selected = elements.filter((element: object) => {\n    //         for (const key in keys) {\n    //             if (!!element[key] && element[key] + '' !== keys[key] + '') {\n    //                 return false;\n    //             }\n    //         }\n    //         return true;\n    //     });\n    //     return selected;\n    // }\n\n    /**\n     * @param errorInformation\n     */\n    public createErrorResponse(errorInformation: ExecutionError): SimpleResponse {\n        const response = new SimpleResponse();\n\n        response.setHeader('content-type', 'application/json;odata.metadata=minimal;IEEE754Compatible=true');\n        response.setHeader('odata-version', '4.0');\n\n        if (errorInformation.isCustomError) {\n            if (errorInformation.messageData) {\n                if (errorInformation.isSAPMessage) {\n                    response.setHeader('sap-messages', JSON.stringify(errorInformation.messageData));\n                } else {\n                    response.write(JSON.stringify(errorInformation.messageData));\n                }\n            } else {\n                response.write(errorInformation.messageData);\n            }\n            response.status(errorInformation.statusCode);\n        } else {\n            response.write(errorInformation.message);\n            response.status(500);\n        }\n        return response;\n    }\n    /**\n     * @param data\n     * @param bCreated\n     * @param key\n     */\n    public createResponse(data: any, bCreated = false, key: string = undefined): SimpleResponse {\n        const response = new SimpleResponse();\n        if (data !== null) {\n            response.write(this.toJSON(data));\n            response.status(200);\n        } else {\n            response.status(204);\n        }\n\n        return response;\n    }\n\n    // protected getElement(): object {\n    //     const data = this.dataAccess.read(this.query.entitySet);\n    //     const elements = this.selectElements(data, this.query.keys);\n    //     if (elements && elements.length > 0) {\n    //         const element = elements[0];\n    //         this.expandProperties(element, this.query.expand);\n    //         this.selectProperties(element, this.query.properties);\n    //         this.enrichElement(this.query.entitySet, element);\n    //         return element;\n    //     } else {\n    //         return {};\n    //     }\n    // }\n    //\n    // protected listElements(): object {\n    //     const data = this.dataAccess.read(this.query.entitySet);\n    //     const first = this.query.startIndex || 0;\n    //     const last = Math.min(this.query.startIndex + this.query.maxElements, data.length);\n    //\n    //     const elements = [];\n    //     for (let index = first; index < last; index++) {\n    //         const element = data[index];\n    //         this.expandProperties(element, this.query.expand);\n    //         this.selectProperties(element, this.query.properties);\n    //         this.enrichElement(this.query.entitySet, element);\n    //         elements.push(element);\n    //     }\n    //     return elements;\n    // }\n}\n","import { ODataRequest, DataQuery } from './odataRequest';\nimport { SimpleResponse } from '../batch/http/simpleHttpResponse';\n\n/**\n *\n */\nexport class ODataV2Request extends ODataRequest {\n    /**\n     * @param expandParameters\n     */\n    protected parseExpand(expandParameters): Partial<DataQuery> {\n        const props = expandParameters.split(',');\n        return props.reduce(\n            (reducer, property) => {\n                reducer.expand[property] = true;\n                reducer.properties[property.split('/')[0]] = true;\n                return reducer;\n            },\n            { expand: {}, properties: {} }\n        );\n    }\n\n    // protected enrichElement(entity: string, element: object): void {\n    //     const keyValues: string[] = [];\n    //     const keys = this.metadata.getKeys(entity);\n    //     keys.forEach((key) => {\n    //         keyValues.push(`${key}='${element[key]}'`);\n    //     });\n    //     const uri = `${this.baseUrl}/${entity}(${keyValues.join(',')})`;\n    //     element['__metadata'] = {\n    //         id: uri,\n    //         uri: uri,\n    //         type: this.metadata.getEntitySet(this.query.entitySet).EntityType\n    //     };\n    // }\n\n    /**\n     * @param data\n     * @param bCreated\n     */\n    public createResponse(data: any, bCreated = false): SimpleResponse {\n        const response = super.createResponse(data);\n        response.setHeader('Content-Type', 'application/json');\n        response.setHeader('dataserviceversion', '2.0');\n        response.setHeader('sap-metadata-last-modified', 'Tue, 01 Oct 2019 15:02:44 GMT');\n        response.setHeader('cache-control', 'no-store, no-cache');\n        if (data && data.__metadata && data.__metadata.id) {\n            response.setHeader('location', data.__metadata.id);\n        }\n\n        return response;\n    }\n\n    /**\n     * @param data\n     */\n    protected toJSON(data: object | object[]): string {\n        if ((data as object[]).length !== undefined) {\n            return JSON.stringify({\n                d: {\n                    __count: (data as object[]).length + '',\n                    results: data\n                }\n            });\n        } else {\n            return JSON.stringify({ d: data || {} });\n        }\n    }\n}\n","import { ODataRequest, DataQuery } from './odataRequest';\nimport { SimpleResponse } from '../batch/http/simpleHttpResponse';\nimport { ODataMetadata } from '../data/metadata';\nimport { parse } from 'query-string';\nimport balanced from 'balanced-match';\n\n/**\n *\n */\nexport class ODataV4Request extends ODataRequest {\n    public context: string;\n    public dataLength: number;\n    public location: string;\n    /**\n     * @param baseUrl\n     * @param url\n     * @param metadata\n     */\n    public constructor(baseUrl: string, url: string, metadata: ODataMetadata) {\n        super(baseUrl, url, metadata);\n        this.context = url.split('?')[0];\n    }\n\n    /**\n     * @param testStr\n     * @param char\n     */\n    countCharInString(testStr: string, char: string) {\n        let charCount = 0;\n        for (let i = 0; i < testStr.length; i++) {\n            if (testStr[i] === char) {\n                charCount++;\n            }\n        }\n        return charCount;\n    }\n    /**\n     * Comma separate list of properties that can contain sub-requests are split into an array.\n     *\n     * @param propertiesQuery OData properties request\n     */\n    protected splitProperties(propertiesQuery: string): string[] {\n        const properties = [];\n        let property = '',\n            nestingDepth = 0;\n\n        for (const char of propertiesQuery) {\n            if (char === ',' && nestingDepth === 0) {\n                // top-level delimiter - end of property\n                if (property.length > 0) {\n                    properties.push(property);\n                }\n                property = '';\n            } else {\n                property += char;\n                if (char === '(') {\n                    nestingDepth++;\n                }\n                if (char === ')') {\n                    nestingDepth--;\n                }\n            }\n        }\n        if (nestingDepth === 0) {\n            if (property.length > 0) {\n                properties.push(property);\n            }\n        } else {\n            throw `Invalid properties: ${propertiesQuery}`;\n        }\n        return properties;\n    }\n\n    /**\n     * @param expandParameters\n     */\n    protected parseExpand(expandParameters: string): Partial<DataQuery> {\n        const props = this.splitProperties(expandParameters);\n        return props.reduce(\n            (reducer, property) => {\n                const match = property.match(/([^(]*)(\\((.+)\\))?/);\n                const name = match[1];\n                const parameters = match[3];\n                const parameterSplit = parameters?.split(';');\n                let queryPart = {};\n                let previousParamData = '';\n                parameterSplit?.forEach((paramData) => {\n                    if (previousParamData.length > 0) {\n                        previousParamData += ';';\n                    }\n                    previousParamData += paramData;\n                    if (previousParamData.indexOf('(') !== -1) {\n                        // In case we have an opening parenthesis we may not be balanced\n                        const isBalanced = balanced('(', ')', previousParamData);\n                        if (isBalanced) {\n                            queryPart = Object.assign(queryPart, parse(previousParamData));\n                            previousParamData = '';\n                        }\n                    } else {\n                        queryPart = Object.assign(queryPart, parse(paramData));\n                        previousParamData = '';\n                    }\n                });\n                const expand = queryPart['$expand']\n                    ? this.parseExpand(queryPart['$expand'])\n                    : { expand: {}, properties: {} };\n                const select = queryPart['$select'] ? queryPart['$select'].split(',') : [];\n                const selectProperties = {};\n                select.forEach((propName) => {\n                    selectProperties[propName] = true;\n                });\n                Object.keys(expand.properties).forEach((expandName) => {\n                    selectProperties[expandName] = true;\n                });\n\n                reducer.expand[name] = {\n                    expand: expand.expand,\n                    select: selectProperties\n                };\n                reducer.properties[name] = true;\n                return reducer;\n            },\n            { expand: {}, properties: {} }\n        );\n    }\n\n    /**\n     * @param entity\n     * @param element\n     */\n    protected enrichElement(entity: string, element: object): void {\n        // nothing to do in v4\n    }\n\n    /**\n     * @param data\n     * @param bCreated\n     * @param key\n     */\n    public createResponse(data: any, bCreated = false, key: string = undefined): SimpleResponse {\n        const response = new SimpleResponse();\n        if (data !== null) {\n            response.write(this.toJSON(data));\n            response.status(bCreated ? 204 : 200);\n        } else {\n            response.status(404);\n        }\n        response.setHeader('content-type', 'application/json;odata.metadata=minimal;IEEE754Compatible=true');\n        response.setHeader('odata-version', '4.0');\n        if (bCreated) {\n            response.setHeader('location', this.location);\n        }\n        return response;\n    }\n\n    /**\n     * @param data\n     */\n    protected toJSON(data: object | object[]): string {\n        /*\n        $select=ID,IsActiveEntity,category_ID,currency_code,identifier,price,rating,stock,thumbnailImage,title\n        $expand=DraftAdministrativeData,category($select=ID,name),supplier($select=ID,city,name,phone,postCode,street)\n\n        */\n        // Header sap-contextid: SID:ANON:ldcicf6_CF6_00:PfxM66KUqPqnTLsyxAgp1J2aQJHbISjdfAQTi6e_-ATT\n        // TODO: generate context based on this.uri\n        //'@odata.context': `$metadata#${this.uri.entitySet}(${this.uri.query['$select']},${this.uri.query['$expand']})`\n        let outContext = this.context;\n        const dataLength = this.dataLength;\n        if (outContext.indexOf('$metadata') === -1) {\n            outContext = `$metadata#${this.context}`;\n        }\n        if (Array.isArray(data)) {\n            const result = {\n                '@odata.context': `${outContext}`,\n                '@odata.count': dataLength,\n                value: data\n            };\n            return JSON.stringify(result);\n        } else {\n            const result = {\n                '@odata.context': `${outContext}`,\n                '@odata.metadataEtag': 'W/\"2DWIhBAR9jvPhquo53N+7tW+t3A5axeT11Xw3lkjcRY=\"'\n            };\n            return JSON.stringify(Object.assign(result, data));\n        }\n    }\n}\n","import { readFileSync, exists as fsExists, readFile } from 'fs';\nimport { promisify } from 'util';\nimport path from 'path';\nlet isBrowser = false;\nlet readFileP;\nlet existsP;\nif (!readFileSync) {\n    isBrowser = true;\n} else {\n    readFileP = promisify(readFile);\n    existsP = promisify(fsExists);\n}\n\n/**\n *\n */\nexport function isInBrowser(): boolean {\n    return isBrowser;\n}\n\n/**\n * @param filePath\n */\nexport async function loadFile(filePath: string): Promise<string> {\n    if (!isBrowser) {\n        return readFileP(filePath, 'utf-8');\n    } else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        filePath = sap.ui.loader._.resolveURL(sap.ui.loader._.toUrl(filePath));\n        return fetch(filePath).then((res) => {\n            return res.text();\n        });\n    }\n}\n\n/**\n * @param filePath\n */\nexport async function exists(filePath: string): Promise<boolean> {\n    if (!isBrowser) {\n        return existsP(filePath);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        filePath = sap.ui.loader._.resolveURL(sap.ui.loader._.toUrl(filePath));\n        return fetch(filePath, { method: 'HEAD' }).then((res) => {\n            return res.status === 200;\n        });\n    }\n}\n\n/**\n * @param filePath\n */\nexport async function loadJS(filePath: string) {\n    if (!isBrowser) {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        return Promise.resolve(require(/* webpackIgnore: true */ filePath));\n    } else {\n        return new Promise((resolve, reject) => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            sap.ui.require([path.dirname(filePath) + '/' + path.basename(filePath, '.js')], function (fileContent) {\n                resolve(fileContent);\n            });\n        });\n    }\n}\n\n/**\n * @param basePath\n * @param targetPath\n */\nexport function resolvePath(basePath: string, targetPath: string) {\n    if (!isBrowser) {\n        return path.resolve(basePath, targetPath);\n    } else {\n        return targetPath;\n    }\n}\n","const commonContent = `type Language : Association to sap.common.Languages;\ntype Currency : Association to sap.common.Currencies;\ntype Country : Association to sap.common.Countries;\n\n/**\n * Entities to serve the reuse types with extensible code lists\n * including built-in support for value lists in Fiori.\n */\ncontext sap.common {\n  entity Languages : CodeList {\n    key code : String(14) @(title : '{i18n>LanguageCode}');\n    //> length=14 is to accommodate values like these:\n    // en_US_x_saptrc - (1Q) used as a technical SAP language code\n    // en_US_x_sappsd - (2Q) used as a technical SAP language code\n  }\n\n  entity Countries : CodeList {\n    key code : String(3) @(title : '{i18n>CountryCode}');\n  }\n\n  entity Currencies : CodeList {\n    key code   : String(3) @(title : '{i18n>CurrencyCode}');\n        symbol : String(5) @(title : '{i18n>CurrencySymbol}');\n  }\n\n  aspect CodeList @(\n    cds.autoexpose,\n    cds.persistence.skip : 'if-unused'\n  ) {\n    name  : localized String(255)  @title : '{i18n>Name}';\n    descr : localized String(1000) @title : '{i18n>Description}';\n  }\n}\n\n\n/*\n * Aspect for entities with canonical universal IDs.\n */\naspect cuid {\n  key ID : UUID; //> automatically filled in\n}\n\n/*\n * Aspect to capture changes by user and name.\n */\naspect managed {\n  createdAt  : Timestamp @cds.on.insert : $now;\n  createdBy  : User      @cds.on.insert : $user;\n  modifiedAt : Timestamp @cds.on.insert : $now  @cds.on.update : $now;\n  modifiedBy : User      @cds.on.insert : $user @cds.on.update : $user;\n}\n\n/*\n * Aspects for entities with temporal data.\n */\naspect temporal {\n  validFrom : Timestamp @cds.valid.from;\n  validTo   : Timestamp @cds.valid.to;\n}\n\n\n/**\n * Canonical user ID\n */\ntype User : String(255);\n\n\n//---------------------------------------------------------------------------\n// Annotations for Fiori UIs...\n\nannotate sap.common.CodeList with @UI.Identification : [{Value:name}];\nannotate sap.common.CodeList with @cds.odata.valuelist;\n\nannotate managed with {\n  createdAt  @UI.HiddenFilter;\n  createdBy  @UI.HiddenFilter;\n  modifiedAt @UI.HiddenFilter;\n  modifiedBy @UI.HiddenFilter;\n}\n\nannotate managed with {\n  createdAt  @Core.Immutable;\n  createdBy  @Core.Immutable;\n}\n\nannotate sap.common.Countries  with { code @Common.Text:name; }\nannotate sap.common.Currencies with { code @Common.Text:name; }\nannotate sap.common.Languages  with { code @Common.Text:name; }\n\n\n//---------------------------------------------------------------------------\n// Common Annotations...\n\nannotate Language with @(\n  title       : '{i18n>Language}',\n  description : '{i18n>LanguageCode.Description}'\n);\n\nannotate Currency with @(\n  title       : '{i18n>Currency}',\n  description : '{i18n>CurrencyCode.Description}'\n);\n\nannotate Country with @(\n  title       : '{i18n>Country}',\n  description : '{i18n>CountryCode.Description}'\n);\n\nannotate User with @(\n  title       : '{i18n>UserID}',\n  description : '{i18n>UserID.Description}'\n);\n\nannotate managed with {\n  createdAt  @title : '{i18n>CreatedAt}';\n  createdBy  @title : '{i18n>CreatedBy}';\n  modifiedAt @title : '{i18n>ChangedAt}';\n  modifiedBy @title : '{i18n>ChangedBy}';\n}\n\n\n//---------------------------------------------------------------------------\n// Temporary Workarounds...\n\n// REVISIT: change @odata.on... to @cds.on...\n// REVISIT: @cds.on... should automatically result in @readonly @Core.Computed\n\nannotate managed with {\n  modifiedAt @readonly  @odata.on.update : #now;\n  createdAt  @readonly  @odata.on.insert : #now;\n  createdBy  @readonly  @odata.on.insert : #user;\n  modifiedBy @readonly  @odata.on.update : #user;\n}\n\n//---------------------------------------------------------------------------\n`;\n\nexport const compileCDS = async (cdsString: string, serviceName = 'sap.ux.TestService') => {\n    const { compactModel, compileSources, to } = await import(/* webpackIgnore: true */ '@sap/cds-compiler');\n    const commonCSN = compileSources({ 'string.cds': commonContent }, {});\n    const csn = compileSources({ 'string.cds': cdsString }, {});\n    csn.definitions = Object.assign(commonCSN.definitions, csn.definitions);\n    const csnModel = compactModel(csn);\n    const edmxContent = to.edmx(csnModel, { service: serviceName });\n    return edmxContent;\n};\n","module.exports = require(\"@ui5/logger\");","module.exports = require(\"balanced-match\");","module.exports = require(\"body-parser\");","module.exports = require(\"chevrotain\");","module.exports = require(\"chokidar\");","module.exports = require(\"lodash.clonedeep\");","module.exports = require(\"nise\");","module.exports = require(\"query-string\");","module.exports = require(\"router\");","module.exports = require(\"url\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"querystring\");","module.exports = require(\"stream\");","module.exports = require(\"string_decoder\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(7300);\n",""],"names":[],"sourceRoot":""}