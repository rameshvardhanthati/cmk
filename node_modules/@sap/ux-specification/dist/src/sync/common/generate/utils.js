"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
/**
 * Adds an enum filled with existing UI annotations of the given list (validAnnotations)
 * @param {EntityType} entityType
 * @param {UIAnnotationTerms[]} validAnnotations
 * @param annoPath - the annotation path property in the app schema where the enum shall be added
 */
function addEnumForValidAnnotations(entityType, validAnnotations, annoPath) {
    const UiAnnotations = entityType.annotations.UI;
    if (!UiAnnotations) {
        return;
    }
    const enumEntries = annoPath['enum'] ? annoPath['enum'] : [];
    for (const key in UiAnnotations) {
        const annotation = UiAnnotations[key];
        if (validAnnotations.indexOf(annotation.term) > -1) {
            const enumEntry = annotation.qualifier
                ? `${annotation.term}#${annotation.qualifier}`
                : `${annotation.term}`;
            if (enumEntries.indexOf(enumEntry) === -1) {
                enumEntries.push(enumEntry);
            }
        }
    }
    if (enumEntries.length > 0) {
        annoPath['enum'] = enumEntries;
    }
}
exports.addEnumForValidAnnotations = addEnumForValidAnnotations;
/**
 * Adds an enum filled with existing UI annotations for single-tab variants of a table
 * @param {EntityType} entityType
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
function addEnumForSingleTabVariant(entityType, appSchema, definitionName) {
    const quickVariant = appSchema['definitions'][definitionName];
    const annoPath = quickVariant.properties.annotationPath;
    const validAnnotations = ["com.sap.vocabularies.UI.v1.SelectionVariant" /* SelectionVariant */, "com.sap.vocabularies.UI.v1.SelectionPresentationVariant" /* SelectionPresentationVariant */];
    addEnumForValidAnnotations(entityType, validAnnotations, annoPath);
}
exports.addEnumForSingleTabVariant = addEnumForSingleTabVariant;
/**
 * Adds an enum filled with existing UI annotations for multi-tab variants of a table
 * @param {ConverterOutput} oDataServiceAVT - combined service metadata, as returned by annotation vocabularies tools
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
function addEnumForMultiTabVariant(oDataServiceAVT, appSchema, definitionName) {
    const quickVariant = appSchema['definitions'][definitionName];
    const annoPath = quickVariant.properties.annotationPath;
    const validAnnotations = [
        "com.sap.vocabularies.UI.v1.SelectionVariant" /* SelectionVariant */,
        "com.sap.vocabularies.UI.v1.SelectionPresentationVariant" /* SelectionPresentationVariant */,
        "com.sap.vocabularies.UI.v1.PresentationVariant" /* PresentationVariant */
    ];
    if (oDataServiceAVT.entitySets) {
        oDataServiceAVT.entitySets.forEach((entitySet) => {
            addEnumForValidAnnotations(entitySet.entityType, validAnnotations, annoPath);
        });
    }
}
exports.addEnumForMultiTabVariant = addEnumForMultiTabVariant;
/**
 * Adds the enume values for entitySet as part of the multiple view scenario
 * @param {ConverterOutput} oDataServiceAVT - combined service metadata, as returned by annotation vocabularies tools
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
function addEnumForVariantEntitySet(oDataServiceAVT, appSchema, definitionName) {
    const quickVariant = appSchema['definitions'][definitionName];
    const entitySet = quickVariant.properties.entitySet;
    if (oDataServiceAVT.entitySets) {
        const enumEntries = [];
        oDataServiceAVT.entitySets.forEach((es) => {
            enumEntries.push(es.name);
        });
        if (enumEntries.length > 0) {
            entitySet['enum'] = enumEntries;
        }
    }
}
exports.addEnumForVariantEntitySet = addEnumForVariantEntitySet;
/**
 * Adds an enum filled with existing UI annotations for annotationPath property in FilterBar
 * @param {EntityType} entityType
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
function addEnumForFilterBarAnnotationPath(entityType, appSchema, definitionName) {
    const listReprtFilter = appSchema['definitions'][definitionName];
    const annoPath = listReprtFilter.properties.annotationPath;
    const validAnnotations = ["com.sap.vocabularies.UI.v1.SelectionVariant" /* SelectionVariant */];
    addEnumForValidAnnotations(entityType, validAnnotations, annoPath);
}
exports.addEnumForFilterBarAnnotationPath = addEnumForFilterBarAnnotationPath;
/**
 * Method adds definition for 'RelatedFacetKeys' as enum with describtion and adds references to 'RelatedFacetKeys' for custom section definitions.
 * @param {object} schema App specific schema that potentially gets enhanced
 * @param {string[]>} sectionDefinitions array of section definitions which should be updated with new reference to 'RelatedFacetKeys' enum.
 * @param {FacetSection[]} facetSections Array of facet section objects which is used to generate enum values.
 * @param {Array<keyof Omit<FacetSection, 'custom'>>} idProperties Array of property names which should be looked up in 'FacetSection' object.
 *  Please note that method depends on order and takes first non empty value associated to passed properties.
 */
function addDefinitionForRelatedFacetKeys(schema, sectionDefinitions, facetSections, idProperties) {
    const oneOfSections = facetSections.map((section) => {
        // Loop accaptable properties in received order and find first entry with value
        const propertyName = idProperties.find((property) => !!section[property]);
        const schemaIdForSection = section[propertyName];
        return Object.assign(Object.assign({ const: schemaIdForSection }, (section.label && { description: section.label })), (section.custom && { custom: section.custom }));
    });
    // Change 'relatedFacet' only when we have entries for sections - otherwise use generic.
    if (oneOfSections.length) {
        // Create new definition in schema as 'oneOf'.
        // Simpler way would be to use 'enum', but then there no option to pass description.
        schema['definitions']['RelatedFacetKeys'] = {
            type: 'string',
            oneOf: oneOfSections
        };
        // Add enum definition
        for (const name of sectionDefinitions) {
            const definition = schema['definitions'][name];
            const property = definition['properties']['relatedFacet'];
            definition['properties']['relatedFacet'] = {
                anyOf: [
                    {
                        $ref: __1.DEFINITION_LINK_PREFIX + 'RelatedFacetKeys'
                    },
                    property
                ]
            };
        }
    }
}
exports.addDefinitionForRelatedFacetKeys = addDefinitionForRelatedFacetKeys;
/**
 * Functions used both by V2 and V4 to add the common definitions for a line item to the app schema
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param lineItemId - line item ID, as comprise in stable ID
 * @returns the actions definition plus the annotation path to the given line item
 */
function addCommonLineItemDefinitions(appSchema, lineItemAnnotation, entityType, lineItemId) {
    let lineItemPath;
    appSchema['definitions'][lineItemId] = {
        type: 'object',
        properties: {},
        additionalProperties: false,
        isViewNode: true,
        description: 'Columns'
    };
    //Copy toolbar
    const toolBar = lineItemId === 'LineItems' ? 'ToolBar' : 'ObjectPageToolBar';
    const schemaIdForToolBar = `${toolBar}<${lineItemId}>`;
    appSchema['definitions'][schemaIdForToolBar] = JSON.parse(JSON.stringify(appSchema['definitions'][`${toolBar}`]));
    const schemaIdForActions = `Actions<${__1.prepareRef(lineItemId)}>`;
    appSchema['definitions'][schemaIdForToolBar].properties.actions.$ref = __1.DEFINITION_LINK_PREFIX + schemaIdForActions;
    const actionId = lineItemId === 'LineItems' ? 'Actions' : 'ObjectPageToolBarActions';
    const actions = (appSchema['definitions'][schemaIdForActions] = JSON.parse(JSON.stringify(appSchema['definitions'][actionId])));
    actions.properties = {};
    actions.additionalProperties = false;
    //Determine annotation path
    if (lineItemAnnotation) {
        lineItemPath = __1.createAnnotationPath(entityType.fullyQualifiedName, lineItemAnnotation.term, lineItemAnnotation.qualifier);
        appSchema['definitions'][lineItemId].annotationPath = appSchema['definitions'][schemaIdForToolBar].annotationPath = lineItemPath;
    }
    return { actions, lineItemPath };
}
exports.addCommonLineItemDefinitions = addCommonLineItemDefinitions;
/**
 * Add schema definitions for fields of createWithParameterDialog
 * @param {object} appSchema - Application-specific schema, to be enhanced
 * @param {EntityType} entityType - Given entity type for which entries shall get generated
 * @param {string=} floorplanSuffix - floorplan specific suffix (optional)
 */
function addFieldsType(appSchema, entityType, floorplanSuffix = '') {
    const propertyNameArray = [], propertyObject = {};
    const fieldPathRef = `FieldPath${__1.prepareRef(floorplanSuffix)}`;
    for (const key of entityType.entityProperties) {
        const propertyName = key.name;
        propertyNameArray.push(propertyName);
        propertyObject[propertyName] = {
            $ref: __1.DEFINITION_LINK_PREFIX + fieldPathRef
        };
    }
    appSchema['definitions'][entityType.name] = {
        enum: propertyNameArray
    };
    appSchema['definitions'][fieldPathRef].properties.path = {
        $ref: __1.DEFINITION_LINK_PREFIX + entityType.name
    };
    const creationFieldsRef = `CreationFieldKeys${__1.prepareRef(floorplanSuffix)}`;
    appSchema['definitions'][creationFieldsRef] = {
        type: 'object',
        properties: propertyObject,
        additionalProperties: false
    };
    const fields4Dialog = appSchema['definitions'][`Fields4Dialog${floorplanSuffix}`];
    fields4Dialog.properties.fields.$ref = __1.DEFINITION_LINK_PREFIX + creationFieldsRef;
}
exports.addFieldsType = addFieldsType;
//# sourceMappingURL=utils.js.map