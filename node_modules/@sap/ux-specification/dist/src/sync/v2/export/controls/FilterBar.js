"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../../../common/decoration/decorators");
const decoration_1 = require("../../../common/decoration");
const application_1 = require("../../application");
const common_1 = require("../../../common");
const common_2 = require("../../../../specification/common");
function importDateSettings(manifestSection) {
    if (!manifestSection || !manifestSection['dateSettings']) {
        return undefined;
    }
    const configPart = JSON.parse(JSON.stringify(manifestSection['dateSettings']));
    // converted CSV format to array of strings
    if (typeof manifestSection['dateSettings']['selectedValues'] === 'string') {
        configPart.selectedValues = manifestSection['dateSettings']['selectedValues'].split(',');
    }
    if (manifestSection['dateSettings']['fields']) {
        for (const propertyKey in manifestSection['dateSettings']['fields']) {
            configPart.fields[propertyKey] = manifestSection['dateSettings']['fields'][propertyKey];
            const selectedValues = manifestSection['dateSettings']['fields'][propertyKey].selectedValues;
            if (typeof selectedValues === 'string') {
                configPart.fields[propertyKey].selectedValues = selectedValues.split(',');
            }
            for (const filterKey in manifestSection['dateSettings']['fields'][propertyKey].filter) {
                const filterValue = manifestSection['dateSettings']['fields'][propertyKey].filter[filterKey];
                configPart.fields[propertyKey].filter[filterKey] = filterValue;
                if (filterValue.equals && typeof filterValue.equals === 'string') {
                    configPart.fields[propertyKey].filter[filterKey].equals = filterValue.equals.split(',');
                }
            }
        }
    }
    return configPart;
}
exports.importDateSettings = importDateSettings;
function exportDateSettings(manifestSection, configPart, key) {
    manifestSection[key] = JSON.parse(JSON.stringify(configPart[key]));
    //now convert enum array to joined string
    if (key === 'selectedValues') {
        manifestSection[key] = configPart[key].join();
    }
    if (key === 'fields') {
        for (const fieldName in configPart[key]) {
            const field = configPart[key][fieldName];
            if (field.selectedValues) {
                manifestSection[key][fieldName].selectedValues = field.selectedValues.join();
            }
            if (field.filter) {
                for (const filterKey in field.filter) {
                    const filterValue = field.filter[filterKey];
                    if (filterValue.equals && Array.isArray(filterValue.equals)) {
                        manifestSection[key][fieldName].filter[filterKey].equals = filterValue.equals.join();
                    }
                }
            }
        }
    }
}
exports.exportDateSettings = exportDateSettings;
class DateRange {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys, pageType) => {
                if (pageType === common_2.PageType.OverviewPage) {
                    return application_1.getOVPsettingPath() + common_1.DATESETTINGSPATH;
                }
                else {
                    return application_1.getAppSettingPathV2(pageKeys) + common_1.DATESETTINGSPATH;
                }
            }
        }
    }),
    decorators_1.validity({
        since: '1.77.0'
    })
], DateRange.prototype, "useDateRange", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys) + common_1.DATESETTINGSPATH,
            import: importDateSettings,
            export: exportDateSettings
        }
    }),
    decorators_1.validity({
        since: '1.77.0'
    })
], DateRange.prototype, "selectedValues", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys) + common_1.DATESETTINGSPATH
        }
    }),
    decorators_1.validity({
        since: '1.77.0'
    })
], DateRange.prototype, "exclude", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys) + common_1.DATESETTINGSPATH,
            import: importDateSettings,
            export: exportDateSettings
        }
    }),
    decorators_1.validity({
        since: '1.77.0'
    })
], DateRange.prototype, "fields", void 0);
exports.DateRange = DateRange;
class CommonFilterBar {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decorators_1.validity({
        since: '1.38.0'
    })
], CommonFilterBar.prototype, "smartVariantManagement", void 0);
__decorate([
    decorators_1.syncRule({
        flex: {
            controlId: decoration_1.buildControlIdFromParent,
            controlType: () => common_1.ControlType.SmartFilterBar,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    decorators_1.validity({
        since: '1.40.0'
    })
], CommonFilterBar.prototype, "liveMode", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decorators_1.validity({
        since: '1.48.0'
    })
], CommonFilterBar.prototype, "variantManagementHidden", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decorators_1.validity({
        since: '1.52.0' // Available in 1.52 so exact validity information is not required
    })
], CommonFilterBar.prototype, "subTitleIfVariantMgmtHidden", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys) + '/filterSettings',
            import: importDateSettings
        }
    }),
    decorators_1.validity({
        since: '1.77.0'
    })
], CommonFilterBar.prototype, "dateSettings", void 0);
__decorate([
    decorators_1.syncRule({
        flex: {
            controlId: decoration_1.buildControlIdFromParent,
            controlType: () => common_1.ControlType.SmartFilterBar,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    decorators_1.validity({
        since: '1.28.0'
    })
], CommonFilterBar.prototype, "showClearOnFB", void 0);
__decorate([
    decorators_1.syncRule({
        flex: {
            controlId: decoration_1.buildControlIdFromParent,
            controlType: () => common_1.ControlType.SmartFilterBar,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    decorators_1.validity({
        since: '1.38.0'
    })
], CommonFilterBar.prototype, "showFilterConfiguration", void 0);
__decorate([
    decorators_1.syncRule({
        flex: {
            controlId: decoration_1.buildControlIdFromParent,
            controlType: () => common_1.ControlType.SmartFilterBar,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    decorators_1.validity({
        since: '1.28.0'
    })
], CommonFilterBar.prototype, "showRestoreOnFB", void 0);
exports.CommonFilterBar = CommonFilterBar;
class AnalyticalListPageFilterBar extends CommonFilterBar {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    })
], AnalyticalListPageFilterBar.prototype, "showGoButtonOnFilterBar", void 0);
exports.AnalyticalListPageFilterBar = AnalyticalListPageFilterBar;
class ListReportFilterBar extends CommonFilterBar {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decorators_1.validity({
        since: '1.86.0'
    })
], ListReportFilterBar.prototype, "annotationPath", void 0);
exports.ListReportFilterBar = ListReportFilterBar;
//# sourceMappingURL=FilterBar.js.map