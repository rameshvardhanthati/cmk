"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../../../common/decoration/decorators");
const application_1 = require("../../application");
const FilterBar_1 = require("../controls/FilterBar");
function importFilterSettings(manifestSection) {
    const configPart = {};
    configPart['dateSettings'] = FilterBar_1.importDateSettings(manifestSection['filterSettings']);
    return configPart;
}
exports.importFilterSettings = importFilterSettings;
function exportFilterSettings(manifestSection, configPart) {
    if (!manifestSection['filterSettings']) {
        manifestSection['filterSettings'] = {};
    }
    const key = 'dateSettings';
    if (configPart['filterSettings'][key] === undefined) {
        delete manifestSection['filterSettings'][key];
    }
    else {
        manifestSection['filterSettings'][key] = JSON.parse(JSON.stringify(configPart['filterSettings'][key]));
        //now convert enum array to joined string
        if (configPart['filterSettings'][key]['selectedValues']) {
            manifestSection['filterSettings'][key]['selectedValues'] = configPart['filterSettings'][key]['selectedValues'].join();
        }
        if (configPart['filterSettings'][key]['fields']) {
            for (const fieldName in configPart['filterSettings'][key]['fields']) {
                const field = configPart['filterSettings'][key]['fields'][fieldName];
                if (field.selectedValues) {
                    manifestSection['filterSettings'][key]['fields'][fieldName].selectedValues = field.selectedValues.join();
                }
                if (field.filter) {
                    for (const filterKey in field.filter) {
                        const filterValue = field.filter[filterKey];
                        if (filterValue.equals && Array.isArray(filterValue.equals)) {
                            manifestSection['filterSettings'][key]['fields'][fieldName].filter[filterKey].equals = filterValue.equals.join();
                        }
                    }
                }
            }
        }
    }
}
exports.exportFilterSettings = exportFilterSettings;
let OverviewPage = class OverviewPage {
};
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "globalFilterModel", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "globalFilterEntityType", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "globalFilterEntitySet", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "containerLayout", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "smartVariantRequired", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "showDateInRelativeFormat", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "enableLiveFilter", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "imageSupported", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "considerAnalyticalParameters", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "refreshIntervalInMinutes", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: { path: () => application_1.getOVPsettingPath() }
    })
], OverviewPage.prototype, "useDateRangeType", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (cardKeys) => application_1.getGlobalSettingsPath(cardKeys)
        }
    }),
    decorators_1.validity({
        since: '1.80.0'
    })
], OverviewPage.prototype, "chartSettings", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath(),
            import: importFilterSettings,
            export: exportFilterSettings
        }
    }),
    decorators_1.validity({
        since: '1.80.0'
    })
], OverviewPage.prototype, "filterSettings", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "showBasicSearch", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "disableErrorPage", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: () => application_1.getOVPsettingPath()
        }
    })
], OverviewPage.prototype, "bHeaderExpanded", void 0);
OverviewPage = __decorate([
    decorators_1.pageLayoutInformation({
        id: 'sap.suite.ui.generic.template.OverviewPage.view.Details',
        pageId: 'sap.suite.ui.generic.template.OverviewPage'
    })
], OverviewPage);
exports.OverviewPage = OverviewPage;
//# sourceMappingURL=OverviewPage.js.map