"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const decorators_1 = require("../../common/decoration/decorators");
const path_1 = require("path");
const xml_js_1 = require("xml-js");
exports.CUSTOM_COLUMNS_DEFINITION = 'TableCustomColumns';
exports.CUSTOM_COLUMN_DEFINITION = 'TableCustomColumn';
/**
 * Processes a LineItem record of type DataFieldForCation during app schema generation
 * @param appSchema - the app specific schema that shall get enhanced
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param actions - actions definition in schema, parent object
 * @param lineItemPath - annotation path to the line item
 * @param lineItemRecord - actual record of the line item collection
 * @param recordIndex - record index in the collection
 */
function handleActionRecord(appSchema, entityType, actions, lineItemPath, lineItemRecord, recordIndex) {
    // Action but not inline action
    if (lineItemRecord.Determining !== true) {
        //no footer bar -> toolbar action
        const actionDefinition = `ToolBarAction<${common_1.prepareRef(lineItemRecord.Action)}>`;
        const description = common_1.getDatafieldDescription(lineItemRecord, entityType);
        actions['properties'][`DataFieldForAction::${lineItemRecord.Action}`] = {
            $ref: common_1.DEFINITION_LINK_PREFIX + actionDefinition,
            description,
            propertyIndex: recordIndex
        };
        appSchema['definitions'][actionDefinition] = {
            type: 'object',
            properties: {},
            description,
            annotationPath: lineItemPath + '/' + recordIndex,
            isViewNode: true,
            additionalProperties: false
        };
    }
}
exports.handleActionRecord = handleActionRecord;
/**
 * Adds the line item records to the app schema (for the list report or an object page section comprising a table)
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param lineItemId - optional: in case of OP the paramter must be passed to distinguish the OP tables;
 *                      in case of LR or ALP no ID is passed, 'LineItems' is taken then.
 * @param customColumnRef - schema reference to custom column definition.
 */
function addLineItemsType(appSchema, lineItemAnnotation, entityType, lineItemId, customColumnRef) {
    let schemaKey;
    // Add the correct lineItem definition
    lineItemId = lineItemId || 'LineItems';
    const { actions, lineItemPath } = common_1.addCommonLineItemDefinitions(appSchema, lineItemAnnotation, entityType, lineItemId);
    if (lineItemAnnotation) {
        let i = 0;
        lineItemAnnotation.forEach((lineItemRecord) => {
            if (lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* DataFieldForIntentBasedNavigation */ ||
                (lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */ &&
                    (lineItemRecord.Inline !== true || lineItemRecord.Determining === true))) {
                handleActionRecord(appSchema, entityType, actions, lineItemPath, lineItemRecord, i);
            }
            else {
                schemaKey = common_1.getSchemaKeyOfLineItemRecord(lineItemRecord);
                if (schemaKey) {
                    appSchema['definitions'][lineItemId]['properties'][schemaKey] = {
                        $ref: common_1.DEFINITION_LINK_PREFIX + 'TableColumn',
                        description: common_1.getDatafieldDescription(lineItemRecord, entityType),
                        // Custom property in schema - for object properties ordering purpose
                        propertyIndex: i,
                        annotationPath: lineItemPath + '/' + i
                    };
                }
            }
            i++;
        });
    }
    if (customColumnRef) {
        appSchema['definitions'][lineItemId]['properties']['custom'] = {
            $ref: `${common_1.DEFINITION_LINK_PREFIX}${customColumnRef}`
        };
    }
}
exports.addLineItemsType = addLineItemsType;
/**
 * Adds enum entries of posible leading properties for 'leadingProperty' property in TableCustomColumn properties.
 * @param appSchema - the app specific schema that shall get enhanced
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param definitionName - definition name of CustomColumn definition
 */
function addListReportLeadingProperties(appSchema, entityType, definitionName) {
    // Leading Property
    const leadingPropertySchema = appSchema['definitions'][definitionName] &&
        appSchema['definitions'][definitionName]['properties'] &&
        appSchema['definitions'][definitionName]['properties']['leadingProperty'];
    if (leadingPropertySchema) {
        const properties = [
            //  Entity properties
            ...((entityType === null || entityType === void 0 ? void 0 : entityType.entityProperties) || []),
            // Navigation Properties
            ...((entityType === null || entityType === void 0 ? void 0 : entityType.navigationProperties) || [])
        ];
        leadingPropertySchema['enum'] = properties === null || properties === void 0 ? void 0 : properties.reduce((result, property) => {
            if (!result.includes(property.name)) {
                result.push(property.name);
            }
            return result;
        }, []);
    }
}
exports.addListReportLeadingProperties = addListReportLeadingProperties;
/**
 * Adds enum entries of posible tabKey properties for 'leadingProperty' property in TableCustomColumn properties.
 * @param appSchema - the app specific schema that shall get enhanced
 * @param definitionName - definition name of CustomColumn definition
 * @param page - sapui5 page object
 */
function addTabkeyEnum(appSchema, definitionName, page) {
    const tabkeyPropertySchema = appSchema['definitions'][definitionName] &&
        appSchema['definitions'][definitionName]['properties'] &&
        appSchema['definitions'][definitionName]['properties']['tabKey'];
    if (page) {
        const quickVariantsX = page.component &&
            page.component.settings &&
            page.component.settings.quickVariantSelectionX &&
            page.component.settings.quickVariantSelectionX['variants'];
        if (quickVariantsX) {
            const enumEntries = [];
            Object.keys(quickVariantsX).reduce((result, variant) => {
                const key = quickVariantsX[variant] && quickVariantsX[variant]['key'] !== undefined
                    ? quickVariantsX[variant]['key']
                    : undefined;
                // Avoid duplicates
                if (key !== undefined && !result.includes(key)) {
                    result.push(key);
                }
                return result;
            }, enumEntries);
            tabkeyPropertySchema['enum'] = enumEntries;
        }
    }
}
exports.addTabkeyEnum = addTabkeyEnum;
/**
 * Adds enum entries of posible fragment entries.
 * @param {object} appSchema The app specific schema that shall get enhanced.
 * @param {FileData[]} fragments Array of fragments.
 * @param {string[]} appId Application id.
 * @param {string} property Property name.
 * @param {string} definitionName Definition name of CustomColumn definition.
 */
function addFragmentEnum(appSchema, fragments, appId, property, definitionName) {
    const fragmentPropertySchema = appSchema['definitions'][definitionName] &&
        appSchema['definitions'][definitionName]['properties'] &&
        appSchema['definitions'][definitionName]['properties'][property];
    if (fragments && appId && !appId.startsWith('${')) {
        const enumEntries = [];
        fragments.forEach((fragment) => {
            let relPath = fragment.dataSourceUri.split('webapp')[1];
            if (relPath && relPath.indexOf('.fragment.xml') > 0) {
                const fragmentJson = JSON.parse(xml_js_1.xml2json(fragment.fileContent, { compact: true }))['core:FragmentDefinition'];
                if ((property === 'fragmentName' &&
                    (!fragmentJson || fragmentJson.Column || fragmentJson['table:Column'])) ||
                    (property === 'cellsFragmentName' &&
                        (!fragmentJson ||
                            (!fragmentJson.Column &&
                                !fragmentJson['table:Column'] &&
                                !fragmentJson['smartfilterbar:ControlConfiguration'])))) {
                    relPath = relPath.replace(new RegExp('\\' + path_1.sep, 'g'), '/');
                    const fragmentName = appId + relPath.split('.fragment.xml')[0].replace(/\//g, '.');
                    enumEntries.push(fragmentName);
                }
            }
        });
        if (enumEntries.length > 0) {
            fragmentPropertySchema['enum'] = enumEntries;
        }
    }
}
exports.addFragmentEnum = addFragmentEnum;
/**
 * Adds the custom columns to the line item records of the app schema (for the list report comprising a table).
 * @param {object} appSchema The app specific schema that shall get enhanced.
 * @param {EntityType} entityType The entity type as part of the AVT ConverterOutput.
 * @param {SapUiAppPageV2} page Sapui5 page object.
 * @param {object} manifest Application manifest.
 * @param {FileData[]} [fragments] Array of fragments.
 * @param {string} [customColumnsDefinitionName=CUSTOM_COLUMNS_DEFINITION] Definition name of Custom Columns definition.
 * @param {string} [customColumnDefinitionName=CUSTOM_COLUMN_DEFINITION] Definition name of Custom Column definition.
 */
function addListReportColumnExtensions(appSchema, entityType, page, manifest, fragments, customColumnsDefinitionName = exports.CUSTOM_COLUMNS_DEFINITION, customColumnDefinitionName = exports.CUSTOM_COLUMN_DEFINITION) {
    if (appSchema['definitions']['LineItems']) {
        appSchema['definitions']['LineItems']['properties']['custom'] = {
            $ref: `${common_1.DEFINITION_LINK_PREFIX}${customColumnsDefinitionName}`
        };
    }
    appSchema['definitions'][customColumnsDefinitionName] = {
        type: 'array',
        items: {
            $ref: `${common_1.DEFINITION_LINK_PREFIX}${customColumnDefinitionName}`
        },
        isViewNode: true,
        description: 'Custom Columns'
    };
    // Leading Property
    addListReportLeadingProperties(appSchema, entityType, customColumnDefinitionName);
    // Tab key property
    addTabkeyEnum(appSchema, customColumnDefinitionName, page);
    // Fragment property
    const appId = manifest && manifest['sap.app'] && manifest['sap.app']['id'];
    addFragmentEnum(appSchema, fragments, appId, 'fragmentName', customColumnDefinitionName);
    addFragmentEnum(appSchema, fragments, appId, 'cellsFragmentName', customColumnDefinitionName);
}
exports.addListReportColumnExtensions = addListReportColumnExtensions;
/**
 * After the generation of a generic schema, apply post-generation rule to a single property
 * @param metaDataDefinition
 * @param schema - given app schema, to be adapted
 * @param pageType - page type
 * @param factory - factory for creating metadata instances
 * @param propertyDefinition - definition of the single property
 * @param propertyKey - key of the single property
 * @param schemaDefinition - the current entry point or definition in the app schema
 */
function processSingleProperty(metaDataDefinition, schema, pageType, factory, propertyDefinition, propertyKey, schemaDefinition) {
    if (metaDataDefinition) {
        const syncRule = decorators_1.getReflectMetadata(metaDataDefinition, propertyKey);
        if (syncRule) {
            if (typeof syncRule.generate === 'function') {
                syncRule.generate(schema, schemaDefinition, propertyKey);
                propertyDefinition = schemaDefinition['properties'][propertyKey];
            }
            //Add artifact type
            if (syncRule.manifest !== undefined) {
                propertyDefinition.artifactType = common_1.ArtifactType.Manifest;
            }
            else if (syncRule.flex !== undefined) {
                propertyDefinition.artifactType = common_1.ArtifactType.FlexChange;
                //Add control type
                if (syncRule.flex.controlType) {
                    propertyDefinition.controlType = syncRule.flex.controlType();
                }
            }
            else {
                propertyDefinition.artifactType = common_1.ArtifactType.Annotation;
            }
        }
        if (propertyDefinition.type === 'object' || propertyDefinition.$ref) {
            const nextDefinition = common_1.getNextTargetDefinition(schema, '', {}, propertyDefinition, propertyKey, factory, pageType);
            if (nextDefinition) {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                processMetadata(schema, nextDefinition.targetDefinition, nextDefinition.configObject, pageType, factory);
            }
        }
        else if (propertyDefinition['anyOf']) {
            propertyDefinition['anyOf'].forEach((element) => {
                const nextDefinition = common_1.getNextTargetDefinition(schema, '', {}, element, propertyKey, factory, pageType);
                if (nextDefinition) {
                    // eslint-disable-next-line @typescript-eslint/no-use-before-define
                    processMetadata(schema, nextDefinition.targetDefinition, nextDefinition.configObject, pageType, factory);
                }
            });
        }
    }
}
/**
 * After the generation of a generic schema, apply rules to a list of properties of the given schema section
 * @param schema - given app schema, to be adapted
 * @param schemaDefinition - the current entry point or definition in the app schema
 * @param pageType - page type
 * @param factory - factory for creating metadata instances
 */
function processProperties(schema, schemaDefinition, metaDataDefinition, propertiesSection, pageType, factory) {
    if (schemaDefinition[propertiesSection]) {
        for (const propertyKey in schemaDefinition[propertiesSection]) {
            if (propertyKey === 'anyOf') {
                schemaDefinition[propertiesSection]['anyOf'].forEach((element) => {
                    const nextDefinition = common_1.getNextTargetDefinition(schema, '', {}, element, propertyKey, factory, pageType);
                    if (nextDefinition) {
                        // eslint-disable-next-line @typescript-eslint/no-use-before-define
                        processMetadata(schema, nextDefinition.targetDefinition, nextDefinition.configObject, pageType, factory);
                    }
                });
            }
            else {
                const propertyDefinition = schemaDefinition[propertiesSection][propertyKey];
                if (propertyDefinition['anyOf']) {
                    propertyDefinition['anyOf'].forEach((element) => {
                        const nextDefinition = common_1.getNextTargetDefinition(schema, '', {}, element, propertyKey, factory, pageType);
                        if (nextDefinition) {
                            // eslint-disable-next-line @typescript-eslint/no-use-before-define
                            processMetadata(schema, nextDefinition.targetDefinition, nextDefinition.configObject, pageType, factory);
                        }
                    });
                }
                else {
                    if (propertyKey === '$ref') {
                        const nextDefinition = common_1.getNextTargetDefinition(schema, '', {}, schemaDefinition[propertiesSection], propertyKey, factory, pageType);
                        if (nextDefinition) {
                            // eslint-disable-next-line @typescript-eslint/no-use-before-define
                            processMetadata(schema, nextDefinition.targetDefinition, nextDefinition.configObject, pageType, factory);
                        }
                    }
                    else {
                        processSingleProperty(metaDataDefinition, schema, pageType, factory, propertyDefinition, propertyKey, schemaDefinition);
                    }
                }
            }
        }
    }
}
/**
 * Apply post-processing rules as specified in form of "generate" at the syncRule
 * @param schema - given app schema, to be adapted
 * @param schemaDefinition - the current entry point or definition in the app schema
 * @param pageType - page type
 * @param factory - factory for creating metadata instances
 */
function processMetadata(schema, schemaDefinition, metaDataDefinition, pageType, factory) {
    processProperties(schema, schemaDefinition, metaDataDefinition, 'properties', pageType, factory);
    processProperties(schema, schemaDefinition, metaDataDefinition, 'additionalProperties', pageType, factory);
    processProperties(schema, schemaDefinition, metaDataDefinition, 'patternProperties', pageType, factory);
}
exports.processMetadata = processMetadata;
/**
 * Method updates passed 'enum' array by removing passed matching entries.
 * @param {Array<unknown>} values Array of values.
 * @param {Array<unknown>} valuesToRemove Array of values to remove.
 */
function removeElementsFromEnum(values, valuesToRemove) {
    for (let i = 0; i < valuesToRemove.length; i++) {
        const index = values.indexOf(valuesToRemove[i]);
        if (index !== -1) {
            // Value exists - remove it
            values.splice(index, 1);
        }
    }
}
exports.removeElementsFromEnum = removeElementsFromEnum;
//# sourceMappingURL=utils.js.map