"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("../../../../v2");
const table_1 = require("../controls/table");
const extensionLogger_1 = require("../../../../extensionLogger");
const utils_1 = require("../utils");
const common_1 = require("../../../common");
const manifest_1 = require("../../export/manifest");
const sapUiPageV2_1 = require("../.../../../../../specification/v2/webapp/manifest/sapUiPageV2");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../../i18n/i18n");
const common_2 = require("../../../../specification/common");
const listReport_1 = require("../pages/listReport");
const factory_1 = require("../../export/factory");
const types_1 = require("../../types");
/**
 * Prepares the list of flex changes
 * @param change - the flex change (UI Adaptation)
 * @returns {FlexChangesForTransfer} - list of prepared flex changes
 */
function prepareFlexChanges(changes, entitySet, logger) {
    const result = {};
    // To create unique selector Id in case there are multiple change files with same selector ID
    let i = 1;
    changes.forEach((changeString) => {
        var _a, _b;
        try {
            const change = common_1.parseChangeString(changeString);
            if (change && ((_a = change.controlId) === null || _a === void 0 ? void 0 : _a.includes(sapUiPageV2_1.FE_TEMPLATE_V2_OBJECT_PAGE)) && ((_b = change.controlId) === null || _b === void 0 ? void 0 : _b.includes(entitySet))) {
                let selectorId = change.controlId.split('--')[1].replace(/:3a:3a/g, '::');
                const complexIdMatch = new RegExp('.+DataField.+:::sSmartTableId::.+');
                if (complexIdMatch.exec(selectorId) !== null) {
                    selectorId = selectorId.split('template:::TableColumn:::')[1];
                }
                const selectorIdParts = selectorId.split(':::');
                let id, facetID;
                if (selectorIdParts.length === 1) {
                    const lastIdParts = selectorIdParts[0].split('-');
                    id = lastIdParts[lastIdParts.length - 1];
                    if (selectorIdParts[0].indexOf("com.sap.vocabularies.UI.v1.LineItem" /* LineItem */) >= 0 ||
                        selectorIdParts[0].indexOf('UI.LineItem') >= 0 ||
                        selectorIdParts[0].indexOf('::Table') >= 0) {
                        facetID = lastIdParts[0]
                            .split('::Table')[0]
                            .split('::responsiveTable')[0]
                            .replace(/::/g, '/@');
                    }
                    else {
                        const idParts = id.split('::');
                        if (idParts.length > 1) {
                            facetID = idParts[0];
                        }
                        else if (lastIdParts[0].indexOf('::') > -1) {
                            facetID = lastIdParts[0].split('::')[0];
                        }
                    }
                }
                else if (selectorId.indexOf('sSmartTableId') >= 0) {
                    for (const element of selectorIdParts) {
                        if (element.startsWith('sSmartTableId')) {
                            facetID = element
                                .split('sSmartTableId::')[1]
                                .split('::Table')[0]
                                .split('/responsiveTable')[0]
                                .replace(`::${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}`, `/@${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}`);
                            break;
                        }
                    }
                }
                else {
                    facetID = selectorIdParts[0];
                }
                selectorId = selectorId
                    .replace(/:2f/g, '/')
                    .replace(/:40/g, '@')
                    .replace(/:23/g, '#')
                    .replace(/:3a:3a/g, '::')
                    .replace(/\/@com.sap.vocabularies/g, '::com.sap.vocabularies');
                if (result[selectorId] && result[selectorId].propertyId !== change.content.property) {
                    selectorId = selectorId + i;
                    i++;
                }
                result[selectorId] = {
                    controlId: selectorId,
                    propertyId: change.content.property,
                    facetId: facetID,
                    newValue: change.content.newBinding !== undefined ? change.content.newBinding : change.content.newValue,
                    controlType: change.controlType
                };
            }
        }
        catch (error) {
            extensionLogger_1.log(logger, {
                severity: "error" /* Error */,
                message: i18next_1.default.t('FLEXERROR')
            }, ...error);
        }
    });
    return result;
}
const addFlexToConfig = (config, propertyKey, flexChange) => {
    config[propertyKey] = flexChange;
};
const getSectionType = (schemaSection) => {
    let reference;
    if (schemaSection['$ref']) {
        reference = schemaSection['$ref'].includes('<') ? schemaSection['$ref'].split('<')[0] : schemaSection['$ref'];
        return reference.replace(common_1.DEFINITION_LINK_PREFIX, '');
    }
    else if (schemaSection['properties']['subsections']['$ref']) {
        reference = schemaSection['properties']['subsections']['$ref'];
        reference = reference.includes('<') ? reference.split('<')[0] : reference;
        return reference.replace(common_1.DEFINITION_LINK_PREFIX, '');
    }
    else if (schemaSection['properties']['subsections']) {
        return types_1.SectionTypeV2.SubSection;
    }
};
/**
 * Transfers settings from manifest and flexChanges to object page config
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param configPart - part of the configuration to be filled
 * @param schemaDefinition - current section of the app specific schema
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 * @param sectionId - ID of the given section (optional)
 * @param sectionTitle - title of the section (optional)
 * @param actionId - ID of the given action (optional)
 */
function transferSettingsAndFlexChanges(importParameters, configPart, schemaDefinition, pageKeys, flexChanges, sectionId, sectionTitle, actionId) {
    var _a;
    if (!schemaDefinition) {
        return;
    }
    let deprecatedProperties = [];
    let manifestSection = {};
    if (configPart === null || configPart === void 0 ? void 0 : configPart.getDeprecated) {
        deprecatedProperties = configPart.getDeprecated();
    }
    const unescapedId = sectionId && sectionId.replace(/::@com.sap.vocabularies/g, v2_1.VOCWITHSLASH);
    for (const propertyKey in schemaDefinition['properties'] || schemaDefinition) {
        const syncRule = common_1.getReflectMetadata(configPart, propertyKey);
        if (syncRule || propertyKey === 'columns') {
            if (propertyKey === 'columns' || (syncRule && syncRule.flex)) {
                if (sectionId) {
                    for (const selector in flexChanges) {
                        const flexChange = flexChanges[selector];
                        const propertyIdMatch = flexChange.propertyId === propertyKey;
                        const isTableColumn = propertyKey === 'columns' && flexChange.controlType === common_1.ControlType.TableColumn;
                        const facetIds = [sectionId, unescapedId, sectionTitle];
                        if ((propertyIdMatch || isTableColumn) && facetIds.indexOf(flexChange === null || flexChange === void 0 ? void 0 : flexChange.facetId) > -1) {
                            table_1.addFlexForTable(configPart, flexChanges[selector], importParameters.jsonSchema);
                        }
                    }
                }
                else {
                    for (const selector in flexChanges) {
                        const flexChange = flexChanges[selector];
                        const actionIdMatch = !actionId || new RegExp(`.*${actionId}\\d?$`).test(selector);
                        const propertyIdMatch = flexChange.propertyId === propertyKey;
                        const schemaControlType = (_a = schemaDefinition['properties'][flexChange.propertyId]) === null || _a === void 0 ? void 0 : _a.controlType;
                        const controlTypeMatch = flexChange.controlType === schemaControlType;
                        if (!flexChange.facetId && actionIdMatch && propertyIdMatch) {
                            addFlexToConfig(configPart, propertyKey, flexChange.newValue);
                            break;
                        }
                        else if (flexChange.facetId === 'action' &&
                            !sectionTitle &&
                            actionIdMatch &&
                            propertyIdMatch) {
                            // Actions
                            addFlexToConfig(configPart, propertyKey, flexChange.newValue);
                            break;
                        }
                        else if (!sectionTitle && actionIdMatch && propertyIdMatch && controlTypeMatch) {
                            addFlexToConfig(configPart, propertyKey, flexChange.newValue);
                            break;
                        }
                        else if (selector.includes(sectionTitle) &&
                            actionIdMatch &&
                            propertyIdMatch &&
                            controlTypeMatch) {
                            // Sections
                            addFlexToConfig(configPart, propertyKey, flexChange.newValue);
                            break;
                        }
                    }
                }
            }
            else if (syncRule.manifest) {
                const sectionIdInManifest = sectionId
                    ? sectionId.replace(/\/@/g, '::').replace(/@com.sap/g, 'com.sap')
                    : undefined;
                const path = syncRule.manifest.path(pageKeys, {}, sectionIdInManifest);
                manifestSection = manifest_1.getManifestSectionByPathV2(importParameters.manifest, path);
                const importHandler = syncRule.manifest.import;
                if (importHandler && typeof importHandler === 'function') {
                    const value = importHandler(manifestSection, sectionId);
                    if (value !== undefined) {
                        configPart[propertyKey] = value;
                    }
                }
                else {
                    const manifestKey = syncRule.manifest.key || propertyKey;
                    if (manifestKey in manifestSection) {
                        configPart[propertyKey] = manifestSection[manifestKey];
                    }
                }
                // Check for deprecated properties.
                if (manifestSection && deprecatedProperties) {
                    for (const key in manifestSection) {
                        const deprecated = deprecatedProperties[key];
                        if (deprecated) {
                            extensionLogger_1.log(importParameters.logger, {
                                severity: "warning" /* Warning */,
                                message: common_1.getTextForDeprecated(key, deprecated),
                                location: {
                                    path: 'webapp/manifest.json/',
                                    range: path.split('/')
                                }
                            });
                            delete deprecatedProperties[key];
                        }
                    }
                }
            }
        }
    }
}
/**
 *  Fills the fields of an object page form
 * @param escapedId - current Id for config part
 * @param fieldProperties - current properties' list (of fields)
 * @param configPart - the given part of the object page config
 * @param manifest - manifest.json of the app
 * @param jsonSchema - app specific schema
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 */
function fillFields(importParameters, escapedId, fieldProperties, configPart, factory, pageKeys, flexChanges) {
    let fieldId;
    configPart[escapedId]['form']['fields'] = {};
    for (const fieldProperty in fieldProperties) {
        fieldId = fieldProperty.includes('::')
            ? fieldProperty.split('::')[1] + '::GroupElement'
            : fieldProperty + '::GroupElement';
        configPart[escapedId]['form']['fields'][fieldProperty] = factory.createInstance(common_2.PageType.ObjectPage, 'Field');
        transferSettingsAndFlexChanges(importParameters, configPart[escapedId]['form']['fields'][fieldProperty], importParameters.jsonSchema['definitions']['Field'], pageKeys, flexChanges, undefined, undefined, fieldId);
        if (Object.keys(configPart[escapedId]['form']['fields'][fieldProperty]).length === 0) {
            delete configPart[escapedId]['form']['fields'][fieldProperty];
        }
    }
    if (Object.keys(configPart[escapedId]['form']['fields']).length === 0) {
        delete configPart[escapedId]['form']['fields'];
    }
}
/**
 * Fill table settings in config.json
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param manifestSettings - object page settings section of the manifest
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param configPart - the given part of the object page config
 * @param manifest - manifest.json of the app
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param logger - Logger class for logging messages
 * @param sectionId - ID of the current section
 * @param sectionType - Section type (Sub/Section Table)
 */
function fillTableInConfig(importParameters, manifestSettings, flexChanges, factory, configPart, pageKeys, sectionId, sectionType) {
    const escapedSectionId = sectionId.replace(/\/@/g, '::');
    const schemaSection = importParameters.jsonSchema['definitions'][`${sectionType}<${sectionId}>`];
    const sectionTitle = schemaSection.title ? schemaSection.title.split(v2_1.FacetTitlePrefix)[1] : undefined;
    const manifestKey = escapedSectionId.replace('@com.sap', 'com.sap');
    const manifestSection = manifestSettings && manifestSettings.sections && manifestSettings.sections[manifestKey];
    if (manifestSection || flexChanges) {
        const tableType = manifestSection
            ? manifestSection.tableSettings
                ? manifestSection.tableSettings.type
                    ? manifestSection.tableSettings.type
                    : 'ResponsiveTable'
                : 'ResponsiveTable'
            : 'ResponsiveTable';
        //Instantiate metadata
        const OPtable = factory.createInstance(common_2.PageType.ObjectPage, `ObjectPage${tableType}`);
        configPart[escapedSectionId] = factory.createInstance(common_2.PageType.ObjectPage, sectionType, { table: {} });
        configPart[escapedSectionId]['table'] = OPtable;
        let localJsonSchema;
        const schemaDefinitions = importParameters.jsonSchema['definitions'];
        if (tableType === 'TreeTable' || tableType === 'AnalyticalTable' || tableType === 'GridTable') {
            localJsonSchema = schemaDefinitions['ObjectPage' + tableType + '<' + escapedSectionId + '>'];
        }
        else {
            if (schemaDefinitions[`ObjectPageResponsiveTableWithMultiSelect<${escapedSectionId}>`] &&
                schemaDefinitions[`ObjectPageResponsiveTableWithInlineDelete<${escapedSectionId}>`]) {
                localJsonSchema = JSON.parse(JSON.stringify(schemaDefinitions[`ObjectPageResponsiveTableWithMultiSelect<${escapedSectionId}>`]));
                localJsonSchema['properties'] = Object.assign(Object.assign({}, localJsonSchema['properties']), schemaDefinitions[`ObjectPageResponsiveTableWithInlineDelete<${escapedSectionId}>`]['properties']);
            }
        }
        transferSettingsAndFlexChanges(importParameters, configPart[escapedSectionId], schemaSection, pageKeys, flexChanges, undefined, sectionTitle);
        transferSettingsAndFlexChanges(importParameters, configPart[escapedSectionId]['table'], localJsonSchema, pageKeys, flexChanges, sectionId, sectionTitle);
    }
}
/**
 * Fills custom columns in a V2 object page config JSON
 * @param appSchema - app specific schema
 * @param escapedSectionId - escaped version of the section ID
 * @param sectionTitle - section title
 * @param configPart - the given part of the object page config
 * @param manifest - manifest.json of the app
 * @param {SapUiAppPageV2} v2Page - v2 page from manifest.
 * @param {FileData[]} fragments - Array with XML fragments.
 */
function fillCustomColumnsInConfig(importParameters, escapedSectionId, sectionTitle, configPart, v2Page) {
    const customColumnSchemaProp = importParameters.jsonSchema['definitions'][escapedSectionId].properties.custom;
    const customColumnTarget = customColumnSchemaProp
        ? utils_1.getTargetFromCustomColumnRef(customColumnSchemaProp.$ref)
        : undefined;
    if (customColumnTarget) {
        const objectPageSectionData = {
            key: sectionTitle || escapedSectionId.replace('@', ''),
            target: customColumnTarget
        };
        listReport_1.addFragments(configPart[escapedSectionId], importParameters.manifest, v2Page, common_2.PageType.ObjectPage, importParameters.fragments, objectPageSectionData);
    }
}
/**
 *  Fills the action of the configuration
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param actionProperties - current properties' list (of action)
 * @param configPart - the given part of the object page config
 * @param actionInstance - type of action that should be initiated
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 */
function fillActions(importParameters, actionProperties, configPart, factory, pageKeys, flexChanges, sectionId) {
    let actionId, configActionId;
    configPart['actions'] = {};
    const actionType = sectionId ? 'FormAction' : 'HeaderAction';
    if (flexChanges.constructor === Object && Object.keys(flexChanges).length !== 0) {
        for (const actionProperty in actionProperties) {
            configActionId = actionProperty.replace(/@/g, '::');
            actionId = (sectionId ? `${actionProperty}${sectionId}` : actionProperty).replace(/@/g, '::');
            configPart['actions'][configActionId] = factory.createInstance(common_2.PageType.ObjectPage, actionType);
            transferSettingsAndFlexChanges(importParameters, configPart['actions'][configActionId], importParameters.jsonSchema['definitions'][actionType], pageKeys, flexChanges, undefined, undefined, actionId);
            if (sectionId && Object.keys(configPart['actions'][configActionId]).length === 0) {
                delete configPart['actions'][configActionId];
            }
        }
    }
    if (sectionId && Object.keys(configPart['actions']).length === 0) {
        delete configPart['actions'];
    }
}
/**
 *  Fills the sections and subsections of the object page config (recursive function)
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param sectionProperties - current properties' list (of sections or subsections)
 * @param manifestSettings - object page settings section of the manifest
 * @param configPart - the given part of the object page config
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 * @param {SapUiAppPageV2} v2Page - v2 page from manifest.
 * @param {ObjectPageConfig} objectPageConfig - page config object.
 */
function fillSectionsInConfig(importParameters, sectionProperties, manifestSettings, configPart, factory, pageKeys, flexChanges, v2Page, objectPageConfig) {
    var _a, _b;
    let sectionTitle;
    for (const sectionId in sectionProperties) {
        const escapedSectionId = sectionId.replace(/\/@/g, '::');
        let schemaSection = sectionProperties[sectionId];
        if (schemaSection['$ref'] &&
            (getSectionType(schemaSection) === types_1.SectionTypeV2.SectionTable ||
                getSectionType(schemaSection) === types_1.SectionTypeV2.SubSectionTable)) {
            const sectionType = getSectionType(schemaSection);
            fillTableInConfig(importParameters, manifestSettings, flexChanges, factory, configPart, pageKeys, sectionId, sectionType);
            // Custom column ref
            fillCustomColumnsInConfig(importParameters, escapedSectionId, sectionTitle, configPart, v2Page);
        }
        else if (schemaSection['$ref'] &&
            (getSectionType(schemaSection) === types_1.SectionTypeV2.SectionChart ||
                getSectionType(schemaSection) === types_1.SectionTypeV2.SubSectionChart)) {
            // Section without subsections
            const sectionType = getSectionType(schemaSection);
            schemaSection = importParameters.jsonSchema['definitions'][`${sectionType}<${sectionId}>`];
            const sectionTitle = common_1.getSectionTitle(schemaSection, importParameters.jsonSchema);
            const manifestKey = escapedSectionId.replace('@com.sap', 'com.sap');
            const manifestSection = manifestSettings && manifestSettings.sections && manifestSettings.sections[manifestKey];
            configPart[escapedSectionId] = factory.createInstance(common_2.PageType.ObjectPage, sectionType, { chart: {} });
            configPart[escapedSectionId]['chart'] = factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageChart');
            if (manifestSection || flexChanges) {
                transferSettingsAndFlexChanges(importParameters, configPart[escapedSectionId], schemaSection, pageKeys, flexChanges, undefined, sectionTitle);
                transferSettingsAndFlexChanges(importParameters, configPart[escapedSectionId]['chart'], importParameters.jsonSchema['definitions']['ObjectPageChart'], pageKeys, flexChanges, sectionId, sectionTitle);
            }
        }
        else if (schemaSection['$ref'] &&
            (getSectionType(schemaSection) === types_1.SectionTypeV2.SectionForm ||
                getSectionType(schemaSection) === types_1.SectionTypeV2.SubSectionForm)) {
            const sectionType = getSectionType(schemaSection);
            schemaSection = importParameters.jsonSchema['definitions'][`${sectionType}<${sectionId}>`];
            const sectionTitle = common_1.getSectionTitle(schemaSection, importParameters.jsonSchema);
            const formId = schemaSection['properties']['form']['$ref'].split('SectionForm')[1];
            configPart[escapedSectionId] = factory.createInstance(common_2.PageType.ObjectPage, sectionType, { form: {} });
            if (flexChanges) {
                transferSettingsAndFlexChanges(importParameters, configPart[escapedSectionId], schemaSection, pageKeys, flexChanges, undefined, sectionTitle);
            }
            const formActions = importParameters.jsonSchema['definitions'][`SectionActions${formId}`];
            if (formActions['properties']) {
                fillActions(importParameters, formActions.properties, configPart[escapedSectionId]['form'], factory, pageKeys, flexChanges, `${escapedSectionId}::FormAction`);
            }
            const formFields = importParameters.jsonSchema['definitions'][`SectionFields${formId}`];
            if (formFields['properties']) {
                fillFields(importParameters, escapedSectionId, formFields.properties, configPart, factory, pageKeys, flexChanges);
            }
            if (Object.keys(configPart[escapedSectionId]['form']).length === 0) {
                delete configPart[escapedSectionId]['form'];
            }
            if (Object.keys(configPart[escapedSectionId]).length === 0) {
                delete configPart[escapedSectionId];
            }
        }
        else if ((schemaSection['properties'] && schemaSection['properties']['subsections']) ||
            (schemaSection['$ref'] &&
                (getSectionType(schemaSection) === types_1.SectionTypeV2.Section ||
                    getSectionType(schemaSection) === types_1.SectionTypeV2.SubSection))) {
            // Section with subsections
            const sectionType = getSectionType(schemaSection);
            schemaSection = importParameters.jsonSchema['definitions'][`${sectionType}<${sectionId}>`];
            const sectionTitle = common_1.getSectionTitle(schemaSection, importParameters.jsonSchema);
            configPart[escapedSectionId] = factory.createInstance(common_2.PageType.ObjectPage, sectionType, {
                subsections: {}
            });
            if (flexChanges) {
                transferSettingsAndFlexChanges(importParameters, configPart[escapedSectionId], schemaSection, pageKeys, flexChanges, undefined, sectionTitle);
            }
            let currentSchemaSection;
            if ((_b = (_a = schemaSection['properties']) === null || _a === void 0 ? void 0 : _a['subsections']) === null || _b === void 0 ? void 0 : _b['properties']) {
                currentSchemaSection = schemaSection['properties']['subsections']['properties'];
            }
            else {
                currentSchemaSection = schemaSection['properties'];
            }
            fillSectionsInConfig(importParameters, currentSchemaSection, manifestSettings, configPart[escapedSectionId]['subsections'], factory, pageKeys, flexChanges, v2Page, objectPageConfig);
        }
    }
}
/**
 * Fill properties of object page confg based on manifest settings
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChangesForTransfer - list of flex changes (pre-processed by prepareFlexChanges)
 * @param v2Page - page definition in manifest.json
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @returns {ObjectPageConfig} - the object page configuration (JSON)
 */
function fillConfig(importParameters, pageKeys, flexChangesForTransfer, v2Page, factory) {
    const objectPageConfig = factory.createPageInstance(common_2.PageType.ObjectPage);
    const manifestSettings = v2Page.component.settings;
    // Transfer page information
    transferSettingsAndFlexChanges(importParameters, objectPageConfig, importParameters.jsonSchema['properties'], pageKeys, flexChangesForTransfer);
    // Transfer header information
    objectPageConfig.header = factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageHeader');
    transferSettingsAndFlexChanges(importParameters, objectPageConfig.header, importParameters.jsonSchema['definitions']['ObjectPageHeader']
        ? importParameters.jsonSchema['definitions']['ObjectPageHeader']
        : importParameters.jsonSchema['definitions']['ObjectPageHeader<GenericActions>'], pageKeys, flexChangesForTransfer);
    const headerAction = importParameters.jsonSchema['definitions']['HeaderActions'];
    if (headerAction) {
        fillActions(importParameters, headerAction.properties, objectPageConfig.header, factory, pageKeys, flexChangesForTransfer);
    }
    // Transfer Layout information
    objectPageConfig.layout = factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageLayout');
    transferSettingsAndFlexChanges(importParameters, objectPageConfig.layout, importParameters.jsonSchema['definitions']['ObjectPageLayout'], pageKeys, flexChangesForTransfer);
    if (Object.keys(objectPageConfig.layout).length === 0) {
        delete objectPageConfig.layout;
    }
    // Fill sections and subsections
    objectPageConfig.sections = {};
    const sections = importParameters.jsonSchema['definitions']['Sections'];
    if (sections) {
        fillSectionsInConfig(importParameters, sections.properties, manifestSettings, objectPageConfig.sections, factory, pageKeys, flexChangesForTransfer, v2Page, objectPageConfig);
    }
    // Find custom sections
    const customSections = utils_1.findCustomSectionExtensions(importParameters.manifest, importParameters.entitySet);
    if (Object.keys(customSections).length > 0) {
        objectPageConfig.sections.custom = [];
        for (const sectionId in customSections) {
            const customSection = 'fragmentName' in customSections[sectionId]
                ? factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageCustomSectionFragment')
                : factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageCustomSectionView');
            transferSettingsAndFlexChanges(importParameters, customSection, importParameters.jsonSchema['definitions']['fragmentName' in customSections[sectionId]
                ? 'ObjectPageCustomSectionFragment'
                : 'ObjectPageCustomSectionView'], pageKeys, flexChangesForTransfer, sectionId);
            objectPageConfig.sections.custom.push(customSection);
        }
    }
    return objectPageConfig;
}
/**
 * Creates the configuration (file content) for a V2 object page
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 *
 * @returns {ObjectPageConfig} - the object page configuration (JSON)
 */
function createObjectPageConfigV2(importParameters) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.manifest[common_2.ManifestSection.generic]) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOFE'),
            location: {
                path: v2_1.MANIFESTPATH,
                range: [common_2.ManifestSection.generic]
            }
        });
        return;
    }
    const pageKeys = [];
    const v2Pages = importParameters.manifest[common_2.ManifestSection.generic].pages;
    if (!v2Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOPAGES', { appId: importParameters.manifest['sap.app']['id'] }),
            location: {
                path: v2_1.MANIFESTPATH,
                range: [common_2.ManifestSection.generic]
            }
        });
        return;
    }
    const entitySet = importParameters.entitySet;
    const v2Page = utils_1.findObjectPageV2(v2Pages, importParameters.entitySet, pageKeys);
    if (!v2Page) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYSET', { entitySet }),
            location: {
                path: v2_1.MANIFESTPATH,
                range: [common_2.ManifestSection.generic]
            }
        });
        return;
    }
    const flexChangesForTransfer = prepareFlexChanges(importParameters.flex, entitySet);
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Fill config.json with manifest settings and flex changes
    return fillConfig(importParameters, pageKeys, flexChangesForTransfer, v2Page, factory);
}
exports.createObjectPageConfigV2 = createObjectPageConfigV2;
//# sourceMappingURL=objectPage.js.map