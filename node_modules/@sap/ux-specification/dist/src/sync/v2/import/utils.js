"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("../../../specification/v2");
const common_1 = require("../../../specification/common");
const manifest_1 = require("../export/manifest");
const common_2 = require("../../common");
const utils_1 = require("../generate/utils");
/**
 * Determines a V2 object page in the manifest, based on the given entity set
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param entitySet - current entityset
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findObjectPageV2(v2Pages, entitySet, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        if (common_2.getPageTypeV2(v2Page.component.name) === common_1.PageType.ObjectPage && v2Page.entitySet === entitySet) {
            pageKeys.push(key);
            return v2Page;
        }
        else if (v2Page.pages) {
            pageKeys.push(key);
            return findObjectPageV2(v2Page.pages, entitySet, pageKeys);
        }
    }
}
exports.findObjectPageV2 = findObjectPageV2;
/**
 * Determines a V2 list report page in the manifest
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findListReportPageV2(v2Pages, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (common_2.getPageTypeV2(v2Page.component.name) === common_1.PageType.ListReport) {
            return v2Page;
        }
    }
}
exports.findListReportPageV2 = findListReportPageV2;
/**
 * Determines a V2 analytical list page in the manifest
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findAnalyticalListPage(v2Pages, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (common_2.getPageTypeV2(v2Page.component.name) === common_1.PageType.AnalyticalListPage) {
            return v2Page;
        }
    }
}
exports.findAnalyticalListPage = findAnalyticalListPage;
/**
 * Method checks if passed extension key is associated to custom section with passed entity.
 * @param {string} extensionKey - Extension key.
 * @param {string} entity - Entity to check in extension.
 * @returns {boolean} Is extension key relates to custom section and associated to passed entity.
 */
function isAssociatedCustomSection(extensionKey, entity) {
    const keyParts = extensionKey.split('|');
    return v2_1.SectionPosition[keyParts[0]] && keyParts[1] === entity;
}
exports.isAssociatedCustomSection = isAssociatedCustomSection;
/**
 * Method which finds custom section extensions in manifest for passed entitySet
 * @param manifest - manifest.
 * @param entitySet - Entity set to lookup while searching custom section extensions.
 * @returns {object} Found object with custom sections
 */
function findCustomSectionExtensions(manifest, entitySet) {
    const customSectionViews = manifest_1.getManifestSectionByPathV2(manifest, `sap.ui5/extends/extensions/${v2_1.SAPUI5_VIEW_EXTENSION}/${v2_1.SAPUI5_VIEW_EXTENSION_OBJECT_PAGE}`);
    const pageCustomSections = {};
    for (const key in customSectionViews) {
        if (isAssociatedCustomSection(key, entitySet)) {
            pageCustomSections[key] = customSectionViews[key];
        }
    }
    return pageCustomSections;
}
exports.findCustomSectionExtensions = findCustomSectionExtensions;
/**
 * Method returns target by resolving custom column reference name.
 * For example - 'TableCustomColumns<dummyTarget>' is resolved as 'dummyTarget'.
 * @param {string} ref Reference key.
 * @returns {string | undefined} Resolved target.
 */
function getTargetFromCustomColumnRef(ref) {
    const refParts = ref.split(`${utils_1.CUSTOM_COLUMNS_DEFINITION}<`);
    if (refParts[1]) {
        return refParts[1].slice(0, -1);
    }
    return undefined;
}
exports.getTargetFromCustomColumnRef = getTargetFromCustomColumnRef;
//# sourceMappingURL=utils.js.map