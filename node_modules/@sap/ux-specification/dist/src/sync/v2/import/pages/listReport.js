"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../common/index");
const common_1 = require("../../../../specification/common");
const common_2 = require("../../../common");
const extensionLogger_1 = require("../../../../extensionLogger");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../../i18n/i18n");
const utils_1 = require("../../import/utils");
const xml_js_1 = require("xml-js");
const controls_1 = require("../../export/controls");
const factory_1 = require("../../export/factory");
const types_1 = require("../../types");
/**
 * Adds manifest settings to the config.json of List Report V2
 * @param {ListReportConfig} listReportConfig - the configuration to be filled
 * @param {Manifest} manifest - manifest.json of the app
 * @param {object} jsonSchema - the app-specific schema
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {string} pageKey - key of the page in manifest
 * @param {ExtensionLogger} logger - instance for logging exceptions
 */
function addSettings(importParameters, listReportConfig, factory, pageKey) {
    const tableType = index_1.determineTableType(importParameters.manifest, pageKey);
    listReportConfig.table = factory.createInstance(common_1.PageType.ListReport, tableType, listReportConfig.table);
    let localJsonSchema;
    if (tableType === 'TreeTable' || tableType === 'AnalyticalTable' || tableType === 'GridTable') {
        localJsonSchema = importParameters.jsonSchema['definitions'][tableType + '<LineItems>'];
    }
    else {
        if (importParameters.jsonSchema['definitions'][types_1.MULTISELECTTABLE] &&
            importParameters.jsonSchema['definitions'][types_1.INLINEDELETETABLE]) {
            localJsonSchema = JSON.parse(JSON.stringify(importParameters.jsonSchema['definitions'][types_1.MULTISELECTTABLE]));
            localJsonSchema['properties'] = Object.assign(Object.assign({}, localJsonSchema['properties']), importParameters.jsonSchema['definitions'][types_1.INLINEDELETETABLE]['properties']);
        }
    }
    index_1.transferSettingsOfObject(listReportConfig.table, importParameters.manifest, localJsonSchema, pageKey, importParameters.logger);
    //Filterbar:
    listReportConfig.filterBar = factory.createInstance(common_1.PageType.ListReport, 'ListReportFilterBar', listReportConfig.filterBar);
    index_1.transferSettingsOfObject(listReportConfig.filterBar, importParameters.manifest, importParameters.jsonSchema['definitions']['ListReportFilterBar'], pageKey, importParameters.logger);
}
function evaluateFragmentColumn(column, viewExtensionsOfPage, manifestKey, keyPart3, config, extensionType, cellsFragmentName) {
    if (column['customData'] || column['table:customData']) {
        const p13nData = column['customData']
            ? column['customData']['core:CustomData']._attributes.value
            : column['table:customData']['core:CustomData']._attributes.value;
        const columnParts = JSON.parse(p13nData.substr(1, p13nData.length));
        let columnText = column['Text'] && column['Text']._attributes && column['Text']._attributes['text'];
        if (!columnText) {
            columnText = column['Label'] && column['Label']._attributes && column['Label']._attributes['text'];
        }
        const customElement = {
            id: column._attributes && column._attributes['id'],
            text: columnText,
            columnKey: columnParts['columnKey'],
            columnIndex: columnParts['columnIndex'] !== undefined ? Number(columnParts['columnIndex']) : undefined,
            leadingProperty: columnParts['leadingProperty'],
            className: viewExtensionsOfPage[manifestKey].className,
            fragmentName: viewExtensionsOfPage[manifestKey].fragmentName,
            tabKey: keyPart3,
            extensionType
        };
        if (cellsFragmentName) {
            customElement.cellsFragmentName = cellsFragmentName;
        }
        if (!config.table['columns']['custom']) {
            config.table['columns']['custom'] = [];
        }
        const customColumns = config.table['columns']['custom'];
        customColumns.push(customElement);
    }
}
function addFragments(config, manifest, v2Page, pageType, fragments, objectPageSectionData) {
    if (!fragments) {
        return;
    }
    const targetKeyEntitySet = '|' + (objectPageSectionData && objectPageSectionData.target ? objectPageSectionData.target : v2Page.entitySet);
    if (manifest[common_1.ManifestSection.ui5] &&
        manifest[common_1.ManifestSection.ui5]['extends'] &&
        manifest[common_1.ManifestSection.ui5]['extends']['extensions'] &&
        manifest[common_1.ManifestSection.ui5]['extends']['extensions']['sap.ui.viewExtensions']) {
        const viewExtension = common_1.PAGETYPE_VIEW_EXTENSION_TEMPLATE_MAP.get(pageType);
        const viewExtensionsOfPage = manifest[common_1.ManifestSection.ui5]['extends']['extensions']['sap.ui.viewExtensions'][viewExtension];
        if (viewExtensionsOfPage) {
            for (const manifestKey of Object.keys(viewExtensionsOfPage)) {
                const manifestKeyParts = manifestKey.split('|');
                const [keyExtensionType, keyEntitySet] = manifestKeyParts;
                // If Object Page section have key, then Ignore it as it is not from QuickVariantSelectionX
                const referenceId = manifestKeyParts[2];
                const keyTab = objectPageSectionData && referenceId === objectPageSectionData.key ? undefined : referenceId;
                const extensionType = common_2.ViewTemplateType[keyExtensionType];
                if (extensionType && '|' + keyEntitySet === targetKeyEntitySet) {
                    const fragmentType = viewExtensionsOfPage[manifestKey].type
                        ? viewExtensionsOfPage[manifestKey].type.toLowerCase()
                        : 'xml';
                    let fragmentName = viewExtensionsOfPage[manifestKey].fragmentName;
                    if (!fragmentName) {
                        continue;
                    }
                    // Responsive Table ==> check cells' fragment name
                    let cellsFragmentName;
                    if (extensionType === common_2.ViewTemplateType.ResponsiveTableColumnsExtension) {
                        for (const cellsKey of Object.keys(viewExtensionsOfPage)) {
                            const [cellsKeyType, cellsKeyEntitySet, cellsKeyTab] = cellsKey.split('|');
                            if (cellsKeyType === common_2.ViewTemplateType.ResponsiveTableCellsExtension &&
                                cellsKeyEntitySet === keyEntitySet &&
                                cellsKeyTab === referenceId) {
                                cellsFragmentName = viewExtensionsOfPage[cellsKey].fragmentName;
                            }
                        }
                    }
                    // Retrieve information from fragment
                    const fragmentParts = fragmentName.split('.');
                    fragmentName = fragmentParts[fragmentParts.length - 1] + common_2.FRAGMENTNAMEPART + fragmentType;
                    const filteredFragments = fragments.filter((fragment) => fragment['dataSourceUri'].endsWith(fragmentName));
                    if (filteredFragments[0]) {
                        const fragmentJson = JSON.parse(xml_js_1.xml2json(filteredFragments[0].fileContent, { compact: true }));
                        const fragmentDefintion = fragmentJson[controls_1.FRAGMENT_DEFINITION];
                        const columnDefinition = controls_1.getRootCustomColumnFromFragmentJSON(fragmentDefintion);
                        if (columnDefinition) {
                            if (!config.table['columns']) {
                                config.table['columns'] = {};
                            }
                            if (Array.isArray(columnDefinition)) {
                                for (let j = 0; j < columnDefinition.length; j++) {
                                    evaluateFragmentColumn(columnDefinition[j], viewExtensionsOfPage, manifestKey, keyTab, config, extensionType, cellsFragmentName);
                                }
                            }
                            else {
                                evaluateFragmentColumn(columnDefinition, viewExtensionsOfPage, manifestKey, keyTab, config, extensionType, cellsFragmentName);
                            }
                        }
                    }
                }
            }
        }
    }
}
exports.addFragments = addFragments;
/**
 * Creates the configuration file content for a list report V2
 * @param {ImportListReportV2Parameters} importParameters  - object comprising all input data
 *
 * @returns {ListReportConfig} - the configuration (JSON) for the list report
 */
function createListReportConfig(importParameters) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.manifest[common_1.ManifestSection.generic]) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOFE'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [common_1.ManifestSection.generic]
            }
        });
        return;
    }
    const v2Pages = importParameters.manifest[common_1.ManifestSection.generic].pages;
    if (!v2Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOPAGES', { appId: importParameters.manifest['sap.app']['id'] }),
            location: {
                path: common_2.MANIFESTPATH,
                range: [common_1.ManifestSection.generic]
            }
        });
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Instantiate Page
    const config = factory.createPageInstance(common_1.PageType.ListReport);
    const pageKeys = [];
    const v2Page = utils_1.findListReportPageV2(importParameters.manifest[common_1.ManifestSection.generic].pages, pageKeys);
    if (!v2Page) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOLR'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [common_1.ManifestSection.generic]
            }
        });
        return;
    }
    //Add manifest settings to config
    addSettings(importParameters, config, factory, pageKeys[0]);
    // Add flex changes to config
    importParameters.flex.forEach((change) => {
        if (common_2.parseChangeString(change)) {
            index_1.addFlex(config, change, importParameters.jsonSchema, importParameters.logger);
        }
    });
    addFragments(config, importParameters.manifest, v2Page, common_1.PageType.ListReport, importParameters.fragments);
    return config;
}
exports.createListReportConfig = createListReportConfig;
//# sourceMappingURL=listReport.js.map