"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../../specification/common");
const v4_1 = require("../../../../specification/v4");
const common_2 = require("../../../common");
const listReport_1 = require("./listReport");
const extensionLogger_1 = require("../../../../extensionLogger");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../../i18n/i18n");
const factory_1 = require("../../export/factory");
/**
 * Creates the configuration file content for an analytical list page V4
 * @param {object} manifest - manifest.json of the given application
 * @param jsonSchema - the application specific JSON schema
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns {AnalyticalListPageConfig} - the configuration (JSON)
 */
function createAnalyticalListPageConfig(importParameters) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.manifest[v4_1.ManifestSection.ui5] || !importParameters.manifest[v4_1.ManifestSection.ui5]['routing']) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTING'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [v4_1.ManifestSection.ui5]
            }
        });
        return;
    }
    const v4Pages = importParameters.manifest[v4_1.ManifestSection.ui5]['routing']['targets'];
    if (!v4Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOTARGETS'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [v4_1.ManifestSection.ui5, 'routing']
            }
        });
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV4();
    //Instantiate Page
    const config = factory.createPageInstance(common_1.PageTypeV4.AnalyticalListPage);
    Object.keys(v4Pages).forEach((key) => {
        const v4Page = v4Pages[key];
        if ('name' in v4Page && common_2.getPageTypeV4(v4Page.name) === common_1.PageTypeV4.AnalyticalListPage) {
            listReport_1.addSettings(importParameters, config, factory, v4Page, common_1.PageTypeV4.AnalyticalListPage);
            return;
        }
    });
    return config;
}
exports.createAnalyticalListPageConfig = createAnalyticalListPageConfig;
//# sourceMappingURL=analyticalListPage.js.map