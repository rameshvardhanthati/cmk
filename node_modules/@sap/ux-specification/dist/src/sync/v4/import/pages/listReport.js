"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../../specification/common");
const v4_1 = require("../../../../specification/v4");
const common_2 = require("../../../common");
const utils_1 = require("../utils");
const i18n_1 = require("../../../../i18n/i18n");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../../extensionLogger");
const factory_1 = require("../../export/factory");
/**
 * Adds manifest settings to the config.json of LR or ALP V4
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {Manifest} manifest - manifest.json of the app
 * @param {object} jsonSchema - the app-specific schema
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {SapUiAppPageV4} page - page in manifest
 * @param {PageTypeV4} pageType - page type
 * @param {ExtensionLogger} logger - instance for logging exceptions
 */
function addSettings(importParameters, config, factory, page, pageType) {
    // Tranfer page level settings with sync rules
    utils_1.transferSettingsOfObject(config, importParameters.manifest, importParameters.jsonSchema, page.id, []);
    // Check table settings from target structure
    config.table = factory.createInstance(pageType, 'Table');
    utils_1.transferSettingsOfObject(config.table, importParameters.manifest, importParameters.jsonSchema['definitions']['Table'], page.id, []);
    config.table.toolBar = factory.createInstance(pageType, 'ToolBar', { actions: {} });
    utils_1.transferSettingsOfObject(config.table.toolBar, importParameters.manifest, importParameters.jsonSchema['definitions'][common_2.TOOLBAR], page.id, []);
    if (importParameters.jsonSchema['definitions']['Actions<LineItems>']) {
        for (const actionKey in importParameters.jsonSchema['definitions']['Actions<LineItems>'].properties) {
            config.table.toolBar.actions[actionKey] = factory.createInstance(pageType, 'ToolBarAction');
            const action = actionKey.split('DataFieldForAction::')[1];
            utils_1.transferSettingsOfObject(config.table.toolBar.actions[actionKey], importParameters.manifest, importParameters.jsonSchema['definitions'][`ToolBarAction<${action}>`], page.id, [actionKey]);
            if (Object.keys(config.table.toolBar.actions[actionKey]).length === 0) {
                delete config.table.toolBar.actions[actionKey];
            }
        }
    }
    //Filterbar:
    config.filterBar = factory.createInstance(pageType, 'FilterBar');
    utils_1.transferSettingsOfObject(config.filterBar, importParameters.manifest, importParameters.jsonSchema['definitions']['FilterBar'], page.id, []);
    //transfer columns
    config.table.columns = {};
    if (importParameters.jsonSchema['definitions']['LineItems']) {
        for (const columnKey in importParameters.jsonSchema['definitions']['LineItems'].properties) {
            const column = importParameters.jsonSchema['definitions']['LineItems'].properties[columnKey];
            if (!column.template) {
                config.table.columns[columnKey] = factory.createInstance(pageType, 'TableColumn');
                utils_1.transferSettingsOfObject(config.table.columns[columnKey], importParameters.manifest, importParameters.jsonSchema['definitions']['TableColumn'], page.id, [columnKey]);
                if (Object.keys(config.table.columns[columnKey]).length === 0) {
                    delete config.table.columns[columnKey];
                }
            }
        }
    }
    else {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOLINEITEMS')
        });
        return;
    }
    return config;
}
exports.addSettings = addSettings;
/**
 * Creates the configuration file content for a list report V4
 * @param {ImportListReportV4Parameters} importParameters  - object comprising all input data
 *
 * @returns {ListReportConfig} - the configuration (JSON) for the list report
 */
function createListReportConfig(importParameters) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.manifest[v4_1.ManifestSection.ui5] || !importParameters.manifest[v4_1.ManifestSection.ui5]['routing']) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTING'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [v4_1.ManifestSection.ui5]
            }
        });
        return;
    }
    const v4Pages = importParameters.manifest[v4_1.ManifestSection.ui5]['routing']['targets'];
    if (!v4Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOTARGETS'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [v4_1.ManifestSection.ui5]
            }
        });
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV4();
    //Instantiate Page
    const config = factory.createPageInstance(common_1.PageTypeV4.ListReport);
    Object.keys(v4Pages).forEach((key) => {
        const v4Page = v4Pages[key];
        if ('name' in v4Page && common_2.getPageTypeV4(v4Page.name) === common_1.PageTypeV4.ListReport) {
            addSettings(importParameters, config, factory, v4Page, common_1.PageTypeV4.ListReport);
            return;
        }
    });
    return config;
}
exports.createListReportConfig = createListReportConfig;
//# sourceMappingURL=listReport.js.map