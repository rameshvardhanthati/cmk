"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const decorators_1 = require("../../common/decoration/decorators");
const common_2 = require("../../common");
/**
 * Transfers settings from manifest to object page config
 * @param configPart - part of the configuration to be filled
 * @param manifest - manifest.json of the app
 * @param appSchema - app specific schema
 * @param pageID - ID of the given object page
 * @param sectionId (optional) - ID of the given section (optional)
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
function transferSettingsOfObject(configPart, manifest, appSchema, pageKey, breadcrumbs, sectionId, logger) {
    if (!appSchema) {
        return;
    }
    let manifestSection = {};
    const deprecatedProperties = configPart.getDeprecated ? configPart.getDeprecated() : [];
    const targetAnnotationEncoded = sectionId && sectionId.replace('/', '::');
    for (const propertyKey in appSchema['properties']) {
        const syncRule = decorators_1.getReflectMetadata(configPart, propertyKey);
        if (syncRule === null || syncRule === void 0 ? void 0 : syncRule.manifest) {
            const path = syncRule.manifest.path([pageKey], manifest, targetAnnotationEncoded, breadcrumbs[0]);
            manifestSection = common_2.getManifestSectionByPathV4(manifest, path, sectionId, targetAnnotationEncoded);
            common_1.importProperty(syncRule, manifestSection, propertyKey, configPart, sectionId);
            common_2.checkDeprecatedProperties(deprecatedProperties, manifestSection, path, logger);
        }
    }
}
exports.transferSettingsOfObject = transferSettingsOfObject;
//# sourceMappingURL=utils.js.map