"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../common");
const decorators_1 = require("../../../common/decoration/decorators");
const application_1 = require("../../application");
function exportCreationModeName(manifestSection, configObject, key, manifestKey) {
    if (typeof manifestSection['creationMode'] === 'object') {
        manifestSection['creationMode'][manifestKey] = configObject[key];
    }
    else if (typeof manifestSection['creationMode'] === 'string') {
        manifestSection['creationMode'] = configObject[key];
    }
}
exports.exportCreationModeName = exportCreationModeName;
function exportPersonalizationProperty(manifestSection, configObject, key, manifestKey) {
    if (typeof manifestSection['personalization'] === 'boolean' || !manifestSection['personalization']) {
        manifestSection['personalization'] = {};
    }
    manifestSection['personalization'][manifestKey] = configObject[key];
}
exports.exportPersonalizationProperty = exportPersonalizationProperty;
function deleteCreationModeName(manifestSection, manifestKey) {
    if (typeof manifestSection['creationMode'] === 'object' &&
        manifestSection['creationMode'][manifestKey] !== undefined) {
        delete manifestSection['creationMode'][manifestKey];
    }
    else if (typeof manifestSection['creationMode'] === 'string' && manifestSection['creationMode'] !== undefined) {
        delete manifestSection['creationMode'];
    }
}
exports.deleteCreationModeName = deleteCreationModeName;
function deletePersonalizationProperty(manifestSection, manifestKey) {
    if (typeof manifestSection['personalization'] === 'object' &&
        manifestSection['personalization'][manifestKey] !== undefined) {
        delete manifestSection['personalization'][manifestKey];
    }
    else if (typeof manifestSection['personalization'] === 'string' &&
        manifestSection['personalization'] !== undefined) {
        delete manifestSection['personalization'];
    }
}
exports.deletePersonalizationProperty = deletePersonalizationProperty;
function exportCreationModeCreateAtEnd(manifestSection, configObject, key, manifestKey) {
    if (typeof manifestSection['creationMode'] === 'object') {
        manifestSection['creationMode'][manifestKey] = configObject[key];
    }
    else if (typeof manifestSection['creationMode'] === 'string') {
        // If createionAtEnd property is defined in config, then we have to convert manifest property creationMode to an object
        manifestSection['creationMode'] = {
            name: configObject['name'],
            [manifestKey]: configObject[key]
        };
    }
}
exports.exportCreationModeCreateAtEnd = exportCreationModeCreateAtEnd;
function deleteCreationModeCreateAtEnd(manifestSection, manifestKey) {
    if (typeof manifestSection['creationMode'] === 'object' &&
        manifestSection['creationMode'][manifestKey] !== undefined) {
        delete manifestSection['creationMode'][manifestKey];
    }
}
exports.deleteCreationModeCreateAtEnd = deleteCreationModeCreateAtEnd;
class TableCreationMode {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet),
            export: (manifestSection, configObject, key, manifestKey) => {
                exportCreationModeName(manifestSection, configObject, key, manifestKey);
            },
            delete: (manifestSection, configObject, key, manifestKey) => {
                deleteCreationModeName(manifestSection, manifestKey);
            }
        }
    })
], TableCreationMode.prototype, "name", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet),
            export: (manifestSection, configObject, key, manifestKey) => {
                exportCreationModeCreateAtEnd(manifestSection, configObject, key, manifestKey);
            },
            delete: (manifestSection, configObject, key, manifestKey) => {
                deleteCreationModeCreateAtEnd(manifestSection, manifestKey);
            }
        }
    })
], TableCreationMode.prototype, "createAtEnd", void 0);
exports.TableCreationMode = TableCreationMode;
class PersonalizationType {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet),
            export: (manifestSection, configObject, key, manifestKey) => {
                exportPersonalizationProperty(manifestSection, configObject, key, manifestKey);
            },
            delete: (manifestSection, configObject, key, manifestKey) => {
                deletePersonalizationProperty(manifestSection, manifestKey);
            }
        }
    })
], PersonalizationType.prototype, "column", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet),
            export: (manifestSection, configObject, key, manifestKey) => {
                exportPersonalizationProperty(manifestSection, configObject, key, manifestKey);
            },
            delete: (manifestSection, configObject, key, manifestKey) => {
                deletePersonalizationProperty(manifestSection, manifestKey);
            }
        }
    })
], PersonalizationType.prototype, "sort", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet),
            export: (manifestSection, configObject, key, manifestKey) => {
                exportPersonalizationProperty(manifestSection, configObject, key, manifestKey);
            },
            delete: (manifestSection, configObject, key, manifestKey) => {
                deletePersonalizationProperty(manifestSection, manifestKey);
            }
        }
    })
], PersonalizationType.prototype, "filter", void 0);
exports.PersonalizationType = PersonalizationType;
class QuickVariantSelectionV4 {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet) + common_1.QUICKVARPATH
        }
    })
], QuickVariantSelectionV4.prototype, "paths", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet) + common_1.QUICKVARPATH
        }
    })
], QuickVariantSelectionV4.prototype, "hideTableTitle", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet) + common_1.QUICKVARPATH
        }
    })
], QuickVariantSelectionV4.prototype, "showCounts", void 0);
exports.QuickVariantSelectionV4 = QuickVariantSelectionV4;
class MultiTableModeV4 {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getSettingsPathForPage(entitySet) + '/views'
        }
    })
], MultiTableModeV4.prototype, "paths", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getSettingsPathForPage(entitySet) + '/views'
        }
    })
], MultiTableModeV4.prototype, "showCounts", void 0);
exports.MultiTableModeV4 = MultiTableModeV4;
class Table {
}
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "type", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet),
            import: (tableSettings) => {
                const value = tableSettings['creationMode'];
                if (typeof value === 'object') {
                    return value;
                }
                else if (typeof value === 'string') {
                    return {
                        name: value
                    };
                }
            }
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "creationMode", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet),
            import: (tableSettings) => {
                const value = tableSettings['personalization'];
                if (typeof value === 'object') {
                    return value;
                }
                else if (typeof value === 'boolean') {
                    return {
                        column: value,
                        sort: value,
                        filter: value
                    };
                }
            }
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "personalization", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "selectionMode", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "selectAll", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "selectionLimit", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "enableExport", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "condensedTableLayout", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getTableSettingsPathForLR(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "quickVariantSelection", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getSettingsPathForPage(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "views", void 0);
__decorate([
    decorators_1.syncRule({
        manifest: {
            path: (entitySet) => application_1.getSettingsPathForPage(entitySet)
        }
    }),
    decorators_1.validity({
        since: '1.84.0'
    })
], Table.prototype, "initialLoad", void 0);
exports.Table = Table;
//# sourceMappingURL=Table.js.map