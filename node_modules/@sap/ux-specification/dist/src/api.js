"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This file implements the interface 'Specification' from ./types and serves as API to specification
 */
const page_1 = require("./specification/common/page");
const schemaAccess_1 = require("./specification/schemaAccess");
const apiTypes_1 = require("./apiTypes");
const generate_1 = require("./sync/v2/generate");
const generate_2 = require("./sync/v4/generate");
const exportPage_1 = require("./sync/v2/export/exportPage");
const import_1 = require("./sync/v2/import");
const export_1 = require("./sync/v4/export/export");
const import_2 = require("./sync/v4/import");
const common_1 = require("./sync/common");
/**
 * Return the generic (project independent) JSON schema
 * @param specification - reference to spec
 * @param version - Fiori elements version (v2 or v4)
 * @param schemaType - type of the schema, e.g. ListReport, ObjectPage
 */
var schemaAccess_2 = require("./specification/schemaAccess");
exports.getGenericSchema = schemaAccess_2.getGenericSchema;
/**
 * Generate JSON schema for a given Fiori elements version and page type
 * @param generateParameters: the input structure that contains the version, schema type, and parameters
 */
function generateSchema(generateParameters) {
    let schema;
    if (generateParameters[page_1.FioriElementsVersion.v2]) {
        /**
         * Handle v2 schema generation
         */
        const v2Params = generateParameters[page_1.FioriElementsVersion.v2];
        if (v2Params[schemaAccess_1.SchemaType.ListReport]) {
            const { genericSchema, entitySet, annotations, manifest, fragments, logger } = v2Params[schemaAccess_1.SchemaType.ListReport];
            schema = generate_1.generateListReportInterfaceV2(genericSchema, entitySet, annotations, manifest, fragments, logger);
        }
        else if (v2Params[schemaAccess_1.SchemaType.ObjectPage]) {
            const { genericSchema, entitySet, annotations, manifest, fragments, logger } = v2Params[schemaAccess_1.SchemaType.ObjectPage];
            schema = generate_1.generateObjectPageInterfaceV2(genericSchema, entitySet, annotations, manifest, fragments, logger);
        }
        else if (v2Params[schemaAccess_1.SchemaType.OverviewPage]) {
            const { genericSchema, manifest } = v2Params[schemaAccess_1.SchemaType.OverviewPage];
            schema = generate_1.generateOVPInterfaceV2(genericSchema, manifest);
        }
        else if (v2Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            const { genericSchema, entitySet, annotations, manifest, fragments, logger } = v2Params[schemaAccess_1.SchemaType.AnalyticalListPage];
            schema = generate_1.generateAnalyticalListPageInterfaceV2(genericSchema, entitySet, annotations, manifest, fragments, logger);
        }
    }
    else if (generateParameters[page_1.FioriElementsVersion.v4]) {
        /**
         * Handle v4 schema generation
         */
        const v4Params = generateParameters[page_1.FioriElementsVersion.v4];
        if (v4Params[schemaAccess_1.SchemaType.ListReport]) {
            const { genericSchema, entitySet, annotations, logger } = v4Params[schemaAccess_1.SchemaType.ListReport];
            schema = generate_2.generateListReportInterfaceV4(genericSchema, entitySet, annotations, logger);
        }
        else if (v4Params[schemaAccess_1.SchemaType.ObjectPage]) {
            const { genericSchema, entitySet, annotations, manifest, logger } = v4Params[schemaAccess_1.SchemaType.ObjectPage];
            schema = generate_2.generateObjectPageInterfaceV4(genericSchema, entitySet, annotations, manifest, logger);
        }
        else if (v4Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            const { genericSchema, entitySet, annotations, logger } = v4Params[schemaAccess_1.SchemaType.AnalyticalListPage];
            //As of now, the LR logic can also be applied to ALP
            schema = generate_2.generateListReportInterfaceV4(genericSchema, entitySet, annotations, logger);
        }
    }
    return schema;
}
exports.generateSchema = generateSchema;
/**
 * Exports a config (src/*.json, src/pages/*.json) to flex changes and manifest settings
 * @param exportParameters - parameters to control the export
 */
function exportConfig(exportParameters) {
    let exportResults;
    const ui5Config = { ui5Version: exportParameters.ui5Version, layer: exportParameters.layer };
    if (exportParameters[page_1.FioriElementsVersion.v2]) {
        /**
         * Handle v2 export
         */
        const v2Params = exportParameters[page_1.FioriElementsVersion.v2];
        exportResults = exportPage_1.exportPageV2(v2Params, ui5Config);
    }
    else if (exportParameters[page_1.FioriElementsVersion.v4]) {
        /**
         * Handle v4 export
         */
        const v4Params = exportParameters[page_1.FioriElementsVersion.v4];
        exportResults = export_1.exportPageV4(v4Params, ui5Config);
    }
    return exportResults;
}
exports.exportConfig = exportConfig;
/**
 * Imports manifest settings and flex changes to a config (src/*.json, src/pages/*.json)
 * @param importParameters - parameters to control the import
 */
function importConfig(importParameters) {
    let schema;
    if (importParameters[page_1.FioriElementsVersion.v2]) {
        /**
         * Handle v2 import
         */
        const v2Params = importParameters[page_1.FioriElementsVersion.v2];
        if (v2Params[schemaAccess_1.SchemaType.ListReport]) {
            schema = import_1.createListReportConfig(v2Params[schemaAccess_1.SchemaType.ListReport]);
        }
        else if (v2Params[schemaAccess_1.SchemaType.ObjectPage]) {
            schema = import_1.createObjectPageConfigV2(v2Params[schemaAccess_1.SchemaType.ObjectPage]);
        }
        else if (v2Params[schemaAccess_1.SchemaType.OverviewPage]) {
            schema = import_1.createOverviewPageConfig(v2Params[schemaAccess_1.SchemaType.OverviewPage]);
        }
        else if (v2Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            schema = import_1.createAnalyticalListPageConfig(v2Params[schemaAccess_1.SchemaType.AnalyticalListPage]);
        }
    }
    else if (importParameters[page_1.FioriElementsVersion.v4]) {
        /**
         * Handle v4 import
         */
        const v4Params = importParameters[page_1.FioriElementsVersion.v4];
        if (v4Params[schemaAccess_1.SchemaType.ListReport]) {
            schema = import_2.createListReportConfig(v4Params[schemaAccess_1.SchemaType.ListReport]);
        }
        else if (v4Params[schemaAccess_1.SchemaType.ObjectPage]) {
            schema = import_2.createObjectPageConfigV4(v4Params[schemaAccess_1.SchemaType.ObjectPage]);
        }
        else if (v4Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            schema = import_2.createAnalyticalListPageConfig(v4Params[schemaAccess_1.SchemaType.AnalyticalListPage]);
        }
    }
    return schema;
}
exports.importConfig = importConfig;
/**
 * Evaluates all project files and generates app schemas and configs out of it
 * @param importParameters - parameters to control the import; here: all relevant project files
 * @returns a list of files, comprising app schemas and configs
 */
async function importProject(importParameters) {
    return await common_1.importProjectSchemaAndConfig(importParameters);
}
exports.importProject = importProject;
/**
 * Evaluates all project files and generates app schemas out of it, but no configs
 * @param importParameters - parameters to control the import; here: all relevant project files
 * @returns a list of files, comprising all app schemas
 */
async function importProjectSchema(importParameters) {
    return await common_1.importProjectSchema(importParameters);
}
exports.importProjectSchema = importProjectSchema;
/**
 * Returns specification API version.
 * @return {ApiVersion} Object of API version.
 */
function getApiVersion() {
    return {
        version: '2'
    };
}
exports.getApiVersion = getApiVersion;
/**
 * Calls the FPM Writer for generating a custom extension
 *
 * @param customExtensionParams parameters for generating the custom extension
 * @returns {Editor} Instance of mem-fs-editor
 */
function generateCustomExtension(customExtensionParams) {
    const fpmWriterFunction = apiTypes_1.FPMWriterMap.get(customExtensionParams.customExtension);
    if (fpmWriterFunction && typeof fpmWriterFunction === 'function') {
        return fpmWriterFunction(customExtensionParams.basePath, customExtensionParams.data, customExtensionParams.fsEditor);
    }
    else {
        return;
    }
}
exports.generateCustomExtension = generateCustomExtension;
//# sourceMappingURL=api.js.map